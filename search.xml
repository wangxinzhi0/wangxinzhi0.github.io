<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>华为机试题库</title>
      <link href="/posts/20577.html"/>
      <url>/posts/20577.html</url>
      
        <content type="html"><![CDATA[<h1 id="华为机试题库"><a href="#华为机试题库" class="headerlink" title="华为机试题库"></a>华为机试题库</h1><h2 id="HJ6-质数因子"><a href="#HJ6-质数因子" class="headerlink" title="HJ6 质数因子"></a>HJ6 质数因子</h2><p><strong>题目地址</strong>：<a href="https://www.nowcoder.com/practice/196534628ca6490ebce2e336b47b3607?tpId=37&&tqId=21229&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking">https://www.nowcoder.com/practice/196534628ca6490ebce2e336b47b3607?tpId=37&amp;&amp;tqId=21229&amp;rp=1&amp;ru=/ta/huawei&amp;qru=/ta/huawei/question-ranking</a></p><p><strong>方法一</strong>：迭代</p><p>分解质因数，从最小的开始（<code>2</code>）不停做除法，除到为<code>1</code>。或者除到最后除不了，就输出自己。还可以判断下除数是不是质数，但没必要，还会增加判断次数，得不偿失。</p><p><strong>每找到一个质因数，就不断除以它，直到除尽</strong>，这样保证找到的因数一定是质数。</p><p>「有两个坑」</p><ul><li>这个数本身就是个质数，输出自己。</li><li>可能超时，和判断质数一样，没必要从<code>2</code>一直尝试到<code>number</code>，循环到<code>Math.sqrt(number)</code>即可。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> number <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从2开始，判断到sqrt(number)即可</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//每找到一个质因数，除尽为止，这样保证找到的因数一定是质数</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>number<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                number <span class="token operator">/=</span> i<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最后number不为1，说明除完后剩余一个质数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">""</span><span class="token operator">:</span>number<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="HJ16-购物单"><a href="#HJ16-购物单" class="headerlink" title="HJ16 购物单"></a>HJ16 购物单</h2><p><strong>题目地址</strong>：<a href=""></a></p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为机试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选调笔试</title>
      <link href="/posts/2913.html"/>
      <url>/posts/2913.html</url>
      
        <content type="html"><![CDATA[<h1 id="行测"><a href="#行测" class="headerlink" title="行测"></a>行测</h1><h2 id="1-判断推理-31题，共29分"><a href="#1-判断推理-31题，共29分" class="headerlink" title="1. 判断推理(31题，共29分)"></a>1. 判断推理(31题，共29分)</h2><h3 id="1-1-逻辑判断-9题，1分"><a href="#1-1-逻辑判断-9题，1分" class="headerlink" title="1.1 逻辑判断(9题，1分)"></a>1.1 逻辑判断(9题，1分)</h3><h4 id="1-1-1-直言命题"><a href="#1-1-1-直言命题" class="headerlink" title="1.1.1 直言命题"></a>1.1.1 直言命题</h4><h4 id="1-1-2-假言命题"><a href="#1-1-2-假言命题" class="headerlink" title="1.1.2 假言命题"></a>1.1.2 假言命题</h4><p>&emsp;&emsp;<strong>解题步骤</strong>：</p><ul><li>第一步：快速写出递推关系<code>p=&gt;q</code>，即<code>p</code>真时<code>q</code>一定为真</li><li>第二步：选项当中找等价</li></ul><p>&emsp;&emsp;<strong>假言命题推理规则</strong>：</p><ul><li>1 前推后联结词</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.6i60f6jtf2w0.png" alt="image"></p><ul><li>2 后推前联结词</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.41cvvlsr8xk0.png" alt="image"></p><ul><li>3 <em>基前键，被推出</em>。基础前提关键</li></ul><p>&emsp;&emsp;<strong>假言命题等价关系</strong></p><ul><li><code>p=&gt;q</code>，<code>非q=&gt;非p</code>二者等价。<em>肯前必肯后，否后必否前</em>。</li></ul><p>&emsp;&emsp;<strong>经典例题</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.4px3bkaceo00.png" alt="image"></p><p>&emsp;&emsp;解题：第一步，递推关系。<code>上报=&gt;开除=&gt;被否决</code>，<code>未上报=&gt;烈</code>。第二步，等价关系。<code>不烈=&gt;上报</code>。最终得到<code>不烈=&gt;上报=&gt;开除=&gt;被否决</code>。根据推理规则和判断关系得到<code>A</code>为正确答案。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.jyeqjjl47ow.png" alt="image"></p><h4 id="1-1-3-可能性推理之削弱型和加强型"><a href="#1-1-3-可能性推理之削弱型和加强型" class="headerlink" title="1.1.3 可能性推理之削弱型和加强型"></a>1.1.3 可能性推理之削弱型和加强型</h4><p>&emsp;&emsp;<strong>可能性推理分类</strong>：</p><ul><li><strong>削弱型</strong>：使结论成立的<code>可能性下降</code></li><li><strong>加强型</strong>：使结论成立的<code>可能性上升</code></li></ul><p>&emsp;&emsp;<strong>题目类型1</strong>：<code>AB</code>同时存在→<code>A</code>导致<code>B</code>，<strong>削弱型解题</strong></p><ul><li>另有他因，<code>3</code>最强，<code>1</code>次之，<code>2</code>最次</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.7adyogfaads0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.613p0ggu2lk0.png" alt="image"></p><ul><li>因果倒置<code>1</code>/切断联系<code>2、3</code>，<code>1、3</code>较强，<code>2</code>次之。另有他因比因果倒置弱</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.7i2xxk0va780.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.4g3lu07f4mw0.png" alt="image"></p><p>&emsp;&emsp;<strong>题目类型2</strong>：<code>AB</code>同时存在→<code>A</code>导致<code>B</code>，加强型解题</p><ul><li>排除他因</li><li>建立联系</li></ul><p>&emsp;&emsp;<strong>题目类型2</strong>：为现象<code>A</code>找原因<code>B</code>，削弱型解题</p><ul><li>另有他因/否定此因，<code>2</code>削弱更强</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.62oluntasbc0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.jfely0yqf2o.png" alt="image"></p><p><strong>题目类型2</strong>：为现象<code>A</code>找原因<code>B</code>，加强型解题</p><ul><li>排除他因</li><li>解释因果</li></ul><h4 id="1-1-4-朴素逻辑"><a href="#1-1-4-朴素逻辑" class="headerlink" title="1.1.4 朴素逻辑"></a>1.1.4 朴素逻辑</h4><p>&emsp;&emsp;<strong>半真半假解题</strong>（代入选项排除法，不推荐）</p><ul><li><strong>直接推出答案</strong>（推荐）</li><li><ul><li>1.<strong>出现一次一定为真</strong>，有前提：<code>话数=被描述事物数=所具备的属性数</code></li></ul></li></ul><p>&emsp;&emsp;一共<code>6</code>句话，<code>3</code>句描述红色位置（最多<code>1</code>句为真），<code>2</code>句描述黄色位置（最多<code>1</code>句为真），<code>1</code>句描述蓝色位置（最多<code>1</code>句为真，<strong>直接判断该句为真</strong>）。<strong>同理</strong>，<code>3</code>句描述在上位置最多<code>1</code>句为真），<code>2</code>句描述在中位置最多<code>1</code>句为真），<code>1</code>句描述在底位置（<code>1</code>句为真，<strong>直接判断该句为真</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.3pwwu3ewkly0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.3jf25w1buo80.png" alt="image"></p><ul><li><ul><li>2.<strong>关联两句一定为假</strong></li></ul></li></ul><p>&emsp;&emsp;假设这句为真，这另一个人描述都为假，矛盾。查找时，如果甲两句都不关联两句，则可以交叉查找关联甲两句的话有没有，有则为假。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.5kgqksa16xo0.png" alt="image"></p><h3 id="1-2-定义判断-8题，1分"><a href="#1-2-定义判断-8题，1分" class="headerlink" title="1.2 定义判断(8题，1分)"></a>1.2 定义判断(8题，1分)</h3><h3 id="1-3-图形推理-5题，1-2分"><a href="#1-3-图形推理-5题，1-2分" class="headerlink" title="1.3 图形推理(5题，1.2分)"></a>1.3 图形推理(5题，1.2分)</h3><h3 id="1-4-类比推理-10题，0-6分"><a href="#1-4-类比推理-10题，0-6分" class="headerlink" title="1.4 类比推理(10题，0.6分)"></a>1.4 类比推理(10题，0.6分)</h3><h2 id="2-数量关系-5题，0-8分，共4分"><a href="#2-数量关系-5题，0-8分，共4分" class="headerlink" title="2.数量关系(5题，0.8分，共4分)"></a>2.数量关系(5题，0.8分，共4分)</h2><h3 id="2-1-数学运算"><a href="#2-1-数学运算" class="headerlink" title="2.1 数学运算"></a>2.1 数学运算</h3><h4 id="2-1-1-方程与不定方程"><a href="#2-1-1-方程与不定方程" class="headerlink" title="2.1.1 方程与不定方程"></a>2.1.1 方程与不定方程</h4><p>&emsp;&emsp;<strong>正整数范围内解题思路</strong>（实际题目不定方程要自己设未知数得到）：</p><ul><li><strong>奇偶性</strong>，系数一奇一偶数使用。 <code>3x+6y=42</code>，<code>x</code>和<code>y</code>都是正整数，则<code>x=A </code>   <code>A 2  B 3  C 5  D 7</code></li><li><strong>整除</strong><code>3x+7y=49</code>，系数和常数存在公约数使用。<code>x</code>和<code>y</code>都是正整数，则<code>x=B </code>   <code>A 4  B 7  C 9  D 11</code></li><li><strong>尾数</strong><code>3x+10y=49</code>，系数尾数为<code>0</code>或<code>5</code>使用。<code>x</code>和<code>y</code>都是正整数，则<code>x=B </code>                        <code>A 1  B 3  C 5  D 7</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.3fcn6s7dyxm0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.5bx4x6akobk0.png" alt="image"></p><p>&emsp;&emsp;<strong>实数范围内解题思路</strong>（实际题目不定方程要自己设未知数得到）</p><ul><li><strong>特值法</strong>：设系数大的未知数为<code>0</code>，计算出其他未知数，再求算式。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.5pnx25lwseo0.png" alt="image"></p><p>&emsp;&emsp;总结：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.2bzqw8ujtvvo.png" alt="image"></p><h4 id="2-1-2-利润问题"><a href="#2-1-2-利润问题" class="headerlink" title="2.1.2 利润问题"></a>2.1.2 利润问题</h4><p>&emsp;&emsp;四个基本公式</p><ul><li><code>利润=售价-成本</code></li><li><code>利润率=利润/成本=(售价-成本)/成本=售价/成本-1</code></li><li><code>打折率=折后价/折前价</code>，了解<code>折扣率=少付金额/折前价=1-打折率</code></li><li><code>总金额=单价金额×数量</code></li></ul><h4 id="2-1-3-行程问题"><a href="#2-1-3-行程问题" class="headerlink" title="2.1.3 行程问题"></a>2.1.3 行程问题</h4><p>&emsp;&emsp;<strong>相遇问题和追及问题</strong></p><ul><li><strong>明确模型</strong>——相遇还是追及</li><li><strong>明确时间</strong>——是否同时刻进行</li><li><strong>明确路程</strong>——开始时刻的距离</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.50eh2bbfs5w.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.25d62slpyfvk.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.58nrmtz9xf00.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.1mysup8bcnk0.png" alt="image"></p><h3 id="2-2-数字推理"><a href="#2-2-数字推理" class="headerlink" title="2.2 数字推理"></a>2.2 数字推理</h3><h2 id="3-资料分析-5题，1分，共5分"><a href="#3-资料分析-5题，1分，共5分" class="headerlink" title="3. 资料分析(5题，1分，共5分)"></a>3. 资料分析(5题，1分，共5分)</h2><h3 id="3-1-增长"><a href="#3-1-增长" class="headerlink" title="3.1 增长"></a>3.1 增长</h3><p>&emsp;&emsp;<strong>按时间划分</strong>：</p><ul><li><strong>基期</strong>：比较时间作为参照标准的时期。描述基期的具体数值叫做<code>基期值</code>。</li><li><strong>现期</strong>：相对于基期而言，是与基期相比较的时期。描述现期的具体数值叫做<code>现期值</code>。</li></ul><p>&emsp;&emsp;<strong>按形式划分</strong>：</p><ul><li><strong>量</strong>：指有一定计量单位的绝对数。现期值较基期值变化的绝对值叫做<code>增长量</code>。</li><li><strong>率</strong>：指量与量之间的一种比例关系。现期值与基期值相比变化的量较基期值增长的百分比叫做<code>增长率</code>，等同于增幅、增速、增长速度。</li></ul><p>&emsp;&emsp;<strong>计算公式</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.22cuwi8gmizk.png" alt="image"></p><p>&emsp;&emsp;<strong>计算技巧</strong>：</p><ul><li><strong>尾数法</strong>：通过确定计算结果的末尾数字来确定选项。不局限于末位数字，可以拓展为两位甚至三位数字。<code>适用于简单的加减法，且答案尾数各不相同的情况</code>，<code>488+13.2</code>尾数<code>2</code>。</li><li><strong>特征数字法</strong>：利用百分数和分数之间的转化，将百分数近似转化为一些特定的分数进而达到简化计算的目的。<code>算式中存在值为或接近特殊分数的百分数</code>。增长率为<code>241/5012=2.41%/50.12%=2.41%/(1/2)=4.82%</code>，增长量<code>119937*19.9%/(1+19.9%)=12万/(5+1)=2万</code>。</li></ul><p>&emsp;&emsp;常见分数和百分比转化（注意转化后放缩问题）：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.6jrt5vlk32s0.png" alt="image"></p><ul><li><p><strong>有效数字法</strong>：通过保留有效数字运算，<code>应用于复杂的乘除运算</code>。<strong>除法保留原则</strong>：分子不变，分母四舍五入保留三位。<strong>乘法保留原则</strong>如下：</p></li><li><ul><li>全舍：第三位数字为<code>0、1、2</code>时，全舍。<code>8211×132=8200×130</code></li><li>全进：第三位数字为<code>8、9</code>时，全进。<code>8281×138=8300×140</code></li><li>一进一舍：其他情况，“小数”（只看前两位）四舍五入，“大数”（只看前两位）与之相反。<code>8271×136=8200×14</code></li></ul></li><li><p><strong>十字交叉相减</strong>：解决<strong>比值混合</strong>问题。</p></li><li><ul><li><strong>第一层</strong>：<strong>取值范围</strong>。比如相比<code>2019</code>年，<code>2020</code>年进口增长率<code>12.3%</code>，出口增长率<code>20.1%</code>，进出口的增长率为多少。增长率=增长量/基期值，所以是比值混合问题。则进出口增长率范围在<code>12.3%-20.1%</code>之间</li><li><strong>第二层</strong>：<strong>靠近中间值哪边</strong>。上题中，再给定<code>2019</code>年基期值进口<code>100</code>亿，基期值出口<code>100</code>亿，则进出口增长率为<code>(12.3+20.1)%/2=16.2%</code>。如果出口基期值为<code>1</code>亿，则进出口增长率靠近基期值大的，取值范围为<code>16.2%-20.1%</code>。</li><li><strong>第三层</strong>：<strong>求分母之比</strong>。和第一层题目相同，再给定<code>2020</code>年进出口增长率为<code>15%</code>，求<code>2019</code>年进口量与出口量的比值，用十字交叉相减得到，求出的是<strong>分母之比</strong>，即基期值之比。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.47w7pyi4uia0.png" alt="image"></p></li><li><p><strong>两数相乘</strong>：平方差公式<code>22×18=(20+2)(20-2)=400-4</code>；乘<code>11</code>错位相加<code>46×11=460+46</code>；偶数乘<code>5</code>的倍数<code>24×35=12×2×35=12×70</code>；无特征<code>64×28</code>十位数乘放前面，个位数乘放后面组成4位数，交叉乘放中间两位最后相加得到结果，如图。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.4056122nzuk0.png" alt="image"></p><h3 id="3-2-比重"><a href="#3-2-比重" class="headerlink" title="3.2 比重"></a>3.2 比重</h3><h2 id="4-言语理解-10题，0-7分，共7分"><a href="#4-言语理解-10题，0-7分，共7分" class="headerlink" title="4. 言语理解(10题，0.7分，共7分)"></a>4. 言语理解(10题，0.7分，共7分)</h2><h3 id="4-1片段阅读"><a href="#4-1片段阅读" class="headerlink" title="4.1片段阅读"></a>4.1片段阅读</h3><p>&emsp;&emsp;<strong>主旨观点题</strong></p><ul><li><strong>高频词</strong>：用于排除干扰项。注意，主题词可以是<code>词或短语</code>；主题词可以是<code>一个</code>，也可以是<code>多个</code>；主题词出现<code>形式</code>（同义转述）可能不唯一。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.68tych9r2mc0.png" alt="image"></p><ul><li><strong>关键句的核心成分</strong>，用于锁定答案。关注关联词（但是，因此）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.gzywud9zveo.png" alt="image"></p><h3 id="4-2-文章阅读"><a href="#4-2-文章阅读" class="headerlink" title="4.2 文章阅读"></a>4.2 文章阅读</h3><h3 id="4-2语句表达"><a href="#4-2语句表达" class="headerlink" title="4.2语句表达"></a>4.2语句表达</h3><h3 id="4-3选词填空"><a href="#4-3选词填空" class="headerlink" title="4.3选词填空"></a>4.3选词填空</h3><p>&emsp;&emsp;<strong>答题思路</strong><code>1</code>：</p><ul><li>关注<code>上下文（标志词、空前空后句、句间关系）</code>，<code>寻找提示信息</code></li></ul><p>&emsp;&emsp;<strong>答题思路</strong><code>2</code>：</p><ul><li>关注<code>选项设置维度</code>，<code>筛、选</code>正确选项</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/XuanDiao/image.4vp5a4e5mvc0.png" alt="image"></p><h1 id="公基（30题，0-5分，共15分）"><a href="#公基（30题，0-5分，共15分）" class="headerlink" title="公基（30题，0.5分，共15分）"></a>公基（30题，0.5分，共15分）</h1><h1 id="申论"><a href="#申论" class="headerlink" title="申论"></a>申论</h1>]]></content>
      
      
      <categories>
          
          <category> 选调 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行测 </tag>
            
            <tag> 公基 </tag>
            
            <tag> 申论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真知灼见总结篇</title>
      <link href="/posts/18821.html"/>
      <url>/posts/18821.html</url>
      
        <content type="html"><![CDATA[<h2 id="把牢底坐穿"><a href="#把牢底坐穿" class="headerlink" title="把牢底坐穿"></a>把牢底坐穿</h2><p><strong>作者</strong>：何敬平烈士</p><p>为了免除下一代的苦难，我们愿——</p><p>愿把这牢底坐穿！</p><p>我们是天生的叛逆者，我们要这颠倒的乾坤扭转！</p><p>我们要把这不合理的一切打翻！</p><p>今天，我们坐牢了，坐牢又有什么稀罕？</p><p>为了免除下一代的苦难，我们愿——</p><p>愿把这牢底坐穿！</p><h2 id="《热风·随感录四十一》"><a href="#《热风·随感录四十一》" class="headerlink" title="《热风·随感录四十一》"></a>《热风·随感录四十一》</h2><p><strong>作者</strong>：鲁迅</p><p>所以我时常害怕，愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光，不必等候炬火。</p><p>此后如竟没有炬火：我便是唯一的光。倘若有了炬火，出了太阳，我们自然心悦诚服的消失。不但毫无不平，而且还要随喜赞美这炬火或太阳；因为他照亮了人类，连我都在内。</p>]]></content>
      
      
      <categories>
          
          <category> 精神食粮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真知灼见 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 JVM与Java体系架构</title>
      <link href="/posts/59662.html"/>
      <url>/posts/59662.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-JVM与Java体系架构"><a href="#1-JVM与Java体系架构" class="headerlink" title="1. JVM与Java体系架构"></a>1. JVM与Java体系架构</h2><h3 id="1-1-虚拟机"><a href="#1-1-虚拟机" class="headerlink" title="1.1 虚拟机"></a>1.1 虚拟机</h3><p>&emsp;&emsp;所谓虚拟机（<code>Virtual Machine</code>），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为<strong>系统虚拟机</strong>和<strong>程序虚拟机</strong>。</p><ul><li>大名鼎鼎的<code>Virtual Box</code>，<code>VMware</code>就属于系统虚拟机，它们完全是对物理计算机硬件的仿真（模拟），提供了一个可运行完整操作系统的软件平台。</li><li>程序虚拟机的典型代表就是<code>Java虚拟机</code>，它专门为执行单个计算机程序而设计，在<code>Java虚拟机</code>中执行的指令我们称为<code>Java字节码指令</code>。</li></ul><h3 id="1-2-Java虚拟机"><a href="#1-2-Java虚拟机" class="headerlink" title="1.2 Java虚拟机"></a>1.2 Java虚拟机</h3><p>&emsp;<strong>&emsp;Java虚拟机是一台执行Java字节码的虚拟计算机</strong>，它拥有独立的运行机制，其运行的<code>Java字节码</code>未必由<code>Java语言</code>编译而成。<code>JVM</code>是跨语言的平台。</p><p>&emsp;&emsp;<code>JVM</code>平台的各种语言可以共享<code>Java虚拟机</code>带来的跨平台性、优秀的垃圾回收器、以及可靠的即时编译器。</p><p>&emsp;&emsp;<strong>Java技术的核心就是Java虚拟机</strong>（<code>JVM</code>，<code>Java Virtual Machine</code>），因为所有的<code>Java程序</code>都运行在<code>Java虚拟机</code>内部。</p><h3 id="1-3-Java虚拟机的作用和特点"><a href="#1-3-Java虚拟机的作用和特点" class="headerlink" title="1.3 Java虚拟机的作用和特点"></a>1.3 Java虚拟机的作用和特点</h3><p>&emsp;&emsp;<strong>作用</strong>：<code>Java虚拟机</code>就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条<code>Java指令</code>，<code>Java虚拟机</code>规范中都有详细定义，如怎么取操作数，处理结果放在哪里。</p><p>​        <strong>特点</strong>：</p><ul><li>一次编译，到处运行，<code>Write Once, Run Anywhere</code>。<code>Java</code>跨平台的语言。</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ul><h3 id="1-4-JVM的位置"><a href="#1-4-JVM的位置" class="headerlink" title="1.4 JVM的位置"></a>1.4 JVM的位置</h3><p>&emsp;&emsp;<code>JVM</code>是运行在操作系统之上的，它与硬件没有直接的交互。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/JVM/image.3oniq5h5jlg0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/JVM/image.1hpy3xpqq6ww.png" alt="image"></p><h3 id="1-5-JVM的整体结构"><a href="#1-5-JVM的整体结构" class="headerlink" title="1.5 JVM的整体结构"></a>1.5 JVM的整体结构</h3><p>&emsp;&emsp;<code>HotSpot VM</code>是目前市面上高性能虚拟机的代表作之一，它采用解释器与即时编译器并存的架构。在今天，<code>Java</code>程序的运行性能早已脱胎换骨，已经达到了可以和<code>C/C++</code>程序一较高下的地步。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/JVM/image.6r3lfaigw0k0.png" alt="image"></p><h3 id="1-6-Java代码执行流程"><a href="#1-6-Java代码执行流程" class="headerlink" title="1.6 Java代码执行流程"></a>1.6 Java代码执行流程</h3><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/JVM/image.2alq6nzzvh7o.png" alt="image"></p><h3 id="1-7-JVM的架构模型"><a href="#1-7-JVM的架构模型" class="headerlink" title="1.7 JVM的架构模型"></a>1.7 JVM的架构模型</h3><p>&emsp;&emsp;<code>Java编译器</code>输入的指令基本上是一种<strong>基于栈的指令集架构</strong>，另外一种指令集架构则是<strong>基于寄存器的指令集架构</strong>。</p><h4 id="1-7-1-基于栈的指令集架构"><a href="#1-7-1-基于栈的指令集架构" class="headerlink" title="1.7.1 基于栈的指令集架构"></a>1.7.1 基于栈的指令集架构</h4><p>&emsp;&emsp;基于栈式架构的特点：</p><ul><li>设计和实现更简单，适用于资源受限的系统；</li><li>避开了寄存器的分配难题：使用零地址指令方式分配；</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性好，更好实现跨平台。</li></ul><h4 id="1-7-2-基于寄存器的指令集架构"><a href="#1-7-2-基于寄存器的指令集架构" class="headerlink" title="1.7.2 基于寄存器的指令集架构"></a>1.7.2 基于寄存器的指令集架构</h4><p>&emsp;&emsp;基于寄存器架构的特点（典型的应用是<code>x86</code>的二进制指令集：比如传统的<code>PC</code>以及<code>Android</code>的<code>Davlik</code>虚拟机）：</p><ul><li>指令集架构则完全依赖硬件，与硬件高度耦合，可移植性差；</li><li>性能优秀和执行更高效；</li><li>花费更少的指令去完成一项操作；</li><li>在大部分情况下，基于寄存器架构的指令集是一地址指令、二地址指令和三地址指令，而基于栈式架构却是以零地址指令为主。</li></ul><h4 id="1-7-3-两种架构举例"><a href="#1-7-3-两种架构举例" class="headerlink" title="1.7.3 两种架构举例"></a>1.7.3 两种架构举例</h4><p>&emsp;&emsp;同样执行<code>2+3</code>这种逻辑操作，其指令分别如下：</p><p>&emsp;&emsp;基于栈的计算流程（以Java虚拟机为例），<code>8</code>条指令：</p><pre class=" language-java"><code class="language-java">iconst_2 <span class="token comment" spellcheck="true">//常量2入栈</span>istore_1iconst_3 <span class="token comment" spellcheck="true">// 常量3入栈</span>istore_2iload_1iload_2iadd <span class="token comment" spellcheck="true">//常量2/3出栈，执行相加</span>istore_0 <span class="token comment" spellcheck="true">// 结果5入栈</span></code></pre><p>&emsp;&emsp;基于寄存器的计算流程，<code>2</code>条指令：</p><pre class=" language-java"><code class="language-java">mov eax<span class="token punctuation">,</span><span class="token number">2</span> <span class="token comment" spellcheck="true">//将eax寄存器的值设为1</span>add eax<span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment" spellcheck="true">//使eax寄存器的值加3</span></code></pre><h4 id="1-7-4-JVM架构总结"><a href="#1-7-4-JVM架构总结" class="headerlink" title="1.7.4 JVM架构总结"></a>1.7.4 JVM架构总结</h4><p>&emsp;<strong>&emsp;由于跨平台的设计，Java指令都是根据栈来设计的</strong>。不同的<code>CPU</code>架构不同，所以不能设计为基于寄存器的。<strong>栈的优点</strong>：跨平台，指令集小，编译器容易实现，<strong>缺点</strong>是性能比寄存器差一些。</p><p>&emsp;&emsp;<strong>问</strong>：时至今日，尽管嵌入式平台已经不是Java程序的主流运行平台了（准确来说应该是<code>HotSpot VM</code>的宿主环境已经不局限于嵌入式平台了），那么为什么不将架构更换为基于寄存器的架构呢？</p><p>&emsp;&emsp;<strong>答</strong>：因为基于栈的架构跨平台性好、指令集小，虽然相对于基于寄存器的架构来说，基于栈的架构编译得到的指令更多，执行性能也不如基于寄存器的架构好，但考虑到其跨平台性与移植性，我们还是选用栈的架构。</p><h3 id="1-8-JVM生命周期"><a href="#1-8-JVM生命周期" class="headerlink" title="1.8 JVM生命周期"></a>1.8 JVM生命周期</h3><h4 id="1-8-1-虚拟机的启动"><a href="#1-8-1-虚拟机的启动" class="headerlink" title="1.8.1 虚拟机的启动"></a>1.8.1 虚拟机的启动</h4><p>&emsp;&emsp;<code> Java虚拟机</code> 的启动是通过引导类加载器（<code>bootstrap class loader</code> ）创建一个初始类（<code> initial class</code> ）来完成的，这个类是由虚拟机的具体实现指定的。</p><h4 id="1-8-2-虚拟机的执行"><a href="#1-8-2-虚拟机的执行" class="headerlink" title="1.8.2 虚拟机的执行"></a>1.8.2 虚拟机的执行</h4><p>&emsp;&emsp;一个运行中的虚拟机有着一个清晰的任务：<code>执行Java程序</code>。程序开始执行时它才运行，程序结束时它就停止。<strong>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程</strong>。</p><h4 id="1-8-3-虚拟机的退出"><a href="#1-8-3-虚拟机的退出" class="headerlink" title="1.8.3 虚拟机的退出"></a>1.8.3 虚拟机的退出</h4><p>&emsp;&emsp;由如下几种情况：</p><ul><li>程序正常执行结束；</li><li>程序在执行过程中遇到了异常或错误而异常终止；</li><li>由于操作系统出现错误而导致<code>Java</code>虚拟机进程终止；</li><li>某线程调用<code>Runtime</code>类或<code>System</code>类的<code>exit()</code>方法，或<code>Runtime</code>类的<code>halt()</code>方法，并且<code>Java</code>安全管理其也允许这次<code>exit()</code>或<code>halt()</code>操作；</li><li>除此之外，<code>JNI(Java Native Interface)</code>规范描述了用<code>JNI Invocation API</code>来加载或卸载<code>Java</code>虚拟机时，<code>Java</code>虚拟机的退出情况。</li></ul><h3 id="1-9-JVM发展历程"><a href="#1-9-JVM发展历程" class="headerlink" title="1.9 JVM发展历程"></a>1.9 JVM发展历程</h3><p>&emsp;&emsp;世界上第一款商用<code>Java虚拟机</code>：<code>Sun Classic VM</code>。</p><p>&emsp;&emsp;三大商用虚拟机：<code>HotSpot VM</code>，<code>JRockit</code>，<code>IBM J9</code>。</p><h3 id="1-10-总结"><a href="#1-10-总结" class="headerlink" title="1.10 总结"></a>1.10 总结</h3><p>&emsp;&emsp;具体的JVM的内存结构，其实取决于其实现，不同厂商的<code>JVM</code>，或者同一厂商的不同版本，都可能存在一定差异。主要以<code>Orcale HotSpot VM</code>为默认虚拟机。</p>]]></content>
      
      
      <categories>
          
          <category> JVM上篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 内存与垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/posts/31415.html"/>
      <url>/posts/31415.html</url>
      
        <content type="html"><![CDATA[<p><strong>写在前面</strong></p><p>&emsp;&emsp;虽然博主关于怎么部署个人博客写的十分清除明白，但由于软件版本迭代等原因，实际操作可能出现各种问题。自己调试了好久，终于实现了这个博客主题，真的好开心，主题是的好看，感谢<a href="https://sitoi.cn/">博主</a>！特此记录操作过程。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p>&emsp;&emsp;主要安装<code>Node.js</code>、<code>Hexo</code>、<code>Git</code>和配置<code>Github SSH key</code>，及创建<code>Github Pages</code>页面。</p><p>&emsp;&emsp;具体操作请参考<a href="https://sitoi.cn/posts/6666.html">这篇博客</a></p><h2 id="2-初始化Hexo项目"><a href="#2-初始化Hexo项目" class="headerlink" title="2. 初始化Hexo项目"></a>2. 初始化Hexo项目</h2><p>&emsp;&emsp;主要包括安装依赖包、本地启动博客、部署到<code>Github</code>。&emsp;具体操作请参考<a href="https://sitoi.cn/posts/27801.html">这篇博客</a>，主要命令如下：</p><pre class=" language-YAML"><code class="language-YAML"># 初始化Hexo项目hexo init hexoblog# 切换到项目目录cd hexoblog# 安装npm包npm i# 本地启动Hexo博客hexo server# 安装hexo-deployer-git插件npm install hexo-deployer-git --save--------------# 修改_config.yml文件中的url和deploy仓库地址url: http://wangxinzhi0.github.iodeploy:  type: git  repo: git@github.com:wangxinzhi0/wangxinzhi0.github.io.git  branch: master--------------# 部署博客到githubhexo generatehexo deploy</code></pre><p>&emsp;&emsp;<code>hexo init hexoblog</code>初始化博客时<strong>可能遇到的问题</strong></p><p>&emsp;&emsp;<strong>错误一</strong>：<code>OpenSSL SSL_read: Connection was reset, errno 10054</code>错误，输入下方命令：</p><pre class=" language-yaml"><code class="language-yaml">git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global http.sslVerify "false"</code></pre><p>&emsp;&emsp;<strong>错误二</strong>：<code>Failed to connect to github.com port 443: Timed out</code>错误，输入下方命令<strong>取消<code>http(s)</code>代理</strong>：</p><pre class=" language-yaml"><code class="language-yaml">git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global <span class="token punctuation">-</span><span class="token punctuation">-</span>unset http.proxygit config <span class="token punctuation">-</span><span class="token punctuation">-</span>global <span class="token punctuation">-</span><span class="token punctuation">-</span>unset https.proxy</code></pre><p>&emsp;&emsp;<strong>注意</strong>：如果设置完还出现上面错误，多试几次即可。</p><h2 id="3-设置美美的主题"><a href="#3-设置美美的主题" class="headerlink" title="3. 设置美美的主题"></a>3. 设置美美的主题</h2><p>&emsp;&emsp;完成上面两步之后，你应该已经有一个<code>Hexo</code>博客了。接下来我们借助<code>matery</code>主题美化博客，这里使用<code>Sitoi</code>的<code>github</code>项目实现博客美化。</p><ul><li><strong>第一步</strong>：安装依赖包，在自己博客根目录依次执行下面命令</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 安装npm依赖包</span>npm install<span class="token comment" spellcheck="true"># 检测hexo版本，设置为4.1.1，版本不对会出错</span>hexo <span class="token punctuation">-</span><span class="token punctuation">-</span>versionnpm i hexo@4.1.1<span class="token comment" spellcheck="true"># hexo-abbrlink生成非中文链接</span><span class="token comment" spellcheck="true"># 自动为每篇文章生成一串数字作每篇文章的 URI 地址。每篇文章的</span><span class="token comment" spellcheck="true"># Front-matter 中会自动增加一个配置项：abbrlink: xxxxx，该项# 的值就是当前文章的URI地址。</span>npm install hexo<span class="token punctuation">-</span>abbrlink <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span class="token comment" spellcheck="true"># 基于 hexo-generator-feed 的 Hexo 插件来做 RSS</span>npm install hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>feed <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span class="token comment" spellcheck="true"># 配置页脚信息，统计文章字数</span>npm i <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>wordcount<span class="token comment" spellcheck="true"># 代码高亮插件，Hexo自带高亮主题丑</span>npm i <span class="token punctuation">-</span>S hexo<span class="token punctuation">-</span>prism<span class="token punctuation">-</span>plugin<span class="token comment" spellcheck="true"># 内容搜索插件</span>npm install hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>search <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span class="token comment" spellcheck="true"># （可选）看板娘插件和"现有的"模型安装https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</span>npm install <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>helper<span class="token punctuation">-</span>live2dnpm install <span class="token punctuation">-</span><span class="token punctuation">-</span>save live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>epsilon2_1<span class="token comment" spellcheck="true">#（可选）hexo-neat 优化提速插件（去掉 HTML、css、js 的 blank 字符）</span>npm install hexo<span class="token punctuation">-</span>n</code></pre><ul><li><strong>第二步</strong>：点击<a href="https://github.com/Sitoi/Sitoi-blog">这里</a>下载博客项目源码到本地</li></ul><p>&emsp;&emsp;将下载博客项目里的<code>config.yml</code>文件拷贝到自己的博客目录，根据<a href="https://sitoi.cn/posts/63466.html">这篇博客</a>配置所有的<code>config.yml</code>内容，不需要再安装插件（所有插件上述已经安装）。</p><p>&emsp;&emsp;注意：<code>emoji</code>表情支持插件安装失败，参考博客目录<code>10.8</code>指导不开启该功能即可。</p><ul><li><strong>第三步</strong>：拷贝相关文件到自己博客中</li></ul><p>&emsp;&emsp;首先把自己博客中的<code>scaffolds</code>、<code>source</code>、<code>themes</code>文件夹删除（如果有博客、主题等重要内容<strong>记得备份</strong>），然后从下载博客项目中拷贝这<code>3</code>个文件到自己博客中。</p><p>&emsp;&emsp;预览效果<code>hexo s</code>，如果出现<code>ERROR Plugin load failed: hexo-theme-landscape</code>错误，删除博客根目录<code>node_modules/hexo-theme-landscape</code>文件夹即可。</p><ul><li><strong>第四步</strong>：部署到远端</li></ul><p>&emsp;&emsp;其实就是<code>config.yml</code>中远端仓库的设置。</p><p>&emsp;&emsp;这一步可能<strong>部署到远端是空白页</strong>，仔细观察发现生成的<code>public</code>文件就是空的。需要卸载原有的<code>node.js</code>，重新安装<a href="https://nodejs.org/download/release/v13.5.0/">13.5.0版本的node.js</a>。在博客目录执行命令<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>，问题就解决了。</p><ul><li><strong>第五步</strong>：一些自己的设置</li></ul><p>&emsp;&emsp;<code>Hexo</code><a href="https://zhuanlan.zhihu.com/p/69211731">博客美化合集</a>，设置看板娘会导致短暂的网页格式错误，暂未找到解决方案。</p><h2 id="4-文章Front-matter介绍"><a href="#4-文章Front-matter介绍" class="headerlink" title="4. 文章Front-matter介绍"></a>4. 文章Front-matter介绍</h2><p>&emsp;&emsp;<code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><p>&emsp;&emsp;示例：</p><pre class=" language-YAML"><code class="language-YAML">title: 基于 Hexo GitHub 从零开始搭建个人博客date: 2019-12-30 09:25:00author: Sitoiimg: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgtoc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容categories: Hexokeywords: Hexo GitHub blogtags:    - Hexo    - Blog    - GitHub</code></pre><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>跟 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床 (腾讯云、七牛云、又拍云等) 来做图片的路径。如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td>表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则，可以是 <code>cc_by</code>,<code>cc_by_nd</code>,<code>cc_by_sa</code>,<code>cc_by_nc</code>,<code>cc_by_nc_nd</code>,<code>cc_by_nc_sa</code>,<code>cc0</code>,<code>noreprint</code> 或 <code>pay</code> 中的一个</td></tr></tbody></table><h2 id="5-主题音频、视频部署方法"><a href="#5-主题音频、视频部署方法" class="headerlink" title="5.主题音频、视频部署方法"></a>5.主题音频、视频部署方法</h2><p><strong>方案一</strong>：</p><p>&emsp;&emsp;将本地音频、视频上传到<a href="https://u.3w.cn/home">三维推</a>，在主页场景应用中有音频推广和视频推广，上传等待审核即可。</p><p>&emsp;&emsp;审核通过之后，复制应用链接，到浏览器地址栏访问。<strong>对于视频</strong>，右键检查，你会找到<code>src=&quot;https://xxx.mp4&quot;</code>链接，把它复制到<code>config.yml</code>首页视频设置即可。<strong>对于音频</strong>，右键检查，你会找到<code>src=&quot;https://xxx.mp3&quot;</code>链接，复制链接到<code>source/data/musics.json</code>中，音频封面图可以在网易云等网站找到，或者自己随便指定音频封面。</p><p><strong>方案二</strong>：</p><p>&emsp;&emsp;白嫖在线视频剪辑<a href="https://www.kapwing.com/">kapwing</a>空间（需要登录），导出视频，音频，右键检查，找到<code>mp4</code>和<code>mp3</code>链接，进行相关部署即可。</p><h2 id="6-配置直达评论和暗色切换功能"><a href="#6-配置直达评论和暗色切换功能" class="headerlink" title="6.配置直达评论和暗色切换功能"></a>6.配置直达评论和暗色切换功能</h2><p>&emsp;&emsp;直达评论：<a href="https://blog.csdn.net/cungudafa/article/details/106278206">参考博客</a></p><p>&emsp;&emsp;暗色切换：<a href="https://nekodeng.gitee.io/posts/blog-night-mode.html#toc-heading-1">参考博客</a>。注意<code>深色模式按钮</code>放在<code>body</code>标签开始后，按钮的<code>js</code>代码追加到<code>/source/js/matery.js</code>末尾，按钮css样式和覆盖样式追加<code>/source/css/matery.css</code>末尾。</p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github博客关联个性化域名</title>
      <link href="/posts/40779.html"/>
      <url>/posts/40779.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-申请和配置个人域名"><a href="#1-申请和配置个人域名" class="headerlink" title="1.申请和配置个人域名"></a>1.申请和配置个人域名</h2><p>&emsp;&emsp;假定你已经部署了<code>xxx.github.io</code>的个人博客，想要配置<code>xxx.top</code>域名访问个人博客。</p><p>&emsp;&emsp;这里以<a href="https://console.dnspod.cn/domain">腾讯云</a>为例，新用户可以<code>1</code>元白嫖一年域名，特别注意：域名的续费价格！！！可能用便宜价格引你入坑，然后续费贼贵。<strong>注册要实名认证</strong>，可能要一段时间审核。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/blogbeauty/image.1ekwsdyv5328.png" alt="image"></p><p>&emsp;&emsp;接下来，你需要给域名添加解析，<code>DNS</code>是默认就有的。你需要<code>ping</code>自己博客地址得到<code>IP</code>地址，手动添加两条<code>A</code>类型解析，主机记录分别为<code>@</code>和<code>www</code>。之后，你需要为添加的两条解析申请<code>SSL</code>证书（购买域名会送，本来也有免费的可以申请），按流程申请，然后将中间要添加的解析，复制到这里，注意是<code>TXT</code>类型。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/blogbeauty/image.5u53qm663x40.png" alt="image"></p><h2 id="2-Github仓库关联域名"><a href="#2-Github仓库关联域名" class="headerlink" title="2.Github仓库关联域名"></a>2.Github仓库关联域名</h2><p>&emsp;&emsp;找到<code>xxx.github.io</code>仓库，点击设置，找到<code>Pages</code>，填写自己申请的域名，保存，忽略提醒。看看仓库是不是多了CNAME文件，内容为自己的域名。</p><p>&emsp;&emsp;好了，现在你可以通过<code>xxx.top</code>或<code>www.xxx.top</code>访问自己的博客了！</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/blogbeauty/image.2iymstmvvi00.png" alt="image"></p><ul><li>注意：此时，远端仓库和本地仓库有区别，需要<code>git pull --rebase origin master</code>来同步。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicX图床管理和加速（Github图床）</title>
      <link href="/posts/48421.html"/>
      <url>/posts/48421.html</url>
      
        <content type="html"><![CDATA[<p>@<a href="PicX%E5%9B%BE%E5%BA%8A%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E9%80%9F%EF%BC%88Github%E5%9B%BE%E5%BA%8A%EF%BC%89">TOC</a></p><h2 id="1-为什么需要图床？"><a href="#1-为什么需要图床？" class="headerlink" title="1.为什么需要图床？"></a>1.为什么需要图床？</h2><p>&emsp;&emsp;在写个人博客时，你一定有这样的烦恼，博客中的图片怎么存放呢？</p><ul><li>第一种方案是保存在本地，使用绝对或相对路径引用图片（相对路径在上传到远端时可能可以正确显示，<code>typora</code>就是这样，但使用相对路径，在本地就无法查看了）。</li><li>第二种方案是使用存储图片的服务器——即“图床”，获得一个图片链接，可以在本地和远程显示图片。</li></ul><p>&emsp;&emsp;你可能听说过图床，但却不知道怎么使用。别急，本文将详细讲述如何使用<code>github</code>搭建图床，并且使用<code>jsDelivr</code>进行<code>CDN</code>加速，在本地和远端都可以快速显示图片。</p><p>&emsp;&emsp;关键是，免费、快速、方便。白嫖党的福音呀！！！</p><h2 id="2-图床神器PicX"><a href="#2-图床神器PicX" class="headerlink" title="2. 图床神器PicX"></a>2. 图床神器PicX</h2><p>&emsp;&emsp;<code>PicX</code>：<a href="https://picx.xpoet.cn/">https://picx.xpoet.cn/</a>是基于GitHub API开发的图床神器。图片外链使用<code>jsDelivr</code>进行<code>CDN</code>加速，免下载，免安装，打开<a href="https://picx.xpoet.cn/">PicX官网</a>即可直接使用。</p><h3 id="2-1结合GitHub仓库配置图床"><a href="#2-1结合GitHub仓库配置图床" class="headerlink" title="2.1结合GitHub仓库配置图床"></a>2.1结合GitHub仓库配置图床</h3><p>&emsp;&emsp;<a href="https://picx.xpoet.cn/">PicX官网</a>有配置教程，非常简单。</p><ul><li>第一步：创建一个用来存储图片的<a href="https://github.com/new">GitHub仓库</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.4i7pvz44wmw0.png" alt="image"></p><ul><li>第二步：创建一个有<code>repo</code>权限的<a href="https://github.com/settings/tokens/new">GitHub Token</a>。填写信息，点击<code>Generate token</code>按钮，即可生成一个<code>token</code>。新生成的<code>Token</code>只会显示一次，请妥善保存！如有遗失，重新生成即可。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.bjc4wx9r3rk.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.3hqi62y4p220.png" alt="image"></p><ul><li>第三步：进行图床配置（绑定GitHub Token、存储图片的仓库和目录）。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.6ysyusxvb5k0.png" alt="image"></p><ul><li><p>新建目录：需手动输入一个新目录。</p></li><li><p>根目录：图片将直接存储在仓库根目录下。</p></li><li><p>自动目录：自动生成日期格式 <code>YYYYMMDD</code> 的目录。例如：<code>20200909</code>。</p></li><li><p>选择仓库目录：自动获取仓库下所有目录，选择一个即可。</p></li></ul><p>&emsp;&emsp;至此完成图床配置，现在就可以开始上传图片了，快去试试吧~</p><h3 id="2-2-图床使用"><a href="#2-2-图床使用" class="headerlink" title="2.2 图床使用"></a>2.2 图床使用</h3><ol><li><strong>配置上传目录</strong></li></ol><p>&emsp;&emsp;首先指定当前博客图片的上传目录，以本博客为例，配置新建目录<code>picturebed</code>，将会在仓库根目录下新建picturebed目录，后续上传图片均在该目录。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.3hqb2v2pfo80.png" alt="image"></p><p>要写新博客，重新配置新建目录即可。如果仓库下已经有多个目录，后续还可以在配置处切换目录。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.1s2mtar3nhhc.png" alt="image"></p><ol start="2"><li><strong>上传图片</strong></li></ol><p>点击上传区域，可以拖拽、粘贴、本地上传。建议哈希化图片名字，如果名字有规律还有重命名。</p><p>PS：粘贴上传用的是真的舒服！</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.5xyybp0o8ew0.png" alt="image"></p><ol start="3"><li><strong>复制图片外链</strong></li></ol><p>&emsp;&emsp;图片上传成功后，即可复制图片外链。如果是写<code>markdown</code>博客，先选中<code>MD</code>，然后点击<code>GitHub</code>或<code>CDN</code>得到图片链接地址，复制到博客即可显示图片。</p><p>&emsp;&emsp;<strong>特别注意</strong>：<code>GitHub</code>链接地址未经过加速，访问很慢。<code>CDN</code>链接是经过<code>jsDelivr</code>加速的链接，在本地和远端访问都极快！！！</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.507ey9xsx500.png" alt="image"></p><ol start="4"><li><strong>图床管理</strong></li></ol><p>&emsp;&emsp;图床管理，对仓库里保存的图片进行管理。主要就是查看和删除仓库目录下的图片。一般不建议删除，删除了可以通过版本回退恢复，但提交信息<code>commit</code>都一样，难以区分版本号。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/picturebed/image.65xvlc7o4g80.png" alt="image"></p><p>&emsp;&emsp;至此，使用<code>github</code>仓库和<code>PicX</code>图床神器搭建和使用图床就已经完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="/posts/41310.html"/>
      <url>/posts/41310.html</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰Git教程</a>、<a href="https://www.runoob.com/git/git-tutorial.html">菜鸟教程Git教程</a></p><h2 id="1-Git简介"><a href="#1-Git简介" class="headerlink" title="1.Git简介"></a>1.Git简介</h2><h3 id="Git的功能"><a href="#Git的功能" class="headerlink" title="Git的功能"></a>Git的功能</h3><p><code>Git</code>是目前世界上最先进的<strong>分布式版本控制系统</strong>（没有之一），高端大气上档次！</p><p>什么是版本控制系统？</p><ul><li>如果你用<code>Word</code>写过长篇大论(毕业论文)，你可能需要修改很多版本，保存一堆文件，过了一段时间，你想找回之前的某个版本，但是已经记不清它的位置了，只好一个一个查找，很麻烦。想只保留最新版本，却怕之前版本还会用到，不敢删除，真郁闷！</li><li>更要命的是，如果是多人协作，你需要将<code>Word</code>发给同事，你修改的<code>Word</code>和同事修改的<code>Word</code>要手动合并，非常困难。</li></ul><p>于是，如果有一个软件可以自动帮我们记录每次文件的改动，还可以让同事协作编辑，这样自己就不需要管理一堆各种版本文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以。恭喜你，<code>Git</code>就能完成这项工作。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/1.6fpan38ofig0.png" alt="1"></p><h3 id="Git安装和配置"><a href="#Git安装和配置" class="headerlink" title="Git安装和配置"></a>Git安装和配置</h3><p>这里以<code>Windows</code>操作系统为例（其他操作系统自行百度），首先从Git官网<a href="https://git-scm.com/downloads">下载安装程序</a>，默认安装即可。<strong>安装</strong>完桌面右击可以看到<code>Git GUI Here</code>和<code>Git Bash Here</code>即为成功。</p><p>安装完成后，还需要进一步<strong>配置机器身份</strong>，你的名字和邮箱，键入以下两行命令。你无需担心别人冒充名字和邮箱，首先大家都是善良的小伙伴，其次，真的存在冒充也有法可查。</p><pre class=" language-yaml"><code class="language-yaml">git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.name "Your Name"//配置姓名git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.email "Your Email"//配置邮箱</code></pre><p>键入如下命令可以<strong>查看配置结果</strong>。</p><pre class=" language-yaml"><code class="language-yaml">git config <span class="token punctuation">-</span><span class="token punctuation">-</span>list//查看配置结果</code></pre><p><strong>注意</strong>：<code>git config</code>命令的<code>--global</code>参数，用了它表示这台机器上的所有<code>Git</code>仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和<code>Email</code>地址。</p><h3 id="Git工作区、暂存区、版本库"><a href="#Git工作区、暂存区、版本库" class="headerlink" title="Git工作区、暂存区、版本库"></a>Git工作区、暂存区、版本库</h3><p>我们理解下Git的基本概念：</p><ul><li><strong>工作区</strong>：就是你在电脑里看到的目录</li><li><strong>暂存区</strong>：英文<code>stage</code>或<code>index</code>，一般存放在<code>.git</code>（<code>git init</code>后生成的目录）目录下的<code>index</code>文件中，所以有时也称索引(<code>index</code>)</li><li><strong>版本库</strong>：工作区有一个隐藏目录<code>.git</code>，是<code>Git</code>的版本库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/2.2vhljm6j5u60.png" alt="2"></p><h2 id="2-时空机穿梭"><a href="#2-时空机穿梭" class="headerlink" title="2.时空机穿梭"></a>2.时空机穿梭</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>版本库，又称仓库，英文(<strong>repository</strong>)。你可以简单的理解成一个目录，这个目录里所有文件都可以被<code>Git</code>管理起来，每个文件的修改、删除，<code>Git</code>都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><p><strong>方法一</strong>：<code>git init</code></p><p><code>Git</code>通过<code>git init</code>命令初始化一个<code>git</code>仓库，可以在空目录或存在内容的目标执行，会在目录下生成一个.git目录（是隐藏目录），<code>.git</code>目录用了跟踪管理版本库，没事千万不要修改。</p><pre class=" language-YAML"><code class="language-YAML">git init//在当前目录初始化仓库git init 指定目录//在指定目录初始化仓库</code></pre><p>初始化仓库之后，可以在仓库存放数据和资源。使用下面两条命令提交修改到本地版本库。</p><pre class=" language-YAML"><code class="language-YAML">git add Git.md//提交修改内容Git.md到暂存区git add . //提交仓库所有修改内容到暂存区git commit -m "message" //提交暂存区所有内容到本地版本库</code></pre><p>使用<code>git status</code>查看仓库当前状态，显示有变更的文件。</p><pre class=" language-YAML"><code class="language-YAML">git status//查看仓库当前状态</code></pre><p><strong>方法二</strong>：<code>git clone</code></p><p>当然，你也可以充现有<code>Git</code>仓库拷贝项目，使用<code>git clone</code>命令。</p><pre><code>git clone Git仓库 本地目录//例如：git clone git://github.com/schacon/grit.git mygrit</code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>我们多次修改提交之后，版本控制系统肯定记得我们修改了什么内容，查看版本历史记录的命令为<code>git log</code>。该命令显示最近到最远的提交日志，如果嫌输出信息太多，可以加上<code>--pretty=oneline</code>参数。</p><pre class=" language-YAML"><code class="language-YAML">git log//显示提交日志，由近及远git log --pretty=oneline//单行显示提交日志，由近及远</code></pre><p>单行显示是，前面一大串字符为<code>commit id</code>(版本号)，唯一的。</p><p><code>Ok</code>，知道了怎么看提交历史，我们现在想要回退版本，用<code>git reset</code>命令实现。首先，<code>Git</code>必须直到当前版本是哪个版本，<code>Git</code>中，<code>HEAD</code>指向表示当前版本，上一个版本为<code>HEAD^</code>，上上一个版本为<code>HEAD^^</code>，当然<code>^</code>太多的话打起来不方便，用<code>HEAD~50</code>表示回退<code>50</code>个版本。</p><pre class=" language-YAML"><code class="language-YAML">git reset --hard HEAD^//HEAD指向当前版本，回退到上一个版本</code></pre><p><code>--hard</code>参数的意义后面再讲。</p><p>回退到上一个版本之后，提交日志就不显示回退之前的那个版本了，我们还能回到回退之前吗？当然可以，这时需要<code>git reflog</code>命令显示每一次提交日志，找到<code>commit id</code>即可使用<code>git reset</code>命令回到未来了。</p><pre class=" language-YAML"><code class="language-YAML">git reflog//显示所有提交历史git reset --hard commit_id//回到未来的某个版本</code></pre><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p><code>Git</code>为什么比其他版本控制系统设计的优秀呢？这主要得益于<code>Git</code><strong>跟踪管理的是修改</strong>，而非文件。每次修改，如果不<code>git add</code>添加到暂存区，那么就不会加到<code>commit</code>中。</p><p>例如你做了如下操作：</p><ul><li>第一次修改-&gt;<code>git add</code>-&gt;第二次修改-&gt;<code>git commit</code>，这样第二次修改不会被提交，因为<code>git commit</code>只负责把暂存区的修改提交了。</li></ul><p>你可以修改一次<code>git add</code>一次到暂存区，最后<code>git commit</code>提交，也可以几次修改后<code>git add</code>然后<code>git commit</code>，将几次修改合并后一块提交。</p><p>提交后，用<code>git diff</code>可以查看文件差别。</p><pre class=" language-YAML"><code class="language-YAML">git diff HEAD --readme.txt//查看工作区和版本库里最新版本的区别</code></pre><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p><strong>场景一</strong>：命令<code>git checkout --readme.txt</code>可以<strong>把该文件在工作区的修改全部撤销</strong>，这里有两种情况：</p><ul><li><code>readme.txt</code>自修改后还没有放到暂存区，现在撤销修改就回到和版本库一模一样的状态</li><li><code>readme.txt</code>已经添加到暂存区，又做了修改，现在撤销修改就回到添加暂存区后的状态</li></ul><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><pre class=" language-YAML"><code class="language-YAML">git checkout --readme.txt//将文件回到最近一次git commit或git add时的状态</code></pre><p>注意：<code>git checkout --file</code>命令中的<code>--</code>很重要，没有它就变成了了切换到另一个分支的命令，后面分支管理再讲述<code>git checkout</code>命令。</p><p><strong>场景二</strong>：如果<strong>已经将修改添加到暂存区</strong>，但是还没有<code>commit</code>，可以使用<code>git reset HEAD &lt;file&gt;</code>把暂存区的修改撤销掉，重新放回到工作区。</p><pre class=" language-YAML"><code class="language-YAML">git reset HEAD readme.txt//把文件暂存区修改回退到工作区</code></pre><p><code>git reset</code>命令不仅可以回退版本，也可以吧暂存区的修改回退到工作区，当我们使用<code>HEAD</code>是，表示最新版本。</p><p>还记得如何丢弃工作区的修改吗？</p><p><strong>场景三</strong>：<strong>已经提交了不合适的修改到版本库时</strong>，想要撤销本次提交，参考「版本回退」一节，<code>git reset --hard commit_id</code>，前提是没有推送到远程库。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>在<code>Git</code>中，删除也是一个修改操作。</p><p>首先添加一个<code>test.txt</code>文件并提交到仓库，一般情况下，直接在文件管理器中删除文件，此时<code>git status</code>看到<code>Git</code>提示你删除了文件，工作区和版本库不一致了。现在你有两种选择：</p><ul><li>确实要删除该文件，那就用<code>git rm</code>删掉，并且<code>git commit</code></li></ul><pre class=" language-YAML"><code class="language-YAML">git rm test.txt//将文件从暂存区和工作区删除git commit -m "remove test.txt"</code></pre><ul><li>删错了，因为版本库还有呢，所以可以轻松的使用工作区撤销修改恢复到最新版本</li></ul><pre class=" language-YAML"><code class="language-YAML">git checkout --test.txt//撤销工作区修改（删除）</code></pre><p>注意：<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，物理工作区是修改还是删除，都可以“一键还原”。从来没有添加到版本库就被删除的文件，是无法恢复的！</p><h2 id="3-远程仓库"><a href="#3-远程仓库" class="headerlink" title="3.远程仓库"></a>3.远程仓库</h2><p>准备工作，注册<code>Github</code>，关联<code>Git</code>和<code>Github</code>：</p><ul><li>运行如下命令，按几次<code>Enter</code>结束运行，会自动的在用户目录<code>C:\Users\WXZ\</code>生成一个“.ssh”的目录，里面会保存有两个文件：私钥（<code>id_rsa</code>）、公钥（<code>id_rsa.pub</code>）</li></ul><pre class=" language-YAML"><code class="language-YAML">ssh-keygen -t rsa -C "your email"//Github邮箱</code></pre><ul><li>打开<code>Github</code>主页，点击右上角头像，选择<code>settings</code>，将公钥内容复制到<code>SSH</code>，名称随意设置，如下图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/3.z8izwrj15w0.png" alt="3"></p><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>现在的场景是，你已经在本地创建了一个<code>Git</code>仓库，又想在<code>Github</code>创建一个<code>Git</code>仓库，并且让这两个仓库进行远程同步，这样，<code>Github</code>上的仓库既可以作为备份，又可以让其他人通过该仓库协作，真是一举多得。</p><p>在Github上创建一个空仓库，根据它的提示在本地仓库运行如下命令。</p><pre class=" language-YAML"><code class="language-YAML">git remote add origin <远程库地址>//关联本地仓库到远程库地址git push -u origin master//把本地库所有内容推送到远程库上</code></pre><p>远程库的名字是<code>origin</code>，<code>Git</code>默认叫法，可以改成其他名字。</p><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。由于远程库是空的，我们第一次推送<code>master</code>分支是，加上了<code>-u</code>参数，<code>Git</code>不但会把本地的<code>master</code>分支内容推送到远程新的<code>master</code>分支，还会把本地<code>master</code>和远程<code>master</code>分支关联起来，之后的推送或者拉取是就可以简化命令。</p><p>推送成功之后，<code>Github</code>页面看到远程库的内容和本地一模一样。之后本地提交可以通过命令：</p><pre class=" language-YAML"><code class="language-YAML">git push origin master//把本地master分支的最新修改推送至Github</code></pre><p><strong>注意</strong>：第一次使用<code>Git</code>的<code>clone</code>或者<code>push</code>命令连接<code>Github</code>时，会得到一个<code>SSH</code>警告，输入<code>yes</code>回车即可。</p><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><p>如果添加远程仓库写错了，或者就是想要删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议用<code>git remote -v</code>查看远程库信息，然后根据名字删除。</p><pre class=" language-YAML"><code class="language-YAML">git remote -v//查看远程库信息git remote rm origin//删除远程仓库，其实解除本地和远程的绑定关系</code></pre><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到<code>GitHub</code>，在后台页面找到删除按钮再删除。</p><p>从远程库克隆</p><p>之前是先有本地库，后有远程库的时候，如何关联远程库。现在，假设我们从零开发，那么最好的方式是先创建远程库，然后从远程库克隆。</p><ul><li><p>首先，登录<code>Github</code>，创建一个新的仓库，勾选自动创建<code>README.md</code>文件</p></li><li><p>然后，使用<code>git clone</code>克隆本地库</p></li></ul><p>如果有多人协作开发，那么每个人各自从远程克隆一份就可以了。你可能注意到，<code>Github</code>给出的克隆地址不止一个，实际上<code>Git</code>支持多种协议，<code>git://</code>使用<code>ssh</code>，<code>https://</code>使用<code>https</code>等其他协议，使用https协议除了速度慢以外，还有个最大的麻烦就是每次推送都必须输入口令。但在某些只开放<code>http</code>端口的公式内部就无法使用<code>ssh</code>协议二只能用<code>https</code>。</p><h2 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4.分支管理"></a>4.分支管理</h2><p><strong>分支就是科幻电影里的平行宇宙</strong>，当你正在电脑前努力学习<code>Git</code>的时候，另一个你正在另一个平行宇宙里努力学习<code>SVN</code>。如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了<code>Git</code>又学会了<code>SVN</code>！</p><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了<code>50%</code>的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你<strong>创建了一个属于你自己的分支</strong>，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，<strong>再一次性合并到原来的分支上</strong>，这样，<strong>既安全，又不影响别人工作</strong>。</p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>首先，<strong>创建dev分支</strong>，然后<strong>切换到dev分支</strong>：</p><pre class=" language-YAML"><code class="language-YAML">git checkout -b dev//创建并切换到dev分支</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于一下两条命令</p><pre class=" language-YAML"><code class="language-YAML">git branch dev//创建dev分支git checkout dev//切换到dev分支</code></pre><p>然后，用<code>git branch</code>命令查看当前分支，该命令会列出所有分支，当前分支前面会标有一个*号。</p><pre class=" language-YAML"><code class="language-YAML">git branch//查看所有分支，当前分支标有*号</code></pre><p>然后，我们可以在<code>dev</code>分支上正常提交，完成<code>dev</code>分支工作后，我们可以切换回<code>master</code>分支</p><pre class=" language-YAML"><code class="language-YAML">git add readme.txt//dev分支正常提交git commit -m "branch test"git checkout master//切换回master分支</code></pre><p>切换回<code>master</code>分支后，刚才的<code>readme.txt</code>文件修改不见了！因为刚才的提交在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点没有变。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/4.ft1f3ath734.png" alt="4"></p><p>现在，我们<strong>把dev分支的工作成果合并到master分支上</strong>：</p><pre class=" language-YAML"><code class="language-YAML">git merge dev//dev分支合并到master上</code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到和<code>dev</code>分支最新提交是完全一样的。</p><p>注意到上面命令会提示<code>Fast-forward</code>信息，<code>Git</code>告诉我们，<strong>这次合并是“快进模式”</strong>，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p><p><strong>合并完成后，我们就可以放心的删除dev分支了</strong>，删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了。</p><pre class=" language-YAML"><code class="language-YAML">git branch -d dev//删除dev分支git branch//查看分支</code></pre><p>因为创建、合并、删除分支非常快，所以<code>Git</code>鼓励你使用分支完成某个任务，合并后再删除掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更加安全。</p><p><strong>切换分支的优雅方式</strong>：<code>switch</code></p><p>切换分支使用<code>git checkout &lt;branch&gt;</code>，前面的撤销修改则是<code>git checkout --&lt;file&gt;</code>，同一个命令，有两种作用，确实有点让人迷惑。</p><p>实际上，切换分支这个动作，用switch更科学，因此最新版本的Git提供了git switch命令来切换分支：</p><pre class=" language-YAML"><code class="language-YAML">git switch -c dev//创建并切换分支git switch master//直接切换到已有分支</code></pre><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>人生不如意十之八九，合并分支往往也不是一帆风顺的。</p><p>创建新分支<code>feature1</code>并开发提交，然后切换到<code>master</code>分支开发并提交。这时候<code>master</code>分支和<code>feature1</code>分支都有了新的提交，<code>Git</code>无法进行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。</p><pre class=" language-YAML"><code class="language-YAML">git switch -c feature1//创建并切换分支git add readme.txt//feature1分支开发提交git commit -m "feature1分支开发"    git switch master//切换到master分支git add readme.txt//master分支开发提交git commit -m "master分支开发"    git merge feature1//在master分支上合并feature1分支</code></pre><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/5.5hg17zkrljw0.png" alt="5"></p><p>执行<code>git merge</code>果然发生了冲突，需要手动解决冲突后再提交。通过<code>git status</code>查看冲突文件。<code>Git</code>用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记不同分支的内容，将在<code>master</code>分支将冲突文件做修改后再次提交，之后再合并。</p><pre class=" language-yaml"><code class="language-yaml">git add readme.txt//master分支冲突修改提交git commit <span class="token punctuation">-</span>m "conflict fixed"git merge feature1//合并分支git branch <span class="token punctuation">-</span>d feature1//删除feature1分支</code></pre><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/6.2xd8r8m10o60.png" alt="6"></p><p>用带参数<code>--graph</code>的<code>git log</code>也可以查看分支合并情况</p><pre class=" language-yaml"><code class="language-yaml">git log <span class="token punctuation">-</span><span class="token punctuation">-</span>graph <span class="token punctuation">-</span><span class="token punctuation">-</span>pretty=oneline <span class="token punctuation">-</span><span class="token punctuation">-</span>abbrev<span class="token punctuation">-</span>commit//查看分支合并情况</code></pre><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>通常，合并分支时，<code>Git</code>会用<code>Fast forward</code>模式，但在这种模式下，删除分之后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在<code>merge</code>时生成一个新的<code>commit</code>，这样，从分支历史上就可以看出分支信息。</p><p>下面实战一下<code>--no-ff</code>方式的<code>git merge</code></p><p>首先，仍然创建并切换<code>dev</code>分支，修改readme.txt文件并提交新的<code>commit</code>，然后切回到<code>master</code>分支。采用<code>--no-ff</code>参数合并分支，表示禁用<code>Fast forward</code>，因此本次合并要创建一个新地<code>commit</code>，所以要加上<code>-m</code>参数，把<code>commit</code>描述写进去。合并后，我们用git log查看分支历史。</p><pre class=" language-yaml"><code class="language-yaml">git switch <span class="token punctuation">-</span>c dev//创建并切换分支git add readme.txt//提交commitgit commit <span class="token punctuation">-</span>m "add merge"git switch mater//切回master分支git merge <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>ff <span class="token punctuation">-</span>m "merge with no<span class="token punctuation">-</span>ff" dev//禁用Fast forward合并分支devgit log <span class="token punctuation">-</span><span class="token punctuation">-</span>graph <span class="token punctuation">-</span><span class="token punctuation">-</span>pretty=oneline <span class="token punctuation">-</span><span class="token punctuation">-</span>abbrev<span class="token punctuation">-</span>commit//查看分支历史</code></pre><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/7.680m0tg8xic0.png" alt="7"></p><p><strong>分支策略</strong></p><p>在实际开发中，我们应该<strong>按照几个基本原则进行分支管理</strong>：</p><ul><li>首先<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</li><li>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如<code>1.0</code>版本法布施，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布<code>1.0</code>版本；</li><li>你和你的小伙伴每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</li></ul><p>所以<strong>团队分支看起来像这样</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/8.5fcbcechijc0.png" alt="8"></p><p><code>Git</code>十分强大，在团队开发中应该充分应用。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>软件开发中，<code>bug</code>就像家常便饭一样，有了<code>bug</code>就需要修复，在<code>Git</code>中，由于分支是如此强大，所以<strong>每个<code>bug</code>都可以通过一个新的临时分支来修复</strong>，修复后，合并分支，然后将临时分支删除。</p><p>当你接到一个代号<code>101</code>的<code>bug</code>任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前你在<code>dev</code>上进行的工作还没有提交，并不是你不想提交，而是工作还未完成，但是<code>bug</code>必须在<code>2h</code>内修复，怎么办？</p><p>幸好，<code>Git</code>还提供了一个<code>stash</code>功能，可以<strong>把当前工作现场储藏起来</strong>，等以后恢复现场后继续工作。</p><pre class=" language-YAML"><code class="language-YAML">git stash//把当前工作现场存储起来git status//此时工作区就是干净的，可以方向创建分支修复bug</code></pre><p>首先确定在拿个分支上修复<code>bug</code>，假定在<code>master</code>分支上修复，就从<code>master</code>创建临时分支，切换到<code>issue-101</code>修复<code>bug</code>，然后提交，修复完成后切回<code>master</code>分支，完成合并，最后删除<code>issue-101</code>分支。</p><pre class=" language-YAML"><code class="language-YAML">git switch mastergit switch -c issue-101git add readme.txtgit commit -m "fix bug 101"git switch mastergit merge --no-ff -m "merged bug fix 101" issue-101git branch -d issue-101</code></pre><p>修复完<code>bug</code>，现在是时候回到<code>dev</code>分支干活了。工作区是干净的，刚才的工作现场保存到哪里去了？用<code>git stash list</code>命令看看：</p><pre class=" language-YAML"><code class="language-YAML">git switch devgit statusgit stash list</code></pre><p>工作现场还在，<code>Git</code>把<code>stash</code>内容存在某个地方了，但是需要恢复一下，有两个办法：</p><ul><li>一是用<code>git stash apply</code>恢复，但是恢复后，<code>stash</code>内容并不删除，你需要用<code>git stash drop</code>来删除</li><li>二是用<code>git stash pop</code>，恢复的同时把<code>stash</code>内容也删除了。</li></ul><pre class=" language-YAML"><code class="language-YAML">git stash pop//恢复现场，删除stash内容git stash list//再次查看stash内容</code></pre><p>如果有多次<code>stash</code>，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的<code>stash</code>，用命令：</p><pre class=" language-YAML"><code class="language-YAML">git stash listgit stash apply stash@&#123;0&#125;//恢复到指定的stash</code></pre><p>在<code>master</code>分支上修复了<code>bug</code>后，我们要想一想，<code>dev</code>分支时早期从master分支分出来的，所以这个<code>bug</code>其实在当前<code>dev</code>分支上也存在。</p><p>那么怎么在<code>dev</code>分支上修复同样的<code>bug</code>？重复操作一次，提交不就行了？有没有更简单的方法？当然！</p><p><strong>同样的<code>bug</code>，要在dev上修复</strong>，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到<code>dev</code>分支，提交信息在修复<code>bug</code>分支提交时出现。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个<code>master</code>分支<code>merge</code>过来。</p><p>为了方便操作，<code>Git</code>专门提供了一个<code>cherry-pick</code>命令，让我们能<strong>复制一个特定的提交到当前分支</strong>。</p><pre class=" language-YAML"><code class="language-YAML">git branch//查看当前分支git cherry-pick 4c805e2//复制特定提交到当前分支</code></pre><p><code>Git</code>自动给<code>dev</code>分支做了一次提交，注意这次提交的<code>commit</code>是<code>1d4b803</code>，它不同于<code>4c805e2</code>，因为这两个<code>commit</code>只是改动相同，但确实是两个不同的<code>commit</code>，用<code>git cherry-pick</code>，我们就不需要在<code>dev</code>分支上手动再把<code>bug</code>的过程重复一遍。</p><p><strong>有些聪明的同学会想了</strong>，既然可以在<code>master</code>分支上修复<code>bug</code>后，在<code>dev</code>分支上可以“重放”这个修复过程，那么直接在<code>dev</code>分支上修复<code>bug</code>，然后在<code>master</code>分支上“重放”行不行？当然可以，不过你仍然需要<code>git stash</code>命令保存现场，才能从<code>dev</code>分支切换到<code>master</code>分支。</p><h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>软件开发中，总有无穷无尽的新功能不断添加进来。</p><p>添加一个新功能时，<strong>你肯定不希望因为一些实验性质的代码，把主分支搞乱了</strong>，所以，每添加一个新功能，最后新建一个<code>feature</code>分支，在上面开发，完成后，合并，最后，删除该<code>feature</code>分支。</p><p>现在，你终于接到了一个新任务：开发代号为<code>Vulcan</code>的新功能，该功能计划用于下一代星际飞船。开发完毕，切回<code>dev</code>，准备合并。</p><pre class=" language-YAML"><code class="language-YAML">git switch -c feature-vulcan//创建新feature分支git add vulcan.py//开发完毕提交git statusgit commit -m "add feature vulcan"</code></pre><p>一切顺利的话，<code>feature</code>分支和<code>bug</code>分支是类似的，合并，然后删除。但是！！！就在此时，接到上级命令，因为经费不足，新功能必须取消！虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p><pre class=" language-YAML"><code class="language-YAML">git switch devgit branch -d feature-vulcan</code></pre><p>销毁失败，<code>Git</code>友情提示，<code>feature-vulcan</code>分支还没有合并，如果删除，将丢失掉修改，如果强行删除，需要使用大写的<code>-D</code>参数，现在我们强行删除，终于删除成功！</p><pre class=" language-YAML"><code class="language-YAML">git branch -D feature-vulcan//强行删除未合并分支</code></pre><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>当你从远程仓库克隆时，实际上<code>Git</code>自动把本地的<code>master</code>非分之和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。要查看远程仓库的信息，用<code>git remote</code>或者<code>git remote -v</code>显示更详细的信息。</p><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到<code>push</code>的地址。</p><pre class=" language-YAML"><code class="language-YAML">git remote//查看远程库信息git remote -v</code></pre><p><strong>推送分支</strong></p><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，<code>Git</code>就是把该分支推送到远程库对应的远程分支上：</p><pre class=" language-YAML"><code class="language-YAML">git push origin master//推送到远程master分支git push origin dev//推送到远程dev分支</code></pre><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li><code>bug</code>分支只用于在本地修复<code>bug</code>，就没必要推送到远程了，出发老板要看看你每周到底修复了几个<code>bug</code>；</li><li><code>feature</code>分支是否推送到远程，取决于你是否和你的小伙子合作在上面开发。</li></ul><p>总之，就是<code>Git</code>中，分支完全可以在本地自己藏着完，是否推送，视你的心情而定！</p><p><strong>抓取分支</strong></p><p>多人协作，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p><p>现在，模拟一个你的小伙伴，可以在另一个电脑（注意要把<code>SSH Key</code>添加到<code>GitHub</code>）或者同一台电脑的另一个目录下克隆。当你的小伙伴从远程库克隆时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支，不信可以用<code>git branch</code>命令看看。</p><pre class=" language-YAML"><code class="language-YAML">git clone <url>//克隆仓库git branch//查看分支</code></pre><p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支。现在，他就可以在<code>dev</code>上继续修改，然后，时不时地<code>dev</code>分支<code>push</code>到远程。</p><pre class=" language-YAML"><code class="language-YAML">git switch -c dev origin/dev //创建远程origin的dev分支到本地git add env.txtgit commit -m "add env"git push origin dev//dev分支开发推送到远端</code></pre><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件做了修改，并试图推送。结果推送失败，因为你的小伙伴和你试图推送的提交有冲突，解决办法也很简单，<code>Git</code>已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下了，然后，在本地合并，解决冲突，再推送：</p><pre class=" language-YAML"><code class="language-YAML">git add env.txt//你提交修改内容到本地仓库，并试图推送到远端git commit -m "add new env"git push origin dev//出现冲突，需要在本地合并，解决冲突后推送</code></pre><p><code>git pull</code>也失败了，因为没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接。再<code>pull</code>，这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，在<code>push</code>。</p><pre class=" language-YAML"><code class="language-YAML">git branch --set-upstream-to=origin/dev dev//本地dev分支与远程origin/dev分支链接git pull//pull成功，但合并有冲突git add env.txt//解决冲突git commit -m "fix env conflict"//添加到本地版本库git push origin dev//推送到远端</code></pre><p>因此，<strong>多人协作的工作模式通常是这样的</strong>：</p><ul><li>1.首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>2.如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>3.如果合并有冲突，则解决冲突，并在本地提交；</li><li>4.没有冲突或者解决到冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ul><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p>上一节我们看到了，多人在同一个分支协作时，很容易出现冲突。即使没有冲突，后<code>push</code>的同学不得不先<code>pull</code>，在本地合并，然后才能<code>push</code>成功。每次合并再<code>push</code>后，分支变成了很复杂。</p><p>总之，看上去很乱，有些强迫症的同学会问：为什么<code>Git</code>的提交历史不能是一条干净的直线？</p><p>其实是可以做到的！<code>Git</code>有一种成为<code>rebase</code>的操作，有人把它翻译成“变基”。</p><p>我们从实际问题出发，看看怎么把分叉的提交变成了直线。</p><p>在和远程分支同步后，我们对<code>hello.py</code>这个文件做了两次提交。用<code>git log</code>命令查看。</p><pre class=" language-YAML"><code class="language-YAML">git log --graph --pretty=oneline --abbrev-commit</code></pre><p>注意到<code>Git</code>用<code>（HEAD-&gt;master）</code>和<code>（origin/master）</code>标识当前分支的<code>HEAD</code>和远程<code>origin</code>的位置分别是<code>582d922 add author</code>和<code>d1be385 init hello</code>，本地分支比远程分支快两个提交。</p><p>现在我们尝试推送本地分支，失败了，这说明有人先与我们推送了远程分支。按照经验，先<code>pull</code>一下，再用<code>git status</code>查看状态，加上刚才合并的提交，现在我们本地分支比远程分支超前<code>3</code>个提交。用<code>git log</code>查看。</p><pre class=" language-YAML"><code class="language-YAML">git push origin master//推送到远程失败git pull//解决冲突再推送git push origin master//再次推送，查看状态和提交git statusgit log --graph --pretty=oneline --abbrev-commit</code></pre><p>对于强迫症同学来说，<strong>现在事情有点不对头，本地的提交历史分叉了</strong>。如果现在把本地分支<code>push</code>到远程，有没有问题？</p><p>有！</p><p>什么问题？</p><p><strong>不好看！</strong></p><p>有没有解决办法？</p><p>有！</p><p>这个时候，**<code>rebase</code>就派上了用场**。我们输入命令<code>git rebase</code>试试：</p><pre class=" language-YAML"><code class="language-YAML">git rebase</code></pre><p>输出了一大堆操作，到底是啥效果？用<code>git log</code>看看：</p><pre class=" language-YAML"><code class="language-YAML">git log --graph --pretty=oneline --abbrev-commit</code></pre><p><strong>原本分叉的提交现在变成一条直线了</strong>！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p><p><strong>这就是<code>rebase</code>操作的特点</strong>：把分叉的提交历史“整理”成一条直线，看上去更直观。<strong>缺点</strong>是本地的分叉提交已经被修改过了。</p><p><strong>最后，通过<code>push</code>操作把本地分支推送到远程。再用git log看看效果</strong>：远程分支的提交历史也是一条直线。</p><pre class=" language-YAML"><code class="language-YAML">git log --graph --pretty=oneline --abbrev-commit</code></pre><h2 id="5-标签管理"><a href="#5-标签管理" class="headerlink" title="5.标签管理"></a>5.标签管理</h2><p>发布一个版本是，我们通常现在版本库中打一个标签(<code>tag</code>)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p><p><strong><code>Git</code>的标签虽然是版本库的快照，但其实它就是指向某个<code>commit</code>的指针</strong>（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p><p><code>Git</code>有<code>commit</code>，为什么还要引入<code>tag</code>？</p><p>“请把上周一的那个版本打包发布，<code>commit</code>号是<code>6a5819e...</code>”</p><p>“一串乱七八糟的数字不好找！”</p><p>如果换一种方法：</p><p>“请把上周一的那个版本打包发布，版本号是<code>v1.2</code>”</p><p>“好的，按照<code>tag v1.2</code>查找<code>commit</code>就行！”</p><p>所以，<code>tag</code>就是一个让人容易记住的有意义的名字，它跟某个<code>commit</code>绑定在一起。</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p><code>Git</code>打标签非常简单。首先<strong>切换到要打标签的分支上，然后敲命令</strong><code>git tag &lt;name&gt;</code>就可以打一个新标签，<strong>默认标签是打在最新提交的</strong><code>commit</code>上的。</p><pre class=" language-YAML"><code class="language-YAML">git switch dev//切换分支git tag v1.0//给当前分支的最新提交打标签git tag//查看标签</code></pre><p>有时候，如果忘记了打标签，比如<strong>要找到上周一的提交打标签</strong>，怎么办？方法是找到历史提交的<code>commit id</code>，然后打上就可以了。</p><pre class=" language-YAML"><code class="language-YAML">git log --pretty=oneline --abbrev-commit//查看历史提交git tag v0.9 f52c633//给历史提交commit id打标签git tag//查看标签</code></pre><p>注意：标签不是按时间顺序列出，而是按照字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息</p><pre class=" language-YAML"><code class="language-YAML">git show v0.9//查看标签信息，v0.9打在哪个提交上</code></pre><p><strong>还可以创建带有说明的标签</strong>，用<code>-a</code>指定签名，<code>-m</code>指定说明文字</p><pre class=" language-YAML"><code class="language-YAML">git tag -a v0.1 -m "version 0.1 released" 1094adb //创建带签名和说明的标签git show v0.1</code></pre><p><strong>注意</strong>：<strong>标签总是和某个<code>commit</code>挂钩</strong>。如果这个<code>commit</code>既出现在<code>master</code>分支，又出现在<code>dev</code>分支，那么在这两个分支上都可以看到这个标签。</p><h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3><p>如果<strong>标签打错了，也可以删除</strong>。因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p><pre class=" language-YAML"><code class="language-YAML">git tag -d v1.0//删除标签</code></pre><p>如果要<strong>推送某个标签到远程</strong>，使用命令<code>git push origin &lt;tagname&gt;</code>，或者一次性推送全部为推送到远程的本地标签<code>git push origin --tags</code></p><pre class=" language-YAML"><code class="language-YAML">git push origin v1.0//推送标签v1.0到远程git push origin --tags//推送所有未推送到远程的标签</code></pre><p>如果<strong>标签已经推送到远程，要删除远程标签就麻烦一点</strong>，先从本地删除，然后，从远程删除，命令也是<code>push</code>，但格式如下。要看是否真的从远程库删除了标签，可以登录<code>Github</code>查看</p><pre class=" language-yaml"><code class="language-yaml">git tag <span class="token punctuation">-</span>d v0.9//删除本地标签v0.9git push origin <span class="token punctuation">:</span>refs/tags/v0.9 //删除远程标签</code></pre><h2 id="6-使用Github"><a href="#6-使用Github" class="headerlink" title="6.使用Github"></a>6.使用Github</h2><p><code>Github</code>是免费的远程仓库，开源协作社区。通过<code>Github</code>，既可以让别人参与你的开源项目，也可以参与别人的开源项目。</p><p>在<code>GitHub</code>出现以前，开源项目开源容易，但让广大人民群众参与进来比较困难，因为要参与，就要提交代码，而给每个想提交代码的群众都开一个账号那是不现实的，因此，群众也仅限于报个<code>bug</code>，即使能改掉<code>bug</code>，也只能把<code>diff</code>文件用邮件发过去，很不方便。</p><p>但是在<code>GitHub</code>上，利用<code>Git</code>极其强大的克隆和分支功能，广大人民群众真正可以第一次自由参与各种开源项目了。</p><p><strong>如何参与一个开源项目呢？</strong>比如人气极高的<code>bootstrap</code>项目，这是一个非常强大的<code>CSS</code>框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap%EF%BC%8C%E7%82%B9%E2%80%9C%60Fork%60%E2%80%9D%E5%B0%B1%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B4%A6%E5%8F%B7%E4%B8%8B%E5%85%8B%E9%9A%86%E4%BA%86%E4%B8%80%E4%B8%AA%60bootstrap%60%E4%BB%93%E5%BA%93%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E4%BB%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B4%A6%E5%8F%B7%E4%B8%8B%60clone%60">https://github.com/twbs/bootstrap，点“`Fork`”就在自己的账号下克隆了一个`bootstrap`仓库，然后，从自己的账号下`clone`</a></p><pre class=" language-yaml"><code class="language-yaml">git clone git@github.com<span class="token punctuation">:</span>wangxinzhi0/bootstrap.git//从自己仓库克隆</code></pre><p><strong>一定要从自己的账号下<code>clone</code>仓库，这样你才能推送修改。</strong>如果从<code>bootstrap</code>的作者的仓库地址<code>git@github.com:twbs/bootstrap.git</code>克隆，因为没有权限，你将不能推送修改。</p><p><code>Bootstrap</code>的官方仓库<code>twbs/bootstrap</code>、你在<code>GitHub</code>上克隆的仓库<code>my/bootstrap</code>，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/9.3340mvfh33u0.png" alt="9"></p><p><strong>如果你想修复<code>bootstrap</code>的一个<code>bug</code>，或者新增一个功能</strong>，立刻就可以开始干活，干完后，<strong>往自己的仓库推送</strong>。</p><p><strong>如果你希望<code>bootstrap</code>的官方库能接受你的修改</strong>，你就可以在<code>GitHub</code>上发起一个<code>pull request</code>。当然，对方是否接受你的<code>pull request</code>就不一定了。</p><h2 id="7-使用Gitee"><a href="#7-使用Gitee" class="headerlink" title="7.使用Gitee"></a>7.使用Gitee</h2><p>使用<code>GitHub</code>时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况（原因你懂的）。</p><p>如果我们希望体验<code>Git</code>飞一般的速度，可以使用国内的<code>Git</code>托管服务——<a href="https://gitee.com/">Gitee</a>。</p><p>和<code>GitHub</code>相比，<code>Gitee</code>也提供免费的<code>Git</code>仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，<code>Gitee</code>还提供了项目管理、代码托管、文档管理的服务，<code>5</code>人以下小团队免费。</p><p><strong>使用<code>Gitee</code>和使用<code>GitHub</code>类似</strong>，我们在<code>Gitee</code>上注册账号并登录后，需要先上传自己的<code>SSH</code>公钥。选择右上角用户头像<code>-&gt;</code>菜单“修改资料”，然后选择“<code>SSH</code>公钥”，填写一个便于识别的标题，然后把用户主目录下的<code>.ssh/id_rsa.pub</code>文件的内容粘贴进去，点击“确定”即可完成并看到刚才添加的<code>Key</code>。</p><p>如果我们已经有了一个本地的<code>git</code>仓库（例如，一个名为learngit的本地库），如何把它<strong>关联到<code>Gitee</code>的远程库上呢</strong>？</p><p>首先，我们在<code>Gitee</code>上创建一个新的项目，选择右上角用户头像<code>-&gt;</code>菜单“控制面板”，然后点击“创建项目”，项目名称最好与本地库保持一致，然后，我们在本地库上使用命令<code>git remote add</code>把它和<code>Gitee</code>的远程库关联。</p><pre class=" language-yaml"><code class="language-yaml">git remote add origin git@gitee.com<span class="token punctuation">:</span>wangxinzhi0/learngit.git//本地仓库和码云关联</code></pre><p>之后就可以正常使用<code>git push</code>和<code>git pull</code>推送了！</p><p>如果在使用命令<code>git remote add</code>时报错<code>fatal: remote origin already exists</code>，说明本地库已经关联了一个名叫<code>origin</code>的远程库，此时，可以用<code>git remote -v</code>查看远程库信息，删除已有的<code>Github</code>远程库，再关联<code>Gitee</code>的远程库。</p><pre class=" language-YAML"><code class="language-YAML">git remote -v//查看远程库git remote rm origin//删除Github远程库git remote add origin git@gitee.com:wangxinzhi0/learngit.git//本地仓库和码云关联git remote -v</code></pre><p><strong>有的小伙伴又要问了，一个本地库能不能既关联GitHub，又关联Gitee呢？</strong></p><p>答案是肯定的，因为<code>git</code>本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。</p><p>使用多个远程库时，我们要注意，<code>git</code>给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们<strong>需要用不同的名称来标识不同的远程库</strong>。</p><p>仍然以<code>learngit</code>本地库为例，我们先删除已关联的名为<code>origin</code>的远程库：</p><pre class=" language-YAML"><code class="language-YAML">git remote rm origin//删除现有关联库origingit remote add github git@github.com:wangxinzhi0/learngit.git //关联github，注意远程库名字git remote add gitee git@gitee.com:wangxinzhi0/learngit.git //关联gitee，注意远程库名字git remote -v //有两个远程库信息    git push github master//推送到githubgit push gitee master//推送到gitee</code></pre><p>这样，本地库就同时与多个远程库互相同步，<code>Gitee</code>也同样提供了<code>Pull request</code>功能，可以让其他小伙伴参与到开源项目中来</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/Git/10.3izp6r7ob5a0.png" alt="10"></p><h2 id="8-自定义Git"><a href="#8-自定义Git" class="headerlink" title="8.自定义Git"></a>8.自定义Git</h2><p>在安装<code>Git</code>时，我们已经配置了<code>user.name</code>和<code>user.email</code>，实际上，<code>Git</code>还有很多可配置项。</p><p>比如，让<code>Git</code>显示颜色，会让命令输出看起来更醒目。这样，<code>Git</code>会适当显示不同的颜色，比如<code>git status</code>命令，文件名就会标上颜色。</p><pre class=" language-YAML"><code class="language-YAML">git config --global color.ui true //让Git显示颜色git status</code></pre><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>有些时候，你必须把某些文件放到<code>Git</code>工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等等。每次<code>git status</code>都会显示<code>Untracked files...</code>，有些强迫症的同学心里肯定不爽。</p><p>好在<code>Git</code>考虑到了大家的感受，这个问题解决起来也很简单，<strong>在<code>Git</code>工作区的根目录下创建一个特殊的<code>.gitignore</code>文件</strong>，然后把要忽略的文件名填进去，<code>Git</code>就会自动忽略这些文件。</p><p>不需要从头写<code>.gitignore</code>文件，<code>GitHub</code>已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><p><strong>忽略文件的原则是</strong>：</p><ul><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略变异生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没有比较放进版本库，比如Java编译产生的.class文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ul><p>举个例子：</p><p>假设你在<code>Windows</code>下进行<code>Python</code>开发，<code>Windowns</code>会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有<code>Desktop.ini</code>文件，因此你需要忽略<code>Windows</code>自动生成的垃圾文件</p><pre class=" language-java"><code class="language-java"># Windows<span class="token operator">:</span>Thumbs<span class="token punctuation">.</span>dbehthumbs<span class="token punctuation">.</span>dbDesktop<span class="token punctuation">.</span>ini</code></pre><p>然后，继续忽略<code>Python</code>编译产生的<code>.pyc</code>、<code>.pyo</code>、<code>dist</code>等文件或目录：</p><pre class=" language-java"><code class="language-java"># Python<span class="token operator">:</span><span class="token operator">*</span><span class="token punctuation">.</span>py<span class="token punctuation">[</span>cod<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">.</span>so<span class="token operator">*</span><span class="token punctuation">.</span>egg<span class="token operator">*</span><span class="token punctuation">.</span>egg<span class="token operator">-</span>infodistbuild</code></pre><p>加上你自己定义的文件，最终得到一个完整的<code>.gitignore</code>文件，内容如下</p><pre class=" language-java"><code class="language-java"># Windows<span class="token operator">:</span>Thumbs<span class="token punctuation">.</span>dbehthumbs<span class="token punctuation">.</span>dbDesktop<span class="token punctuation">.</span>ini# Python<span class="token operator">:</span><span class="token operator">*</span><span class="token punctuation">.</span>py<span class="token punctuation">[</span>cod<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">.</span>so<span class="token operator">*</span><span class="token punctuation">.</span>egg<span class="token operator">*</span><span class="token punctuation">.</span>egg<span class="token operator">-</span>infodistbuild# My configurations<span class="token operator">:</span>db<span class="token punctuation">.</span>inideploy_key_rsa</code></pre><p>最后一步就是把<code>.gitignore</code>也提交到Git，就完成了！**当然检验<code>.gitignore</code>的标准是<code>git status</code>命令是不是说<code>working directory clean</code>**。</p><p><strong>使用Windows的童鞋注意了，如果你在资源管理器里新建一个<code>.gitignore</code>文件，它会非常弱智地提示你必须输入文件名</strong>，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为<code>.gitignore</code>了。</p><p>有些时候，<strong>你想添加一个文件到<code>Git</code>，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了</strong>，如果你确实想添加该文件，可以用<code>-f</code>强制添加到<code>Git</code></p><pre class=" language-YAML"><code class="language-YAML">git add -f App.class//强制添加忽略文件到Git</code></pre><p>或者你发现，<strong>可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了</strong>，可以用<code>git check-ignore</code>命令检查，Git会告诉我们，<code>.gitignore</code>的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p><pre class=" language-YAML"><code class="language-YAML">git check-ignore -v App.class//找出App.class的忽略规则</code></pre><p>还有些时候，当我们编写了规则排除了部分文件时，发现<code>.*</code>这个规则把<code>.gitignore</code>也排除了，并且<code>App.class</code>需要被添加到版本库，但是被<code>*.class</code>规则排除了。</p><pre class=" language-YAML"><code class="language-YAML"># 排除所有.开头的隐藏文件:.*# 排除所有.class文件:*.class</code></pre><p>虽然可以用<code>git add -f</code>强制添加进去，但有强迫症的童鞋还是希望不要破坏<code>.gitignore</code>规则，这个时候，可以添加两条例外规则。<strong>把指定文件排除在<code>.gitignore</code>规则外的写法就是<code>!</code>+文件名</strong>，所以，只需把例外文件添加进去即可。</p><pre class=" language-YAML"><code class="language-YAML"># 排除所有.开头的隐藏文件:.*# 排除所有.class文件:*.class# 不排除.gitignore和App.class:!.gitignore!App.class</code></pre><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>有没有经常敲错命令？比如<code>git status</code>？<code>status</code>这个单词真心不好记。</p><p>如果敲<code>git st</code>就表示<code>git status</code>那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p><p>我们只需要敲一行命令，告诉<code>Git</code>，以后<code>st</code>就表示<code>status</code></p><pre class=" language-YAML"><code class="language-YAML">git config --global alias.st status//设置status别名为stgit st</code></pre><p>当然还有别的命令也可以简写，很多人用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code></p><pre class=" language-YAML"><code class="language-YAML">git config --global alias.co checkoutgit config --global alias.ci commitgit config --global alias.br branch</code></pre><p>以后提交就可以简写成</p><pre class=" language-YAML"><code class="language-YAML">git ci -m "bala bala..."</code></pre><p><strong><code>--global</code>参数是全局参数</strong>，也就是这些命令在这台电脑的所有<code>Git</code>仓库下都有用。</p><p>在<strong>撤销修改</strong>一节中，我们知道，命令<code>git reset HEAD file</code>可以把<strong>暂存区的修改撤销掉</strong>（<code>unstage</code>），重新放回工作区。既然是一个<code>unstage</code>操作，就可以配置一个<code>unstage</code>别名</p><pre class=" language-YAML"><code class="language-YAML">git config --global alias.unstage 'reset HEAD'git unstage test.py//实际执行git reset HEAD test.py</code></pre><p><strong>配置一个<code>git last</code>，让其显示最后一次提交信息</strong></p><pre class=" language-YAML"><code class="language-YAML">git config --global alias.last 'log -1'git last//显示最后一次提交信息</code></pre><p>甚至还有人丧心病狂地把<code>lg</code>配置成了</p><pre class=" language-YAML"><code class="language-YAML">git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"</code></pre><p>在<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536">撤销修改</a>一节中，我们知道，命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：</p><pre class=" language-YAML"><code class="language-YAML">$ git config --global alias.unstage 'reset HEAD'</code></pre><p>当你敲入命令：</p><pre class=" language-YAML"><code class="language-YAML">$ git unstage test.py</code></pre><p>实际上Git执行的是：</p><pre class=" language-YAML"><code class="language-YAML">$ git reset HEAD test.py</code></pre><p>配置一个<code>git last</code>，让其显示最后一次提交信息：</p><pre class=" language-YAML"><code class="language-YAML">$ git config --global alias.last 'log -1'</code></pre><p>这样，用<code>git last</code>就能显示最近一次的提交：</p><pre class=" language-YAML"><code class="language-YAML">$ git lastcommit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2Merge: bd6ae48 291bea8Author: Michael Liao <askxuefeng@gmail.com>Date:   Thu Aug 22 22:49:22 2013 +0800    merge & fix hello.py</code></pre><p>甚至还有人丧心病狂地把<code>lg</code>配置成了：</p><pre class=" language-YAML"><code class="language-YAML">git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"</code></pre><p>来看看<code>git lg</code>的效果：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919059728302912/0" alt="git-lg"></p><p>为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><pre class=" language-YAML"><code class="language-YAML">$ cat .git/config [core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true    precomposeunicode = true[remote "origin"]    url = git@github.com:michaelliao/learngit.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]    remote = origin    merge = refs/heads/master[alias]    last = log -1</code></pre><p><strong>每个仓库别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可</strong>。</p><p><strong>而当前用户的<code>Git</code>配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中</strong></p><p>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p><pre class=" language-YAML"><code class="language-YAML">$ cat .gitconfig[alias]    co = checkout    ci = commit    br = branch    st = status[user]    name = Your Name    email = your@email.com</code></pre><h3 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h3><p>在<strong>远程仓库</strong>一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了<code>7x24</code>小时开机并交换大家的修改。</p><p><code>GitHub</code>就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给<code>GitHub</code>交保护费，那就只能自己搭建一台<code>Git</code>服务器作为私有仓库使用。</p><p>搭建<code>Git</code>服务器需要准备一台运行<code>Linux</code>的机器，强烈推荐用<code>Ubuntu</code>或<code>Debian</code>，这样，通过几条简单的<code>apt</code>命令就可以完成安装。</p><p>假设你已经有<code>sudo</code>权限的用户账号，下面，<strong>正式开始安装</strong>。</p><p>第一步，安装<code>git</code>：</p><pre class=" language-YAML"><code class="language-YAML">$ sudo apt-get install git</code></pre><p>第二步，创建一个<code>git</code>用户，用来运行<code>git</code>服务：</p><pre class=" language-YAML"><code class="language-YAML">$ sudo adduser git</code></pre><p>第三步，创建证书登录：</p><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><p>第四步，初始化Git仓库：</p><p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p><pre class=" language-YAML"><code class="language-YAML">$ sudo git init --bare sample.git</code></pre><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p><pre class=" language-YAML"><code class="language-YAML">$ sudo chown -R git:git sample.git</code></pre><p>第五步，禁用shell登录：</p><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p><pre class=" language-YAML"><code class="language-YAML">git:x:1001:1001:,,,:/home/git:/bin/bash</code></pre><p>改为：</p><pre class=" language-YAML"><code class="language-YAML">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></pre><p>这样，<code>git</code>用户可以正常通过ssh使用git，但无法登录shell，因为我们为<code>git</code>用户指定的<code>git-shell</code>每次一登录就自动退出。</p><p>第六步，克隆远程仓库：</p><p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p><pre><code>$ git clone git@server:/srv/sample.gitCloning into &#39;sample&#39;...warning: You appear to have cloned an empty repository.</code></pre><p>剩下的推送就简单了。</p><p><strong>管理公钥</strong></p><p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<a href="https://github.com/res0nat0r/gitosis">Gitosis</a>来管理公钥。</p><p>这里我们不介绍怎么玩<a href="https://github.com/res0nat0r/gitosis">Gitosis</a>了，几百号人的团队基本都在500强了，相信找个高水平的<code>Linux</code>管理员问题不大。</p><p><strong>管理权限</strong></p><p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<a href="https://github.com/sitaramc/gitolite">Gitolite</a>就是这个工具。</p><p>这里我们也不介绍<a href="https://github.com/sitaramc/gitolite">Gitolite</a>了，不要把有限的生命浪费到权限斗争中。</p><h2 id="9-使用Source-Tree"><a href="#9-使用Source-Tree" class="headerlink" title="9.使用Source Tree"></a>9.使用Source Tree</h2><p>当我们对Git的提交、分支已经非常熟悉，可以熟练使用命令操作Git后，再使用GUI工具，就可以更高效。</p><p>Git有很多图形界面工具，这里我们推荐<a href="https://www.sourcetreeapp.com/">SourceTree</a>，它是由<a href="https://www.atlassian.com/">Atlassian</a>开发的免费Git图形界面工具，可以操作任何Git库。</p><p>首先从<a href="https://www.sourcetreeapp.com/">官网</a>下载SourceTree并安装，然后直接运行SourceTree。</p><p>第一次运行SourceTree时，SourceTree并不知道我们的Git库在哪。如果本地已经有了Git库，直接从资源管理器把文件夹拖拽到SourceTree上，就添加了一个本地Git库。</p><p>也可以选择“New”-“Clone from URL”直接从远程克隆到本地。</p><p><strong>提交</strong></p><p>我们双击<code>learngit</code>这个本地库，SourceTree会打开另一个窗口，展示这个Git库的当前所有分支以及文件状态。选择左侧面板的“WORKSPACE”-“File status”，右侧会列出当前已修改的文件（Unstaged files）</p><p>选中某个文件，该文件就自动添加到“Staged files”，实际上是执行了<code>git add README.md</code>命令</p><p>然后，我们在下方输入Commit描述，点击“Commit”，就完成了一个本地提交</p><p>实际上是执行了<code>git commit -m &quot;update README.md&quot;</code>命令。</p><p><strong>分支</strong></p><p>在左侧面板的“BRANCHES”下，列出了当前本地库的所有分支。当前分支会加粗并用○标记。要切换分支，我们只需要选择该分支，例如<code>master</code>，然后点击右键，在弹出菜单中选择“Checkout master”，实际上是执行命令<code>git checkout master</code>：</p><p>要合并分支，同样选择待合并分支，例如<code>dev</code>，然后点击右键，在弹出菜单中选择“Merge dev into master”，实际上是执行命令<code>git merge dev</code></p><p><strong>推送</strong></p><p>在SourceTree的工具栏上，分别有<code>Pull</code>和<code>Push</code>，分别对应命令<code>git pull</code>和<code>git push</code>，只需注意本地和远程分支的名称要对应起来，使用时十分简单。</p><p>注意到使用SourceTree时，我们只是省下了敲命令的麻烦，SourceTree本身还是通过Git命令来执行任何操作。如果操作失败，SourceTree会自动显示执行的Git命令以及错误信息，我们可以通过Git返回的错误信息知道出错的原因。</p><h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10.总结"></a>10.总结</h2><p>Git虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用Git了。<a href="https://git-scm.com/book/zh/v2">Git中文手册</a></p><p><a href="https://liaoxuefeng.gitee.io/resource.liaoxuefeng.com/git/git-cheat-sheet.pdf">Git命令表</a>：</p><table><thead><tr><th>GIT BASICS</th><th>GIT基础命令</th></tr></thead><tbody><tr><td>git init <code>&lt;directory&gt; </code></td><td>在指定目录下创建一个空的git repo，不带参数在当前目录下创建一个git repo</td></tr><tr><td>git clone <code>&lt;repo&gt;</code></td><td>克隆一个指定的repo到本地。指定的repo可以是本地文件系统或者由HTTP或SSH指定的远程路径</td></tr><tr><td>git config user.name <code>&lt;name&gt;</code></td><td>针对当前repo配置用户名。使用–global参数将配置全局用户名</td></tr><tr><td>git add <code>&lt;directory&gt;</code></td><td>将指定目录的所有修改加入到暂存区。把<code>&lt;directory&gt;</code>替换成<code>&lt;file&gt;</code>将添加指定文件的修改到暂存区</td></tr><tr><td>git commit -m “<code>&lt;message&gt;</code>“</td><td>提交暂存区的修改，使用指定的<code>&lt;message&gt;</code>最为提交信息</td></tr><tr><td>git status</td><td>显示哪些文件已被staged、未被staged以及未跟踪(untracked)</td></tr><tr><td>git log</td><td>以缺省格式显示全部的commit历史</td></tr><tr><td><strong>GIT DIFF</strong></td><td><strong>GIT差异比较命令</strong></td></tr><tr><td>git diff</td><td>比较工作区和暂存区的修改</td></tr><tr><td>git diff HEAD</td><td>比较工作区和上一次commit后的修改</td></tr><tr><td>git diff –cached</td><td>比较暂存区和上一次commit后的修改</td></tr><tr><td><strong>UNDOING CHANGES</strong></td><td><strong>撤销修改命令</strong></td></tr><tr><td>git revert <code>&lt;commit&gt;</code></td><td>对指定<code>&lt;commit&gt;</code>创建一个undo的<code>&lt;commit&gt;</code>，并应用到当前分支</td></tr><tr><td>git reset <code>&lt;file&gt;</code></td><td>将<code>&lt;file&gt;</code>从暂存区移除，但保持工作区不变。此操作不会修改工作区的任何文件</td></tr><tr><td><strong>REWRITING GIT HISTORY</strong></td><td><strong>重写GIT提交命令</strong></td></tr><tr><td>git commit -m <code>&lt;message&gt;</code> –amend</td><td>将当前staged修改合并到最近一次的commit中</td></tr><tr><td>git rebase <code>&lt;base&gt;</code></td><td>基于<code>&lt;base&gt;</code>对当前分支进行rebase。<code>&lt;base&gt;</code>可以是commit、分支名称、tag或相对于HEAD的commit</td></tr><tr><td>git reflog</td><td>显示本地repo的所有commit日志</td></tr><tr><td><strong>GIT BRANCHES</strong></td><td><strong>GIT分支命令</strong></td></tr><tr><td>git branch</td><td>显示本地repo的所有分支</td></tr><tr><td>git switch -c <code>&lt;branch&gt;</code></td><td>创建并切换到一个新的分支<code>&lt;branch&gt;</code>，去掉-c参数将切换到一个已有分支<code>&lt;branch&gt;</code></td></tr><tr><td>REMOTE REPOSITORIES</td><td><strong>远程库操作命令</strong></td></tr><tr><td>git remote add <code>&lt;name&gt;</code> <code>&lt;url&gt;</code></td><td>添加一个新的远程连接。添加后可使用<code>&lt;name&gt;</code>作为指定<code>&lt;url&gt;</code>远程连接的名称</td></tr><tr><td>git fetch <code>&lt;remote&gt;</code> <code>&lt;branch&gt;</code></td><td>从指定<code>&lt;remote&gt;</code>抓取指定<code>&lt;branch&gt;</code>的所有commit到本地repo。去掉<code>&lt;branch&gt;</code>将抓取远程所有分支的修改。</td></tr><tr><td>git pull <code>&lt;remote&gt;</code></td><td>从指定<code>&lt;remote&gt;</code>抓取所有分支的commit并立即合并到本地repo</td></tr><tr><td>git push <code>&lt;remote&gt;</code> <code>&lt;branch&gt;</code></td><td>将本地指定<code>&lt;branch&gt;</code>推送到指定远程<code>&lt;remote&gt;</code>。如果远程没有对应的分支，将自动在远程创建此分支。</td></tr><tr><td><strong>GIT CONFIG</strong></td><td><strong>GIT配置命令</strong></td></tr><tr><td>git config –global user.name <code>&lt;name&gt;</code></td><td>配置当前用户名，使用–global参数将针对当前系统登录用户生效</td></tr><tr><td>git config –global user.name <code>&lt;email&gt;</code></td><td>配置当前用户Email</td></tr><tr><td>git config –global alias.<code>&lt;alias-name&gt;</code> <code>&lt;git-command&gt;</code></td><td>配置一个git命令的快捷方式。例如：配 置<code>alias.glog log --graph --oneline</code>使<code>git glog</code>相当于<code>git log --graph --oneline</code></td></tr><tr><td>git config –system core.editor <code>&lt;editor&gt;</code></td><td>配置文本编辑器，例如vi，在必要时自动打开此文本编辑器</td></tr><tr><td>git config –global –edit</td><td>打开当前用户的git全局配置并编辑</td></tr><tr><td><strong>GIT LOG</strong></td><td><strong>GIT日志命令</strong></td></tr><tr><td>git log <code>-&lt;limit&gt;</code></td><td>限制log的显示数量。例如：git log -5仅显示最新5条commit</td></tr><tr><td>git log –oneline</td><td>每行显示一条commit</td></tr><tr><td>git log –author=”<code>&lt;pattern&gt;</code>“</td><td>按提交者名字搜索并显示commit</td></tr><tr><td>git log –grep=”<code>&lt;pattern&gt;</code>“</td><td>按指定内容搜索并显示commit</td></tr><tr><td>git log <code>&lt;since&gt;</code>..<code>&lt;until&gt;</code></td><td>显示指定范围的commit。范围参数可以是commit ID、分支名称、HEAD或任意相对位置</td></tr><tr><td>git log –<code>&lt;file&gt;</code></td><td>仅显示包含指定文件修改的commit</td></tr><tr><td>git log –graph</td><td>使用–graph参数显示图形化的branch信息</td></tr><tr><td><strong>GIT RESET</strong></td><td><strong>版本回退命令</strong></td></tr><tr><td>git reset</td><td>移除所有暂存区的修改，但不会修改工作区</td></tr><tr><td>git reset <strong>–hard</strong></td><td>移除所有暂存区的修改，并强制删除所有工作区的修改</td></tr><tr><td>git reset <code>&lt;commit&gt;</code></td><td>将当前分支回滚到指定<code>&lt;commit&gt;</code>，清除暂存区的修改，但保持工作区状态不变</td></tr><tr><td>git reset –hard <code>&lt;commit&gt;</code></td><td>将当前分支回滚到指定<code>&lt;commit&gt;</code>，清除暂存区的修改，并强制删除所有工作区的修改</td></tr><tr><td><strong>GIT REBASE</strong></td><td><strong>GIT变基命令</strong></td></tr><tr><td>git rebase -i <code>&lt;base&gt;</code></td><td>以交互模式对当前分支做rebase</td></tr><tr><td><strong>GIT PULL</strong></td><td><strong>抓取远程分支命令</strong></td></tr><tr><td>git pull –rebase <code>&lt;rebase&gt;</code></td><td>抓取所有远程分支，并以rebase模式并入本地repo而不是merge</td></tr><tr><td><strong>GIT PUSH</strong></td><td><strong>推送到远程命令</strong></td></tr><tr><td>git push <code>&lt;remote&gt;</code> <strong>–force</strong></td><td>将本地分支推送到远程。不要使用–force参数，除非你完全明白此操作的后果</td></tr><tr><td>git push <code>&lt;remote&gt;</code> –tags</td><td>使用push命令并不会自动将本地tag推送到远程。加上–tags参数将会将所有本地tag推送到远程。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 代码管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode高频考题刷题笔记-简单</title>
      <link href="/posts/45852.html"/>
      <url>/posts/45852.html</url>
      
        <content type="html"><![CDATA[<ul><li>参考网站<a href="https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/">力扣加加</a></li></ul><h1 id="高频简单题"><a href="#高频简单题" class="headerlink" title="高频简单题"></a>高频简单题</h1><h2 id="面试题-BiNode"><a href="#面试题-BiNode" class="headerlink" title="面试题 BiNode"></a>面试题 BiNode</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/binode-lcci/">https://leetcode-cn.com/problems/binode-lcci/</a></p><p><strong>方法一</strong>：递归+中序遍历</p><p>要求是原值修改，即要<strong>利用这些已经存在的节点空间</strong>，<strong>修改</strong>这些节点的<strong>指向</strong>来得到单向链表。</p><p>要求单向链表依然符合二叉搜索树的性质，说是单向链表，其实还是一颗特殊的二叉搜索树</p><p>众所周知，对二叉搜索树中序遍历就能能打一个升序序列，那么在遍历中，<strong>修改每一个根节点的左右指向</strong>，就实现了原址修改</p><p>图解如下。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/BiNode.6orep96zo0g0.png" alt="BiNode"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    TreeNode  head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为了记录单链表头节点</span>    TreeNode pre <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向当前节点的下一个节点</span>    <span class="token keyword">public</span> TreeNode <span class="token function">convertBiNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中序遍历，左父右</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改指向</span>        pre <span class="token operator">=</span> root<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n为二叉搜索树中节点的个数，中序遍历所有节点仅访问一次。</li><li>空间复杂度：O(n)，递归使用辅助栈空间O(n)</li></ul><p><strong>方法二</strong>：非递归+中序遍历</p><p>中序遍历时用栈保存每一个父节点，弹栈时修改节点指向。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">convertBiNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TreeNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 单链表的头指针哨兵</span>        TreeNode prev <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 移动的链表前置指针</span>        <span class="token comment" spellcheck="true">// 开始中序遍历</span>        TreeNode node <span class="token operator">=</span> root<span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// ---链表处理</span>                node<span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前节点左指针置空</span>                prev<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前置指针右指针指向当前节点，作为链表的next指针，链表新增元素</span>                prev <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指针后移</span>                <span class="token comment" spellcheck="true">// ---链表处理</span>                <span class="token comment" spellcheck="true">// 中序遍历进入右子树</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>时间复杂度：O(n)，n为二叉搜索树中节点的个数，中序遍历所有节点仅访问一次。</li><li>空间复杂度：O(n)，递归使用辅助栈空间O(n)</li></ul><h2 id="0001-两数之和"><a href="#0001-两数之和" class="headerlink" title="0001 两数之和"></a>0001 两数之和</h2><p><strong>题目地址：</strong><a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p><p><strong>方法一：暴力枚举</strong></p><ul><li>最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 <code>target - x</code></li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>i<span class="token punctuation">,</span> j<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n^2)，n是数组中元素数量，最坏情况下任意两个数都要被匹配一次</p></li><li><p>空间复杂度：O(1)</p></li></ul><p><strong>方法二：哈希表</strong></p><p>方法一时间复杂度较高时因为寻找<code>target-x</code>的时间复杂度过高。因此需要快速找出数组中是否存在目标元素，如果存在，我们需要找出它的索引。</p><p>使用哈希表，可以降低寻找<code>target-x</code>的时间复杂度为O(N)。</p><p>我们创建一个哈希表，对于每一个<code>x</code>，我们首先查询哈希表中是否存在<code>target-x</code>，然后将<code>x</code>插入到哈希表中，即可保证不会让<code>x</code>和自己匹配。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashtable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n是数组中元素数量，对于每一个元素<code>x</code>，我们可以O(1)地寻找<code>target-x</code>。</li><li>空间复杂度：O(n)，主要为哈希表地开销。</li></ul><h2 id="0007-整数反转"><a href="#0007-整数反转" class="headerlink" title="0007 整数反转"></a>0007 整数反转</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/reverse-integer/">https://leetcode-cn.com/problems/reverse-integer/</a></p><p>方法一：数学</p><p>如何反转一个整数？用栈？或者转为字符串处理？可以但不够好。实际上我们只要能拿到这个整数的<strong>末尾数字</strong>就可以了。然后反向拼接数字，也就能达到了<strong>反转</strong>效果。取模+地板除法即可解决，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0007-1.20s1lx8ekd9c.png" alt="0007-1"></p><p>这么看来，一个循环就搞定了，循环判断条件是<code>x&gt;0</code>。但这样不对，因为忽略了<strong>负数</strong>。循环判断条件应该是<code>while(x!=0)</code>，无论正负数，<code>/10</code>操作最后都会变成<code>0</code>。</p><p>看起来解决了？但是注意，题目规定了只能存储<code>32</code>位有符号整数，范围[-2<sup>31</sup>,2<sup>31</sup>-1]。也就是不能用<code>long</code>存储结果，有些本身合法的数字，反转后就超出范围了。</p><p><strong>如何判断溢出呢？</strong><code>res</code>每次更新后，再<code>/10</code>，如果和更新前<code>res</code>不相等，则说明溢出。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数学</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//翻转结果</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理末尾第n位时，前一次处理结果</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出末尾数，同时更新x</span>            <span class="token keyword">int</span> digit <span class="token operator">=</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//记录更新前res</span>            last <span class="token operator">=</span> res<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新res</span>            res <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果更新后/10和更新前不一致，说明有溢出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token operator">!=</span>res<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log|x|)。翻转的次数即<code>x</code>十进制的位数。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0013-罗马数字转整数"><a href="#0013-罗马数字转整数" class="headerlink" title="0013 罗马数字转整数"></a>0013 罗马数字转整数</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/roman-to-integer/">https://leetcode-cn.com/problems/roman-to-integer/</a></p><p><strong>方法一</strong>：模拟</p><p>按照题目的描述，可以总结如下规则：</p><ul><li>罗马数字由I,V,X,L,C,D,M构成；</li><li>当小值在大值的左边，则减小值，如IV=5-1=4；</li><li>当小值在大值的右边，则加小值，如VI=5+1=6；</li><li>由此可知，总是大值加或减小值得到结果，因此最后必然为正。</li></ul><p>一言蔽之，<strong>把一个小值放在大值的左边，就是做减法，否则为加法</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0013-1.1oqwge8nnhog.png" alt="0013-1"></p><p>在代码实现上，可以<strong>往后多看一位，对比当前位与后一位的大小关系，从而确定是加法还是减法。当没有后一位时，做加法即可</strong>。</p><p>可以用<code>HashMap&lt;Character,Integer&gt;</code>存储单个字符代表的数字，也可以优化为一个<code>switch case</code>函数代替<code>HashMap</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模拟，左边小则做减法，否则做加法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储罗马字符代表的数字</span>        HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'V'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断当前字符对应数字与下一字符对应数字的大小关系，左边小则做减法</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> value<span class="token operator">&lt;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> value<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优化，用switch case函数替代hashmap</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断当前字符对应数字与下一字符对应数字的大小关系，左边小则做减法</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;</span> <span class="token function">getValue</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> value<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取字符对应数字的函数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'I'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'V'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'X'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>为罗马数字的字符数。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0014-最长公共前缀"><a href="#0014-最长公共前缀" class="headerlink" title="0014 最长公共前缀"></a>0014 最长公共前缀</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/longest-common-prefix/">https://leetcode-cn.com/problems/longest-common-prefix/</a></p><p><strong>方法一</strong>：纵向扫描</p><p>纵向扫描时，从前往后遍历所有字符串的第一列，比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0014-1.e7muxa0mae8.png" alt="0014-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//纵向扫描</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token operator">==</span>null <span class="token operator">||</span> strs<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//首个字符串的长度，最多比较len次</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串数组长度，列纵向比较count-1次</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出首个字符串的列字符</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//与后面字符串对应列比较</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果不相等，或当前索引i大于等于字符串的长度，则最长公共前缀匹配到i-1处</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">!=</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//返回最长公共前缀，不包括i处字符</span>                    <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//首个字符串均匹配，返回整个字符串</span>        <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mn)，m是字符串数组中的字符串平均长度，n是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会别比较一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0020-有效括号"><a href="#0020-有效括号" class="headerlink" title="0020 有效括号"></a>0020 有效括号</h2><p><strong>题目地址：</strong><a href="https://leetcode-cn.com/problems/valid-parentheses/description">https://leetcode-cn.com/problems/valid-parentheses/description</a></p><p><strong>方法一：栈+哈希表</strong>（我的方法：栈+switch判断）</p><p>判断括号有效性可以使用栈这一数据结构解决</p><p>遍历字符串s，遇到左括号时入栈，期望后续遍历有相同类型地右括号将其闭合，后遇到地左括号要先闭合，因此放入栈顶</p><p>当遇到右括号，需要相同类型地左括号闭合。取出栈顶左括号并判断是否为相同类型，如果不是相同类型或栈空，字符串s无效，返回false。为了快速判断括号类型，使用哈希表存储每一种括号，右括号为键，左括号为值。</p><p>遍历结束，栈空变送字符串s中所有左括号闭合，返回True，否则返回False。</p><p>有效字符串长度一定为偶数，奇数可以直接返回False，省去遍历过程。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Character<span class="token operator">></span> pairs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Character<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'&amp;#125;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;#123;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>Character<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pairs<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> pairs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n是字符串s的长度。</li><li>空间复杂度：O(n + |Σ|)，其中 Σ 表示字符集，本题中字符串只包含 6 种括号，∣Σ∣=6。栈中的字符数量为 O(n)，而哈希表使用的空间为 O(∣Σ∣)，相加即可得到总空间复杂度。</li></ul><h2 id="0021-合并两个有序链表"><a href="#0021-合并两个有序链表" class="headerlink" title="0021 合并两个有序链表"></a>0021 合并两个有序链表</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists">https://leetcode-cn.com/problems/merge-two-sorted-lists</a></p><p><strong>方法一</strong>：递归</p><p>我们可以如下递归地定义两个链表里地<code>merge</code>操作（忽略边界情况，比如空链表等）：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0026.4xjev55bt2w0.png" alt="0026"></p><p>也就是说，两个链表头部较小地节点与剩下元素地<code>merge</code>操作结果合并。</p><p>我们直接将以上递归过程建模，同时考虑边界情况</p><p>如果<code>l1</code>或<code>l2</code>一开始就是空链表，那么没有任何操作需要合并，所以只需返回非空链表。否则，我们要判断<code>l1</code>和<code>l2</code>哪一个链表地头节点的值更小，然后递归地决定下一个添加到结果里地节点。如果两个链表有一个为空，递归结束。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界条件</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界条件</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归条件</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归条件</span>            l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n+m)，<code>n</code>的和<code>m</code>是两个链表地长度，每次调用递归都会去调用<code>l1</code>或<code>l2</code>的头节点（直到至少有一个链表为空），函数<code>mergeTwoList</code>至多递归调用每个节点一次。</li><li>空间复杂度：O(n+m)，递归调用<code>mergeTwoList</code>函数时需要消耗栈空间，栈空间的大小取决于递归调用的深度。</li></ul><p><strong>方法二</strong>：迭代</p><p>我们可以迭代实现上述算法。当<code>l1</code>和<code>l2</code>都不是空链表时，判断<code>l1</code>和<code>l2</code>哪一个链表的头节点的值更新，将较小值的节点添加到结果里，当一个节点被添加到结果里之后，将对应链表中的节点向后移一位。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0021-1.41ck5lfw6gy.png" alt="0021-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回链表的头节点</span>        ListNode prev <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前一个规整好的节点，迭代维护它的next指针</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改链表指向，迭代l1</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                prev <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改链表指向，迭代l2</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                prev <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//迭代完之后，如果l1或者l2有剩余元素，直接加到prev末尾即可</span>        <span class="token comment" spellcheck="true">// if(l1 == null)&amp;#123;</span>        <span class="token comment" spellcheck="true">//     prev.next = l2;</span>        <span class="token comment" spellcheck="true">// &amp;#125;else&amp;#123;</span>        <span class="token comment" spellcheck="true">//     prev.next = l1;</span>        <span class="token comment" spellcheck="true">// &amp;#125;</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l1 <span class="token operator">==</span> null <span class="token operator">?</span> l2 <span class="token operator">:</span> l1<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n+m)，<code>n</code>的和<code>m</code>是两个链表地长度。</li><li>空间复杂度：O(1)，递归调用<code>mergeTwoList</code>函数时需要消耗栈空间，栈空间的大小取决于递归调用的深度。</li></ul><h2 id="0026-删除排序数组中的重复项"><a href="#0026-删除排序数组中的重复项" class="headerlink" title="0026  删除排序数组中的重复项"></a>0026  删除排序数组中的重复项</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/</a></p><p><strong>方法一</strong>：双指针法</p><p>数组有序，我们可以放置两个指针<code>i</code>和<code>j</code>，其中<code>i</code>是快指针，<code>j</code>是慢指针，迭代数组，当<code>nums[j]&lt;nums[i]</code>，快指针<code>j</code>加一，并将此时<code>nums[i]</code>的值赋给<code>nums[j]</code>，直到快指针到达数组末尾。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组长度为0，单独考虑</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原地保存不重复数组元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//慢指针元素小，找到不重复元素，更新慢指针</span>                nums<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回数组不重复元素长度</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n为数组长度，<code>i</code>和<code>j</code>分别最多遍历n步</li><li>空间复杂度：O(1)</li></ul><h2 id="0028-实现strStr"><a href="#0028-实现strStr" class="headerlink" title="0028 实现strStr()"></a>0028 实现strStr()</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/implement-strstr/">https://leetcode-cn.com/problems/implement-strstr/</a></p><p><strong>方法一</strong>：暴力匹配</p><p>我们可以让字符串<code>needle</code>与字符串<code>haystack</code>的所有长度为<code>m</code>的子串均匹配一次。</p><p>为了减少不必要的匹配，我们每次匹配识别立即停止当前子串的匹配，对下一个子串继续匹配。如果当前子串匹配成功，我们返回当前子串的开始位置即可。如果所有子串都匹配识别，则返回<code>-1</code>。</p><p>进阶：<strong>KMP算法</strong>，<a href="https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">部分匹配值</a>就是”前缀”和”后缀”的最长的共有元素的长度。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0028-1.3pwtahyelcy0.png" alt="0028-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符串暴力匹配</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span>String haystack<span class="token punctuation">,</span> String needle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//needle为""的特例能正确返回下标0，但还是作为特例考虑</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> n<span class="token operator">=</span>haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//与haystack中每一个长度为m的字符串匹配</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">+</span>m<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//标识当前子字符串是否与needle匹配</span>            <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//当前m字符串不匹配，跳出内循环</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果匹配，返回下标i</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//KMP字符串匹配算法，时间复杂度O(m+n)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span>String haystack<span class="token punctuation">,</span> String needle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 构建next数组，部分匹配值表</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串长度为1，部分匹配值就是0。"A"的前缀和后缀都为空集，共有元素的长度为0；</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 匹配不成功的话，需要从next[j-1]获取新的j，直到发现有匹配的才退出</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 匹配成功的话，部分匹配值j++</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新 next[i]</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 匹配过程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 匹配不成功 j = next[j-1]</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 匹配成功的话,j++</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 找到了，此时j++，而i还未i++</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nm)，<code>n,m</code>分别是字符串<code>haystack</code>和<code>needle</code>的长度。最坏情况下与<code>haystack</code>中长度为<code>m</code>的字符串均匹配一次。<code>KMP</code>算法，O(m+n)。</li><li>空间复杂度：O(1)。<code>KMP</code>算法，<code>next</code>数组O(m)。</li></ul><h2 id="0053-最大子序和"><a href="#0053-最大子序和" class="headerlink" title="0053 最大子序和"></a>0053 最大子序和</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/maximum-subarray/">https://leetcode-cn.com/problems/maximum-subarray/</a></p><p><strong>方法一</strong>：动态规划</p><p>假设<code>nums</code>数组长度是<code>n</code>，下标从0到<code>n-1</code>。</p><p>我们用f(i)代表第i个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0053-1.3ithvd7iq0g0.jpg" alt="0053-1"></p><p>因此我们只需要要求每个位置的<code>f(i)</code>，然后返回f数组中的最大值即可。那么如何求f(i)呢？我们可以考虑<code>nums[i]</code>单独成为一段还是加入<code>f(i-1)</code>对应的那一段，这取决于<code>nums[i]</code>和<code>f(i-1)+nums[i]</code>的大小，我们希望获得一个较大的，于是可以写出这样的动态规划转移方程：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0053-2.5qm6m4xgy580.png" alt="0053-2"></p><p>不难给出一个时间复杂度O(n)、空间复杂度O(n)的实现，即用一个f数组来保存<code>f(i)</code>的值，用一个循环求出所有<code>f(i)</code>。考虑到<code>f(i)</code>只和<code>f(i-1)</code>相关，于是我们可以只用一个变量<code>pre</code>来维护对当前<code>f(i)</code>的<code>f(i-1)</code>的值是多少，从而让空间复杂度降低到O(1)，这有点类似「滚动数组」的思想。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxAns <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            maxAns <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxAns<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxAns<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中<code>n</code>为<code>nums</code>数组的长度，我们只需要遍历一次数组即可求得答案。</li><li>空间复杂度：O(1)</li></ul><p><strong>方法二</strong>：分治</p><p><strong>这个分治方法类似于「线段树求解最长公共上升子序列问题」的<code>pushUp</code>操作</strong>。方法二不需要有线段树的基础，感兴趣的课阅读线段树区间合并法解决<strong>多次询问</strong>的「区间最长连续上升序列问题」和「区间最大子段和问题」，还是非常有趣的。</p><p>我们定义一个操作<code>get(a, l, r)</code>表示查询<code>a</code>序列<code>[l, r]</code>区间内的最大字段和，那么我们最终要求的答案就是<code>get(nums, 0, nums.size()-1)</code>。如何分治实现这个操作呢？对于一个区间<code>[l, r]</code>，我们取<code>m = (l+r)/2</code>，对区间<code>[l, m]</code>和<code>[m+1, r]</code>分治求解。当递归逐层深入直到区间长度缩小为1的时候，递归「开始回升」。这个时候我们考虑如何通过<code>[l, m]</code>区间的信息和<code>[m+1, r]</code>区间的信息合并区间<code>[l, r]</code>的信息。最关键的两个问题是：</p><ul><li>我们要维护区间的那些信息？</li><li>我们如何合并这些信息？</li></ul><p>对于一个区间<code>[l, r]</code>，我们可以维护四个变量；</p><ul><li><code>lSum</code>表示<code>[l, r]</code>内以l为左端点的最大子段和</li><li><code>rSum</code>表示<code>[l, r]</code>内以r为右端点的最大子段和</li><li><code>mSum</code>表示<code>[l, r]</code>内的最大子段和</li><li><code>iSum</code>表示<code>[l, r]</code>的区间和</li></ul><p>以下简称<code>[l, m]</code>为 <code>[l, r] </code>的「左子区间」，<code>[m+1, r] </code>为<code>[l, r]</code> 的「右子区间」。我们考虑如何维护这些量呢（如何通过左右子区间的信息合并得到 <code>[l, r] </code>的信息）？对于长度为 1 的区间<code> [i, i]</code>，四个量的值都和 <code>nums[i]</code> 相等。对于长度大于 1 的区间：</p><ul><li>首先最好维护的是<code>iSum</code>，区间<code>[l, r]</code> 的<code> iSum</code> 就等于「左子区间」的 <code>iSum </code>加上「右子区间」的<code>iSum</code>。</li><li>对于<code>[l, r]</code>的<code>lSum</code>，存在两种可能，它要么等于「左子区间」的<code> lSum</code>，要么等于「左子区间」的<code> iSum</code> 加上「右子区间」的<code>lSum</code>，二者取大。</li><li>对于<code>[l, r]</code>的<code> rSum</code>，同理，它要么等于「右子区间」的 <code>rSum</code>，要么等于「右子区间」的<code>iSum</code> 加上「左子区间」的 <code>rSum</code>，二者取大。</li><li>当计算好上面的三个量之后，就很好计算<code>[l, r]</code> 的<code>mSum</code> 了。我们可以考虑<code>[l, r]</code> 的<code>mSum</code> 对应的区间是否跨越 <code>m</code>——它可能不跨越<code> m</code>，也就是说<code>[l, r]</code> 的<code> mSum</code> 可能是「左子区间」的 <code>mSum </code>和 「右子区间」的<code>mSum</code> 中的一个；它也可能跨越 <code>m</code>，可能是「左子区间」的<code>rSum</code> 和 「右子区间」的<code> lSum</code> 求和。三者取大。</li></ul><p>这样问题就得到了解决。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Status</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> lSum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[l, r]内以l为左端点的最大子段和</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> rSum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[l, r]内以r为右端点的最大子段和</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> mSum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[l, r]内的最大子段和</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> iSum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[l, r]区间和</span>                <span class="token keyword">public</span> <span class="token function">Status</span><span class="token punctuation">(</span><span class="token keyword">int</span> lSum<span class="token punctuation">,</span> <span class="token keyword">int</span> rSum<span class="token punctuation">,</span> <span class="token keyword">int</span> mSum<span class="token punctuation">,</span> <span class="token keyword">int</span> iSum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lSum <span class="token operator">=</span> lSum<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>rSum <span class="token operator">=</span> rSum<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mSum <span class="token operator">=</span> mSum<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>iSum <span class="token operator">=</span> iSum<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mSum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//分</span>    <span class="token keyword">public</span> Status <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分的终止条件</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右移一位，除以2</span>        Status lSub <span class="token operator">=</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        Status rSub <span class="token operator">=</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">pushUp</span><span class="token punctuation">(</span>lSub<span class="token punctuation">,</span> rSub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//治</span>    <span class="token keyword">public</span> Status <span class="token function">pushUp</span><span class="token punctuation">(</span>Status l<span class="token punctuation">,</span> Status r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> iSum <span class="token operator">=</span> l<span class="token punctuation">.</span>iSum <span class="token operator">+</span> r<span class="token punctuation">.</span>iSum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//区间和</span>        <span class="token keyword">int</span> lSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>lSum<span class="token punctuation">,</span> l<span class="token punctuation">.</span>iSum<span class="token operator">+</span>r<span class="token punctuation">.</span>lSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左区间最大子段和，左区间和加上右区间最左大子段和，两者最值</span>        <span class="token keyword">int</span> rSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>rSum<span class="token punctuation">,</span> r<span class="token punctuation">.</span>iSum <span class="token operator">+</span> l<span class="token punctuation">.</span>rSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右区间最大子段和，右区间和加上左区间最大右子段和，两者最值</span>        <span class="token keyword">int</span> mSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>mSum<span class="token punctuation">,</span> r<span class="token punctuation">.</span>mSum<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>rSum <span class="token operator">+</span> r<span class="token punctuation">.</span>lSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左区间最大子段和，右区间最大子段和，左区间的最大右子段和加上右区间的最大左子段和，三者最值</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span>lSum<span class="token punctuation">,</span> rSum<span class="token punctuation">,</span> mSum<span class="token punctuation">,</span> iSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。假设我们把递归的过程看作是一颗二叉树的先序遍历，这里的总时间相当于遍历这颗二叉树的所有节点，故渐进时间复杂度为 O(n)。</li><li>空间复杂度：O(log n)。递归会使用O(log n)的占空间，故渐进空间复杂度为O(log n)。</li></ul><h2 id="0066-加一"><a href="#0066-加一" class="headerlink" title="0066 加一"></a>0066 加一</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/plus-one">https://leetcode-cn.com/problems/plus-one</a></p><p><strong>方法一</strong>：迭代法</p><p>逆序迭代，需要考虑数字9的进位问题。</p><p>如果找到一位数字小于9，直接加一，返回数组即可。如果当前位置为9，则置为0，继续判断下一位的进位情况，直到迭代结束。</p><p>如果迭代结束仍没有返回数组，说明所有位都是9（即，全部产生进位），返回新建数组。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digits<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> digits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到一位数不为9，加一后返回</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> digits<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前为9，置为0，继续判断下一位</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        digits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环执行结束仍未返回，则全部产生进位，9/99...</span>        digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> digits<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n为数组长度。</li><li>空间复杂度：O(1)，只有在9/99…时才会新建数组。</li></ul><h2 id="0069-x的平方根"><a href="#0069-x的平方根" class="headerlink" title="0069 x的平方根"></a>0069 x的平方根</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/sqrtx/">https://leetcode-cn.com/problems/sqrtx/</a></p><p><strong>方法一</strong>：二分查找</p><p><code>x</code>的平方根的整数部分<strong>是满足k<sup>2</sup>≦x的最大值</strong>，因此我们可以对<code>k</code>进行二分查找，从而得到答案。</p><p>**二分查找的下界是<code>0</code>，上界可以粗略的设定为<code>x</code>**。在二分查找的每一步中，我们只需要比较中间元素<code>mid</code>的平方与<code>x</code>的大小关系，并通过比较的结果调整上下界范围。</p><p>由于我们所有的运算都是整数运算，不会存在误差，因此在得到最终的答案<code>ans</code>后，也就不需要在尝试<code>ans+1</code>了。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二分查找</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//二分查找范围</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//结果的平方&lt;=x，强制转换为long防止int溢出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>mid<span class="token operator">*</span>mid<span class="token operator">&lt;=</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> mid<span class="token punctuation">;</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(logx)，二分查找需要的次数。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0070爬楼梯"><a href="#0070爬楼梯" class="headerlink" title="0070爬楼梯"></a>0070爬楼梯</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/climbing-stairs/">https://leetcode-cn.com/problems/climbing-stairs/</a></p><p><strong>方法一</strong>：动态规划</p><p>本问题其实可以分解成子问题求解，爬到第<code>n</code>阶楼梯的方法数量等于两部分之和</p><ul><li>第一，爬上<code>n-1</code>阶楼梯的方法数量，因为再爬<code>1</code>阶就能到第<code>n</code>阶</li><li>第二，爬上<code>n-2</code>阶楼梯的方法数量，因为再爬2阶就能到第<code>n</code>阶</li></ul><p>所以我们得到公式<code>dp[n]=dp[n-1]+dp[n-2]</code>，初始化条件为<code>dp[0]=1,dp[1]=1</code></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0070-1.2helv5nnzrw0.png" alt="0070-1"></p><p>由于我们计算第i阶楼梯只需要前面两阶楼梯的数量，因此可以只保存两个变量来优化动态规划。</p><p>代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态规划数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始条件</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//dp更新公式</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空间优化</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始条件</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法数量，初始值为1</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用保存变量更新sum</span>            sum <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>复杂度分析</p><ul><li>时间复杂度：O(n)，n为楼梯阶数。</li><li>空间复杂度：O(n)，优化后空间复杂度为O(1)。</li></ul><h2 id="0088-合并两个有序数组"><a href="#0088-合并两个有序数组" class="headerlink" title="0088 合并两个有序数组"></a>0088 合并两个有序数组</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/merge-sorted-array/">https://leetcode-cn.com/problems/merge-sorted-array/</a></p><p><strong>方法一</strong>：直接合并后排序</p><p>最值观的方法时先将数组<code>nums2</code>放进<code>nums1</code>的尾部，然后直接对整个数组进行排序。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nums1<span class="token punctuation">[</span>m<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O((m+n)log(m+n))。排序序列长度m+n，套用快速排序的时间复杂度即可，平均情况为O((m+n)log(m+n))。</li><li>空间复杂度：O(log(m+n))。排序序列长度m+n，套用快速排序的时间复杂度即可，平均情况为O(log(m+n))。</li></ul><p><strong>方法二</strong>：逆向双指针（正向双指针需要新建辅助数组）</p><p>充分利用数组有序，以及<code>nums1</code>后面n个空元素，可以直接覆盖而不影响结果。因此从后向前遍历过程中，每次取两者之中的较大者放进<code>nums1</code>的最后面。</p><p>注意：当<code>nums2</code>中元素先取完时，不用处理，已经有序。当<code>nums1</code>中元素先取完时，需要将<code>nums2</code>中剩余的元素拷贝到<code>nums1</code>的前面。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从后到前索引合并后数组</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从后到前索引nums1</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从后到前索引nums2</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向前移动，从后向前修改nums1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums1<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums1<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一种特殊情况，nums2有剩余元素。nums1有剩余元素，不用处理</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums1<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.arraycopy(nums2, 0, nums1, 0, j + 1);//和Arrays.copyOf()，后者新建数组</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n+m)。指针移动单调递减，最多移动<code>m+n</code>次，因此时间复杂度为O(n+m)。</li><li>空间复杂度：O(1)。直接对数组<code>nums1</code>原地修改，不需要额外空间。</li></ul><h2 id="0101-对称二叉树"><a href="#0101-对称二叉树" class="headerlink" title="0101 对称二叉树"></a>0101 对称二叉树</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/symmetric-tree/">https://leetcode-cn.com/problems/symmetric-tree/</a></p><p><strong>方法一</strong>：递归</p><p>如果一个树的左子树和右子树镜像对称，那么这个树是对称的。因此问题转化为：两个树什么情况下互为镜像？</p><p>如果同时满足下面的条件，两棵树互为镜像：</p><ul><li>它们的两个根节点具有相同的值</li><li>每个树的右子树都与另一个树的左子树镜像对称</li><li>每个树的左子树都与另一个树的右子树镜像对称</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0101-1.6gucs6smilg0.png" alt="0101-1"></p><p>我们可以实现这样一个递归函数，通过「同步移动」两个指针的方法来遍历这棵树，p指针和q指针一开始都指向这棵树的跟，随后p右移时，q左移，p左移时，q右移。每次检查当前p和q节点的值是否相等，如果相等再判断左右子树是否对称。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//递归的终止条件是两个节点都为空</span>        <span class="token comment" spellcheck="true">//或者两个节点中有一个为空</span>        <span class="token comment" spellcheck="true">//或者两个节点的值不相等</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要比较的两个节点都为空</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要比较的两个节点有一个为空</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">!=</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个节点的值不相等</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//再递归比较左节点的左孩子和右节点的右孩子</span>        <span class="token comment" spellcheck="true">//以及左节点的右孩子和右节点的左孩子</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要比较的两个节点都不为空</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。n为树上的节点数，遍历了这棵树。</li><li>空间复杂度：O(n)。递归栈空间，递归层数不超过n，故渐进空间复杂度为O(n)。</li></ul><p><strong>方法二</strong>：迭代</p><p>首先我们引入一个队列，这是把递归程序改成迭代程序的常用方法。</p><p>初始化时我们把根节点入队两次，每次提取出两个节点并比较它们的值（队列中每两个连续的节点应该是相等的，而且它们的子树互为镜像），然后将这两个节点的左右子节点按相反的顺序插入队列中。当队列为空时，或者我们检测到树不对称（即从队列中取出两个不相等的连续节点）时，算法结束。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//LinkedList模拟队列</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//头结点加入两次</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个节点均为空</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">!=</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个节点有一个非空，或两节点均非空且值不等</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将左子树的左节点，右子树的右节点加入队列比较</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将左子树的右节点，右子树的左节点加入队列比较</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。同「方法一」。</li><li>空间复杂度：O(n)。需要一个队列维护节点，每个节点最多进队一次，出队一次，队列中最多不会超过n个点，故渐进空间复杂度为O(n)。</li></ul><h2 id="0104-二叉树的最大深度"><a href="#0104-二叉树的最大深度" class="headerlink" title="0104 二叉树的最大深度"></a>0104 二叉树的最大深度</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/description/">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/description/</a></p><p><strong>方法一</strong>：深度优先搜索</p><p>如果我们知道了左子树和右子树的最大深度<code>l</code>和<code>r</code>，那么该二叉树的最大深度即为<code>max(l, r) + 1</code>。</p><p>而左子树和右子树的最大深度又可以以同样的方式进行计算。因此我们可以用「深度优先搜索」的方法来计算二叉树的最大深度。具体而言，在计算当前二叉树的最大深度时，可以先递归算出其左子树和右子树的最大深度，然后在O(1)时间内计算出当前二叉树的最大深度。递归在访问到空节点时退出。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点为空，返回0</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//否则，比较左右子树的高度，+1后返回</span>            <span class="token keyword">int</span> leftHeight <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次新建变量，不可以用类变量代替</span>            <span class="token keyword">int</span> rightHeight <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftHeight<span class="token punctuation">,</span> rightHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n为二叉树节点的个数，每个节点在递归中只被遍历一次。</li><li>空间复杂度：O(height)，其中height表示二叉树的高度。递归函数需要栈空间，而栈空间取决于递归的深度，因此空间复杂度等价于二叉树的高度。</li></ul><p><strong>方法二</strong>：广度优先搜索</p><p>我们也可以用「广度优先搜索」的方法来解决这道题目，但我们需要对其进行一些修改，此时我们广度优先搜索队列里存放的是「当前层的所有节点」。</p><p>每次拓展下一层时，不同于广度优先索索的每次只从队列里拿出一个节点，我们需要将队列里所有的节点都拿出来进行拓展，这样能保证每次拓展完的时候队列里存放的是当前层的所有节点，即我们是一层一层地进行拓展，最后我们用一个遍历ans来维护拓展次数，该二叉树的最大深度即为ans。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//树深度</span>        <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前层的节点个数</span>        TreeNode ele<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从队列中取出的节点</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取出当前层的所有节点，并把下层的节点放入队列</span>                ele <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n为二叉树的节点个数，每个节点只会被访问一次。</li><li>空间复杂度：O(n)，空间消耗取决于队列存储的元素数量，最快情况下会达到O(n)。</li></ul><h2 id="0108-将有序数组转换为二叉搜索树"><a href="#0108-将有序数组转换为二叉搜索树" class="headerlink" title="0108 将有序数组转换为二叉搜索树"></a>0108 将有序数组转换为二叉搜索树</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/</a></p><p><strong>方法一</strong>：递归</p><p>直观地看，我们可以选择中间数字作为二叉搜索树的根节点，这样分给左右子树的数字个数相同或只相差 1，可以使得树保持平衡。如果数组长度是奇数，则根节点的选择是唯一的，如果数组长度是偶数，则可以选择中间位置左边的数字作为根节点或者选择中间位置右边的数字作为根节点，选择不同的数字作为根节点则创建的平衡二叉搜索树也是不同的。</p><p>确定平衡二叉树的根节点后，其余的数字分别位于平衡二叉搜索树的左子树和右子树中，左子树和右子树分别也是平衡二叉搜索树，因此可以通过递归的方式创建平衡二叉搜索树。</p><p>递归的基准情形时平衡二叉搜索树不包含任何数字，此时平衡二叉搜索树为空。</p><p>在给定中序遍历序列数组的情况下，每一个子树中的数字在数组中一定是连续的，因此可以通过数组下标范围确定子树包含的数字，下标范围记为<code>[l, r]</code>。对于整个中序遍历序列，下标范围从<code>l=0</code>到<code>r=nums.length-1</code>。当<code>l&gt;r</code>时，平衡二叉搜索树为空。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Random random = new Random();</span>    <span class="token keyword">public</span> TreeNode <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//递归</span>    <span class="token keyword">public</span> TreeNode <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.偶数长度时，总是选择左端作为中间</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.偶数长度时，总是选择右端作为中间</span>        <span class="token comment" spellcheck="true">// int m = (l+r+1)/2;</span>        <span class="token comment" spellcheck="true">//3.偶数长度时，随机选择左右端作为中间</span>        <span class="token comment" spellcheck="true">// int m = (l+r+random.nextInt(2))/2;</span>        <span class="token comment" spellcheck="true">//以升序数组的中间元素作为根节点 root</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//递归构建root的左子树和右子树</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n是数组的长度，每个数字只访问一次。</li><li>空间复杂度：O(log n)，空间复杂度不考虑返回值，因此空间复杂度主要取决于递归栈的深度，递归栈的深度是O(log n)。</li></ul><h2 id="0118-杨辉三角"><a href="#0118-杨辉三角" class="headerlink" title="0118 杨辉三角"></a>0118 杨辉三角</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/pascals-triangle/">https://leetcode-cn.com/problems/pascals-triangle/</a></p><p><strong>方法一</strong>：数学</p><p>根据题意，两层循环即可解决。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0118-1.9hl5l0ho404.gif" alt="0118-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数学</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集合</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numRows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> j<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首尾元素为1</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其他情况为左上以及上方的元素之和</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(numRows<sup>2</sup>)，<code>numRows</code>为杨辉三角的行数。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0121-买卖股票的最佳时机-I"><a href="#0121-买卖股票的最佳时机-I" class="headerlink" title="0121 买卖股票的最佳时机 I"></a>0121 买卖股票的最佳时机 I</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/description/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/description/</a></p><p><strong>方法一</strong>：暴力法(超时)</p><p>两层循环遍历所有买入卖出情况，找到最大利润。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> prices<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxprofit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxprofit<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    maxprofit <span class="token operator">=</span> prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxprofit<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n^2)。循环运行<code>n(n-1)/2</code>次。</li><li>空间复杂度：O(1)。只使用了常数个变量。</li></ul><p><strong>方法二</strong>：一次遍历</p><p>如果是真的买股票，我们肯定希望买在历史最低点。在题目中，我们只需要一个变量记录历史最低价格<code>minprice</code>，我们就可以假设自己是在那天买的，那么我们在第i天卖出股票的利润就是<code>prices[i]-minprice</code>。</p><p>因此，我们只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑如果是最低点买进，今天的利润。当考虑完所有天数之时，我们就得到了最好的答案。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minPrice <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//历史最低价格Integer.MAX_VALUE</span>        <span class="token keyword">int</span> maxProfit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大利润</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>minPrice<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录历史最低价格</span>                minPrice <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算最低历史价格下最大利润，更新利润</span>                <span class="token keyword">int</span> profit <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minPrice<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>maxProfit <span class="token operator">&lt;</span> profit<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    maxProfit <span class="token operator">=</span> profit<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> maxProfit<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n) ，只需要遍历一次。</li><li>空间复杂度：O(1)，只使用了常数个变量。</li></ul><h2 id="0122-买卖股票的最佳时机-II"><a href="#0122-买卖股票的最佳时机-II" class="headerlink" title="0122 买卖股票的最佳时机 II"></a>0122 买卖股票的最佳时机 II</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/</a></p><p><strong>方法一</strong>：贪心</p><p>由于股票购买没有限制，因此整个问题等价于寻找不相交区间的累计盈利值。贪心的角度考虑，我们每次都选择贡献大于0的区间，即能使得利润最大化。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxProfit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大利润</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//贪心，利润为正区间全部累加</span>                maxProfit <span class="token operator">=</span> maxProfit<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxProfit<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n为数组长度，只需遍历一次数组即可。</li><li>空间复杂度：O(1)，只需要常数空间存放若干变量。</li></ul><h2 id="0125-验证回文串"><a href="#0125-验证回文串" class="headerlink" title="0125 验证回文串"></a>0125 验证回文串</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/valid-palindrome/description/">https://leetcode-cn.com/problems/valid-palindrome/description/</a></p><p><strong>方法一</strong>：在原字符串上直接判断（筛选+判断，创建新<code>StringBuffer</code>增加空间开销）</p><p>直接在原字符串s上使用双指针。在移动任意一个指针是，需要不断地向另一个指针的方向移动，直到遇到一个字母或数字字符，或者两个指针重合为止。也就是说，我们每次将指针移到下一个字母字符或数字字符，再判断这两个指针指向的字符是否相同。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从左到右，筛选出字符或数字，依次比较</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//if('a'&lt;=c &amp;&amp; c&lt;='z'||'0'&lt;=c &amp;&amp; c&lt;='9')</span>            <span class="token comment" spellcheck="true">//找到左侧比较元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//找到右侧比较元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//比较，忽略大小写</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//循环结束，是回文串</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(|s|)，其中|s|时字符串s的长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0136-只出现一次的数字"><a href="#0136-只出现一次的数字" class="headerlink" title="0136 只出现一次的数字"></a>0136 只出现一次的数字</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/single-number/">https://leetcode-cn.com/problems/single-number/</a></p><p><strong>方法一</strong>：位运算</p><p>如果不考虑时间复杂度和空间复杂度的限制，这道题有很多解法。</p><ul><li>使用集合存储数字。遍历数组中的每个数字，如果集合中没有该数字，则将该数字加入集合，如果该集合中已经有该数字，则将数字从集合中删除，最后剩下的数字就是只出现一次的数字。<code>HashSet</code>：<code>contains</code>和<code>remove</code>方法。</li><li>使用哈希表存储每个数字和该数字出现的次数。遍历数组即可得到每个数字出现的次数，并更新哈希表。最后遍历哈希表，得到只出现一次的数字。<code>HashMap</code></li><li>使用集合存储所有不重复数字，用集合元素之和的二倍减去数组中元素之和，剩下的就是数组中只出现一次的数字。<code>HashSet</code></li></ul><p>上述三种解法均需要额外O(n)的空间，<code>n</code>是数组长度。</p><p>如何才能做到线性时间复杂度和常数空间复杂度呢？使用位运算！该题可使用异或运算，异或运算有以下三个性质。</p><ul><li>任何数和<code>0</code>做异或运算，结果仍然是原来的数，即<code>a⊕0=a</code>。</li><li>任何数和其自身做异或运算，结果是0，即<code>a⊕a=0</code>。</li><li>异或满足交换律和结合律，即<code>a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b</code>。</li></ul><p>根据异或的性质，数组中全部元素的异或运算即为数组中只出现一次的数字。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> singleNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增强for的内存消耗会多一点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            singleNumber <span class="token operator">^=</span> element<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> singleNumber<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n是数组长度。只需要对数组遍历一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0141-环形链表"><a href="#0141-环形链表" class="headerlink" title="0141 环形链表"></a>0141 环形链表</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/linked-list-cycle/">https://leetcode-cn.com/problems/linked-list-cycle/</a></p><p><strong>方法一</strong>：哈希表</p><p>最容易想到的方法是遍历所有节点，每次遍历到一个节点时，判断该节点此前是否被访问过。</p><p>具体地，使用哈希表存储所有已经访问过的节点。每次到达一个节点，如果节点已经存在于哈希表中，则说明该链表时环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//哈希表</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashSet<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//加入不成功，说明有环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>是链表节点数。</li><li>空间复杂度：O(n)，主要为哈希表开销。</li></ul><p><strong>方法二</strong>：快慢指针</p><p>本方法需要读者对「Floyd判圈算法」（又称龟兔赛跑算法）有所了解。</p><p>假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，<strong>如果该链表中没有环</strong>，那么「兔子」将一直处于「乌龟」的前方；<strong>如果该链表中有环</strong>，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p><p>对于本题，我们定义两个指针，一快一慢。慢指针每次移动一步，快指针每次移动两步。初始时，慢指针在位置<code>head</code>，而快指针在位置<code>head.next</code>（用<code>do...while</code>循环快慢指针可以同时指向<code>head</code>开始）。这样一来，如果在移动过程中，快指针反过来追上慢指针，就说明该链表尾环形链表。否则快指针将到达链表尾部，该链表不为环形链表。</p><p><strong>最后，如果存在环，如何判断环的长度呢？</strong>方法是，快慢指针相遇后继续移动，直到第二次相遇。两次相遇间的移动次数即为环的长度。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0141-1.329020c4k0a0.png" alt="0141-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快慢指针，Floyd判圈算法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始位置</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//无环情况</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>null <span class="token operator">||</span> fast<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算环中元素个数</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0155-最小栈"><a href="#0155-最小栈" class="headerlink" title="0155 最小栈"></a>0155 最小栈</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/min-stack/">https://leetcode-cn.com/problems/min-stack/</a></p><p><strong>方法一</strong>：辅助栈(同步栈)</p><p>设计一个辅助栈，用于存储当前栈中最小元素，初始化时压入<code>Integer.MAX_VALUE</code>。我们只需要保持数据栈和最小值栈保持同步即可。</p><ul><li>入栈时，数据栈直接入栈。将入栈值和当前最值栈栈顶元素比较，将最小值入最小值栈。</li><li>当一个元素出栈时，最小值栈顶元素同步弹出。</li><li>任一时刻，栈内元素就存储在辅助栈的栈顶元素中。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0155-1.1pyir95g2wtc.gif" alt="0155-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//双端队列接口，Stack基于Vector，线程安全但是效率低</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> dataStack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据栈</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> minStack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最小值栈(辅助栈)</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dataStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最小值栈首先压入一个Integer最大值</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步压入</span>        dataStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步弹出</span>        dataStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查看栈顶元素</span>        <span class="token keyword">return</span> dataStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检索栈中最小元素</span>        <span class="token keyword">return</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)，栈的插入、删除与读取操作都是O(1)，我们定义的每个操作中最多调用栈两次。</li><li>空间复杂度：O(n)，其中n为总操作数。最坏情况下，我们会连续插入n个元素，此时两个栈占用空间为O(n)。</li></ul><h2 id="0160-相交链表"><a href="#0160-相交链表" class="headerlink" title="0160 相交链表"></a>0160 相交链表</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p><p><strong>方法一</strong>：双指针</p><p>设「第一个公共节点」为 <code>node </code>，「链表 <code>headA</code>」的节点数量为 <code>a</code>，「链表 <code>headB</code>」的节点数量为 <code>b</code> ，「两链表的公共尾部」的节点数量为 <code>c</code> ，则有：</p><ul><li>头结点<code>headA</code>到 <code>node </code>节点前，共有<code>a-c</code>个节点；</li><li>头结点<code>headB</code>到<code>node</code>节点前，共有<code>b-c</code>个节点；</li></ul><p>考虑构建两个节点指针A和B，分别指向两链表头结点<code>headA</code>和<code>headB</code>，做如下操作：</p><ul><li>指针A先遍历完链表<code>headA</code>，再开始遍历链表<code>headB</code>，当走到<code>node</code>时，共走步数为：<code>a+(b-c)</code>。</li><li>指针B先遍历完链表<code>headB</code>，再开始遍历链表<code>headA</code>，当走到<code>node</code>时，共走步数为：<code>b+(a-c)</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0160-1.u7973irfw1c.png" alt="0160-1"></p><p>此时，指针A和B重合，<code>a+(b-c) = b+(a-c)</code>，并有两种情况：</p><ul><li>若两链表有公共尾部(即<code>c&gt;0</code>)：指针A，B同时指向「第一个公共节点」<code>node</code>。</li><li>若两链表无公共尾部(即<code>c=0</code>)：指针A，B同时指向<code>null</code>。</li></ul><p>因此，返回A即可。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode headA<span class="token punctuation">,</span> ListNode headB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>headA <span class="token operator">==</span> null <span class="token operator">||</span> headB <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两单链表至少有一个为空</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode pA <span class="token operator">=</span> headA<span class="token punctuation">;</span>        ListNode pB <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//走完全程m+n</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pA <span class="token operator">!=</span> pB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在这里第一轮体现在pA和pB第一次到达尾部会移向另一链表的表头, 而第二轮体现在如果pA或pB相交就返回交点, 不相交最后就是null==null</span>            pA <span class="token operator">=</span> pA <span class="token operator">==</span> null <span class="token operator">?</span> headB <span class="token operator">:</span> pA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pB <span class="token operator">=</span> pB <span class="token operator">==</span> null <span class="token operator">?</span> headA <span class="token operator">:</span> pB<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pA<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(a+b)，最差情况下，需要遍历<code>a+b</code>个节点。</li><li>空间复杂度：O(1)，节点指针A，B使用常数大小的额外空间。</li></ul><h2 id="0163-缺失的区间"><a href="#0163-缺失的区间" class="headerlink" title="0163 缺失的区间"></a>0163 缺失的区间</h2><p><strong>题目地址</strong>：<a href="https://blog.csdn.net/qq_29051413/article/details/108529073?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-4&spm=1001.2101.3001.4242">https://blog.csdn.net/qq_29051413/article/details/108529073?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-4&amp;spm=1001.2101.3001.4242</a></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0163-1.2m6btvc9ryi0.png" alt="0163-1"></p><p><strong>方法一</strong>：遍历</p><p>从题意可知，<code>nums</code>肯定在<code>[lower,upper]</code>闭区间内。遍历<code>nums</code>数组，定义一个变量<code>pre</code>表示遍历到的数字的前一个数字，<code>pre</code>初始值为<code>lower-1</code>。</p><p>每遍历一个数字：</p><ul><li>如果<code>nums[i]-pre==2</code>，说明<code>pre</code>和<code>nums[i]</code>中间缺失了一个数字，这个缺失数字就是<code>pre+1</code>，也可以<code>nums[i-1]</code>表示；</li><li>如果<code>nums[i]-pre&gt;=3</code>，说明<code>pre</code>和<code>nums[i]</code>中间缺失了两个以上数字，缺失数字范围时<code>pre+1</code>到<code>nums[i]-1</code>。</li></ul><p>遍历完<code>nums</code>数组，此时<code>pre==nums[nums.length-1]</code>：</p><ul><li>如果<code>upper-pre==1</code>，说明<code>nums</code>数组最后一个数字尚未达到边界，还差一个数字<code>pre+1</code>，也可以用<code>upper</code>表示；</li><li>如果<code>upper-pre&gt;=2</code>，说明<code>nums</code>数组最后一个数字尚未达到边界，还差两个及以上数字，区间为<code>pre+1</code>到<code>upper</code>。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">findMissingRanges</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> pre <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>lower<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止lower是int最小值，-1时溢出</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//缺失一个数字</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span>pre<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>pre<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缺失区间</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//缺失一个数字</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>upper<span class="token operator">-</span>pre<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span>pre<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>upper<span class="token operator">-</span>pre<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缺失区间</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>为<code>nums</code>长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0167-两数之和-II-输入有序数组"><a href="#0167-两数之和-II-输入有序数组" class="headerlink" title="0167 两数之和 II 输入有序数组"></a>0167 两数之和 II 输入有序数组</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/</a></p><p><strong>方法一</strong>：双指针（缩小搜索范围）</p><p>这道题可以使用「<a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a>」的解法，或二分查找(数组有序)。</p><ul><li>使用暴力法，时间复杂度O(n^2)，空间复杂度O(1)。</li><li>使用哈希表，时间复杂度O(n)，空间复杂度O(n)。</li><li>二分查找，首先固定一个数，然后二分查找另一个数。时间复杂度<code>O(nlog n)</code>，第一个数需要遍历O(n)，第二个数二分查找O(log n)。空间复杂度O(1)。</li></ul><p>双指针法可以获得时间复杂度O(n)，空间复杂度O(1)。在这道题中，我们需要找的是符合条件的一对下标<code>(i, j)</code>，它们需要满足的约束条件是：</p><ul><li><code>i, j</code>都是合法下标，即<code>0&lt;=i, j&lt;n</code></li><li><code>i&lt;j</code>（题目要求）</li></ul><p>我们希望找出<code>A[i]+A[j] == target</code>的下标<code>(i, j)</code>。以<code>n=8</code>为例，这时全部搜索空间为白色部分，如A图，暴力求解为O(n^2)，双指针如何缩减搜索空间呢？</p><p>我们首先检查右上角<code>(0, 7)</code>，即<code>A[0]+A[7]</code>，与<code>target</code>进行比较。如果相等的话，直接返回下标+1，如果不相等的话，则要么大于<code>target</code>，要么小于<code>target</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0167-1.4hnqb9d4l1k0.png" alt="0167-1"></p><ul><li>假设<code>A[0]+A[7]</code>小于<code>target</code>，我们应该<strong>找更大的两个数</strong>。其他数和A[0]相加只会更小，直接排除，应该在<code>A[1]</code>中查找，就是i++，对应于搜索空间，就是缩减了一行搜索空间。如B图</li><li>假设<code>A[0]+A[7]</code>大于<code>target</code>，我们应该<strong>找更小的两个数</strong>。其他数和A[7]相加只会更大，直接排除，应该在<code>A[6]</code>中查找，就是j–，对应搜索空间，就是缩减了一列搜索空间。如C图</li></ul><p>所以无论<code>A[i]+A[j] </code>结果大了还是小了，我们都可以排除一行或者一列的搜索空间，经过n步以后，就能检查完所有的搜索空间。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左指针</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右指针</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左指针右移，缩小搜索空间</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右指针左移，缩小搜索空间</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n为数组长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0169-多数元素"><a href="#0169-多数元素" class="headerlink" title="0169 多数元素"></a>0169 多数元素</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/majority-element/">https://leetcode-cn.com/problems/majority-element/</a></p><p><strong>方法一</strong>：摩尔投票法</p><p>如果不考虑复杂度，可以使用如下方法：</p><ul><li>暴力法，两层循环，时间复杂度：O(n^2)，空间复杂度O(1)。</li><li>先排序，再返回<code>n/2</code>处元素。时间复杂度：<code>O(nlog n)</code>，空间复杂度O(1)。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位运算</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>哈希表，数组元素作为key，出现次数作为value，把数组中元素不断放入map中，如果某个元素的个数大于长度的一半，直接返回。时间复杂度：O(n)，空间复杂度O(n)。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//getOrDefault,Map接口的方法</span>            count <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果某个数字出现的个数已经超过数组的一半，自己返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>「<strong>摩尔投票法</strong>」思路：</p><ul><li><p>首先选定一个候选人<code>cand_num</code>，初始化为<code>nums[0]</code>，票数<code>count</code>初始化为1；</p></li><li><p>当遇到与<code>cand_num</code>相同的数，则票数<code>count++</code>，否则票数<code>count--</code>；</p></li><li><p>当票数<code>count</code>为0时，更换候选人，并将票数<code>count</code>重置为1；</p></li><li><p>遍历完数组后，<code>cand_num</code>即为最终答案。</p></li></ul><p>为什么可行呢？这相当于每个“多数元素”和其他元素两两相互抵消，抵消到最后肯定还剩余<strong>至少一个</strong>“多数元素”。无论数组<code>1, 2, 1, 2, 1</code>还是<code>1, 2, 2, 1, 1</code>，总能得到正确的候选人。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cand_num <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化候选人</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化票数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//票数为0，前面所有数据抵消，重置cand_num和count</span>                cand_num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> cand_num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等于候选人，票数+1</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//否则，票数-1</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cand_num<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历数组元素一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0171-Excel表列序号"><a href="#0171-Excel表列序号" class="headerlink" title="0171 Excel表列序号"></a>0171 Excel表列序号</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/excel-sheet-column-number/">https://leetcode-cn.com/problems/excel-sheet-column-number/</a></p><p><strong>方法一</strong>：进制转换</p><p>字符串遍历，进制转换，因为有<code>26</code>个字母，所以相当于<code>26</code>进制。</p><p>初始化结果<code>res=0</code>，遍历时将每个字母与<code>A</code>做减法，因为<code>A</code>代表<code>1</code>，所以减法后还要加<code>1</code>，<code>num=字母-&#39;A&#39;+1</code>，每遍历一位则<code>res = res*26+num</code>，直至遍历结束。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//进制转换</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">titleToNumber</span><span class="token punctuation">(</span>String columnTitle<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从前往后遍历，每次取出一个数，用column*26+num更新结果</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>columnTitle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> columnTitle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            column <span class="token operator">=</span> column<span class="token operator">*</span><span class="token number">26</span> <span class="token operator">+</span> num<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> column<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)。</p></li><li><p>空间复杂度：O(1)。</p></li></ul><h2 id="0172-阶乘后的零"><a href="#0172-阶乘后的零" class="headerlink" title="0172 阶乘后的零"></a>0172 阶乘后的零</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/">https://leetcode-cn.com/problems/factorial-trailing-zeroes/</a></p><p><strong>方法一</strong>：计算因子5个数</p><p>首先末尾有多少个<code>0</code>，考虑<code>0</code>是怎么来的？对于<code>5!=5*4*3*2*1=120</code>，我们发现结果中会有一个<code>0</code>，原因是<code>2</code>和<code>5</code>相乘构成了一个<code>10</code>。而对于<code>10</code>的话，其实也只有<code>2*5</code>构成，所以我们只需要找有多少对<code>2</code>和<code>5</code>即可。</p><p>我们将乘数分解，看一个例子。</p><p><code>11! = 11 * 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 11 * (2 * 5) * 9 * (4 * 2) * 7 * (3 * 2) * (1 * 5) * (2 * 2) * 3 * (1 * 2) * 1</code></p><p>对于含有<code>2</code>的因子，每<code>2</code>个数出现一次；对于含有<code>5</code>的因子，每<code>5</code>个数出现一次。所以找到一个<code>5</code>，一定有<code>2</code>与之配对，我们只需要判断每个累乘的数有多少个<code>5</code>因子即可。</p><p>以上并没有结束，我们发现每隔<code>5*5=25</code>个数，出现的是两个<code>5</code>，所以除了每个<code>5</code>个数算作一个<code>5</code>之外，每隔<code>25</code>个数，还需要多算一个<code>5</code>，即需要加上<code>n/25</code>。同理每隔<code>5*5*5=125</code>个数，会出现<code>3</code>个<code>5</code>，所以还需要加上<code>n/125</code>。</p><p>综上，规律是每隔<code>5</code>个数出现<code>1</code>个<code>5</code>，每隔<code>25</code>个数出现<code>2</code>个<code>5</code>，每隔<code>125</code>个数出现<code>3</code>个<code>5</code>…依次类推。最终<code>5</code>的个数就是<code>n / 5 + n / 25 + n / 125 ...</code></p><p>如果直接按上面写代码，分母可能溢出，所以下次计算首先更新<code>n=n/5</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5的个数为：n / 5 + n / 25 + n / 125 ...</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> n<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> count<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log n)，循环每次除以5，5<sup>x</sup>=n，次数<code>x=log5n</code>。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0190-颠倒二进制位"><a href="#0190-颠倒二进制位" class="headerlink" title="0190 颠倒二进制位"></a>0190 颠倒二进制位</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/reverse-bits/">https://leetcode-cn.com/problems/reverse-bits/</a></p><p><strong>方法一</strong>：循环</p><p>每次把<code>res</code>左移，把<code>n</code>的二进制末尾数字拼接到<code>res</code>的末尾，然后把<code>n</code>右移，循环32位二进制即得到结果。</p><p>举一个8位二进制进行说明：</p><table><thead><tr><th align="left">i</th><th>n</th><th>res</th></tr></thead><tbody><tr><td align="left">-</td><td>11001001</td><td>-</td></tr><tr><td align="left">0</td><td>1100100</td><td>1</td></tr><tr><td align="left">1</td><td>110010</td><td>10</td></tr><tr><td align="left">2</td><td>11001</td><td>100</td></tr><tr><td align="left">3</td><td>1100</td><td>1001</td></tr><tr><td align="left">4</td><td>110</td><td>10010</td></tr><tr><td align="left">5</td><td>11</td><td>100100</td></tr><tr><td align="left">6</td><td>1</td><td>1001001</td></tr><tr><td align="left">7</td><td>-</td><td>10010011</td></tr></tbody></table><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you need treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>res<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n&amp;1取出n的最后一位，res左移一位，两者相或将n的最后一位放到res末尾</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n右移一位</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(k)，k为二进制位数。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：分而治之</p><p>有另外一种不适用循环的做法，类似于<strong>归并排序</strong>。</p><p>其思想是分而治之，把数字分为两半，然后交换这两半的顺序；然后把前后两个半段都在分为两半，交换内部顺序…直至最后交换顺序的时候，交换的数字只有1位。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0190-1.c1qzufu25mo.png" alt="0190-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> M1 <span class="token operator">=</span> <span class="token number">0x55555555</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 01010101010101010101010101010101</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> M2 <span class="token operator">=</span> <span class="token number">0x33333333</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 00110011001100110011001100110011</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> M4 <span class="token operator">=</span> <span class="token number">0x0f0f0f0f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 00001111000011110000111100001111</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> M8 <span class="token operator">=</span> <span class="token number">0x00ff00ff</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 00000000111111110000000011111111</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">1</span> <span class="token operator">&amp;</span> M1 <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> M1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// >>>无符号右移</span>        n <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">2</span> <span class="token operator">&amp;</span> M2 <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> M2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">4</span> <span class="token operator">&amp;</span> M4 <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> M4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">8</span> <span class="token operator">&amp;</span> M8 <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> M8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n <span class="token operator">>>></span> <span class="token number">16</span> <span class="token operator">|</span> n <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0191-位-1-的个数"><a href="#0191-位-1-的个数" class="headerlink" title="0191 位 1 的个数"></a>0191 位 1 的个数</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/number-of-1-bits/">https://leetcode-cn.com/problems/number-of-1-bits/</a></p><p><strong>方法一</strong>：循环右移32次</p><p>直观想法：<code>n&amp;1</code>取出二进制末尾，然后把<code>n</code>右移<code>1</code>位，循环<code>32</code>次结束。</p><p>「<strong>小心坑</strong>」</p><p><strong>值得一提的是</strong>，在<code>Java</code>中，想通过右移到<code>n</code>为<code>0</code>时结束循环<code>while(n!=0)</code>，必须使用逻辑右移，否则会超时。</p><ul><li>算术右移&gt;&gt;：舍弃最低位，高位用符号位填补；</li><li>逻辑右移&gt;&gt;&gt;：舍弃最低位，高位用0填补。</li></ul><p><code>for</code>循环<code>32</code>次则不会遇到这种坑。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取出n的末尾二进制数与1比较</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n右移一位，注意想让n右移为0，需要使用逻辑右移>>></span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(k)，k为二进制位数。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：消除二进制末尾的1</p><p>神奇的做法：<code>n&amp;(n-1)</code>，它可以把<code>n</code>的二进制中最后一个出现的<code>1</code>改成<code>0</code>。一直执行这个操作直到<code>n=0</code>，记录操作次数，即为<code>n</code>的二进制中<code>1</code>的个数。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            n <span class="token operator">&amp;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n末尾出现的1改成0</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(k)，k为二进制位数。</li><li>空间复杂度：O(1)。</li></ul><p><strong>位运算总结</strong></p><p>位运算符：与<code>&amp;</code>、或<code>|</code>、非<code>~</code>、异或<code>^</code>、左移<code>&lt;&lt;</code>、右移<code>&gt;&gt;</code>、逻辑右移<code>&gt;&gt;&gt;</code>。</p><p>常用位操作</p><ul><li>判断奇偶 <code>x&amp;1==1</code> 等价 <code>x%2==1</code>;<code> (x&amp;1) ==0</code>等价<code>x%2==0</code>。</li><li><code>x/2</code>等价<code>x&gt;&gt;1</code></li><li><code>x &amp;=x(x-1)</code>把<code>x</code>的最低位二进制<code>1</code>置为<code>0</code></li><li><code>x&amp;(-x)</code>得到最低位的<code>1</code></li><li><code>x&amp;(~x)</code>结果为<code>0</code></li></ul><p>指定位置的位运算</p><ul><li>将x最右边的n位清零：<code>x&amp;(~0&lt;&lt;n)</code></li><li>获取x的第n位值：<code>(x&gt;&gt;n)&amp;1</code></li><li>获取x的第n位的幂值：<code>x&amp;(1&lt;&lt;n)</code></li><li>仅将第n位置为1：<code>x|(1&lt;&lt;n)</code></li><li>仅将第n位置为0：<code>x&amp;(~(1&lt;&lt;n))</code></li><li>将x最高位至第n位(含)清零：<code>x&amp;((1&lt;&lt;n)-1)</code></li><li>将x第n位至第0位(含)清零：<code>x&amp;(~(1&lt;&lt;(n+1)-1))</code></li></ul><h2 id="0202-快乐数"><a href="#0202-快乐数" class="headerlink" title="0202 快乐数"></a>0202 快乐数</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/happy-number/">https://leetcode-cn.com/problems/happy-number/</a></p><p><strong>方法一</strong>：用Set集合检测循环</p><p>对于题目中要求，一个数要么经过操作变为1，要么形成环路无法到达1。因此我们可以用集合来检测循环。</p><p>进阶也可以用快慢指针检测循环，把获取下一个数的函数抽象出来。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//哈希集合检测循环</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> hashset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hashset<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前数加入集合</span>            hashset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计算下一个数</span>            n <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快慢指针检测循环</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移动快指针</span>            fast <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移动慢指针</span>            slow <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fast<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>复杂度分析</p><ul><li>时间复杂度：O(logn)。</li><li>空间复杂度：哈希O(logn)，快慢指针O(1)。</li></ul><h2 id="0203-移除链表元素"><a href="#0203-移除链表元素" class="headerlink" title="0203 移除链表元素"></a>0203 移除链表元素</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">https://leetcode-cn.com/problems/remove-linked-list-elements/</a></p><p><strong>方法一</strong>：哨兵节点</p><p>当要删除的一个或多个节点位于链表的头部时，事情会变得复杂。可以通过哨兵节点解决它，哨兵节点广泛应用于树和链表中，如伪头、伪尾、标记等，它们是纯功能的，通常不保存任何数据，其主要目的是使链表标准化，如使链表永不为空、永不无头、简化插入和删除。</p><p>在这里，哨兵节点将被用于伪头。</p><ul><li>初始化哨兵节点为<code>ListNode(-1)</code>，且设置哨兵节点<code>sentinel</code>指向头结点；</li><li>初始化两个指针<code>pre</code>和<code>cur</code>，分别指向前继节点和当前节点；</li><li>当<code>cur!==null</code>，判断当前节点是否等于要删除节点，相等则<code>pre.next = cur.next</code>，否则<code>pre=cur</code>。接着遍历下一个元素<code>cur=cur.next</code>；</li><li>遍历结束，返回<code>sentinel.next</code></li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode sentinel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置哨兵节点</span>        sentinel<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode pre <span class="token operator">=</span> sentinel<span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除元素</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pre <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后移前继节点</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一个元素判断</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，所有元素遍历一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0204-计数质数"><a href="#0204-计数质数" class="headerlink" title="0204 计数质数"></a>0204 计数质数</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/count-primes/">https://leetcode-cn.com/problems/count-primes/</a></p><p><strong>方法一</strong>：枚举</p><p>很容易想到枚举小于<code>n</code>的每个数是不是质数，计数即可，但会超时。一个数<code>m</code>判断是否为质数可以优化遍历次数，从<code>[2,m-1]</code>优化成<code>[2,√m]</code>（数学证明）。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//枚举优化判断范围</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历小于n计数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for(int i=2; i&lt;m; i++)&amp;#123;</span>        <span class="token comment" spellcheck="true">//优化判断质数范围[2,√m]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n√n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0206-反转链表"><a href="#0206-反转链表" class="headerlink" title="0206 反转链表"></a>0206 反转链表</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a></p><p><strong>方法一</strong>：迭代</p><p>在遍历链表时，将当前节点的next指向前一个节点。由于节点没有引用前一个节点，因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点，防止链表断裂。最后返回新的头引用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前继节点</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点</span>        ListNode next <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后继节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历链表节点一次。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：递归</p><p>递归解法不好理解，配合代码和动画一起理解。</p><p>递归的两个条件：</p><ul><li>终止条件是当前节点或者下一个节点为<code>null</code></li><li>在函数内部，改变节点的指向，也就是<code>head</code>的下一个节点指向<code>head</code>那句<code>head.next.next=head</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0206-1.48w92wk8vbc0.gif" alt="0206-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//递归终止条件是当前为空，或者下一个节点为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里的cur就是最后一个节点</span>        ListNode cur <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里请配合动画演示理解</span>        <span class="token comment" spellcheck="true">//如果链表是 1->2->3->4->5，那么此时的cur就是5</span>        <span class="token comment" spellcheck="true">//而head是4，head的下一个是5，下下一个是空</span>        <span class="token comment" spellcheck="true">//所以head.next.next 就是5->4</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//防止链表循环，需要将head.next设置为空</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每层递归函数都返回cur，也就是最后一个节点</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，需要对链表的每个节点进行反转操作。</li><li>空间复杂度：O(n)，取决于递归调用栈空间，最多为n层。</li></ul><h2 id="0217-存在重复元素"><a href="#0217-存在重复元素" class="headerlink" title="0217 存在重复元素"></a>0217 存在重复元素</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/contains-duplicate/">https://leetcode-cn.com/problems/contains-duplicate/</a></p><p><strong>方法一</strong>：哈希集合判重</p><p>可以对<em>数组排序</em>，重复元素一定是相邻的，遍历排序数组，看相邻两个元素是否相等即可。</p><p>也可以用哈希集合判重，遍历数组并加入<code>Set</code>集合，如果某个元素已经在集合中，则说明存在重复元素。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//哈希集合判重</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// if(seen.contains(nums[i]))&amp;#123;</span>            <span class="token comment" spellcheck="true">//     return true;</span>            <span class="token comment" spellcheck="true">// &amp;#125;else&amp;#123;</span>            <span class="token comment" spellcheck="true">//     seen.add(nums[i]);</span>            <span class="token comment" spellcheck="true">// &amp;#125;</span>            <span class="token comment" spellcheck="true">//或者用add是否成功判重复</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(n)。</li></ul><h2 id="0219-存在重复元素-II"><a href="#0219-存在重复元素-II" class="headerlink" title="0219 存在重复元素 II"></a>0219 存在重复元素 II</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">https://leetcode-cn.com/problems/contains-duplicate-ii/</a></p><p><strong>方法一</strong>：哈希表+滑动窗口</p><p>用哈希表维护有一个大小为k的滑动窗口，哈希表能在常数时间内完成搜索、删除、插入等操作，所以我们只需要遍历数组一次。</p><p>遍历数组，对每个元素做以下操作：</p><ul><li>在散列表中搜索当前元素，如果找到返回<code>true</code></li><li>在散列表插入当前元素</li><li>如果当前散列表大小超过了<code>k</code>，删除散列表中最旧的元素</li></ul><p>遍历结束，如果没有返回，就返回<code>false</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//散列表中存在该元素</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不存在，加入散列表</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//散列表元素数大于k，即大于最大窗口，删除最旧元素</span>                set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，我们会做n次搜索，删除，插入操作，每次操作都耗费常数时间。</li><li>空间复杂度：O(min(n，k))，开辟的额外空间取决于散列表存储的元素的个数，也就是滑动窗口的大小O(min(n，k))。</li></ul><h2 id="0226-翻转二叉树"><a href="#0226-翻转二叉树" class="headerlink" title="0226 翻转二叉树"></a>0226 翻转二叉树</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/invert-binary-tree/">https://leetcode-cn.com/problems/invert-binary-tree/</a></p><p><strong>方法一</strong>：递归</p><p>从根节点开始，递归的对树进行遍历，并从叶子结点开始翻转。如果当前遍历到的节点root的左右两棵子树都已经翻转，那么我们只需要交换两棵子树的位置，即可完成以root为根节点的整棵子树的翻转。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归结束条件</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//翻转后的左子树</span>        TreeNode right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//翻转后的右子树</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交换左右子树</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，所有节点遍历一次，对每个节点在常数时间内交换两棵子树。</li><li>空间复杂度：O(h)，使用空间由递归栈的深度决定，等于二叉树的高度。</li></ul><p><strong>方法二</strong>：迭代</p><p>递归实现也就是深度优先遍历方式，那么对于的就是广度优先遍历。</p><p>广度优先遍历需要额外的数据结构–队列，来存放临时遍历到的元素。深度优先遍历的特点时一竿子插到底，不行了再退回来继续；而广度优先遍历的特点是层层扫荡。</p><p>所以我们需要将节点逐层放入到队列中，然后不断地迭代队列中的元素，对当前弹出元素调换其左右子树的位置，然后</p><ul><li><p>判断其左子树是否为空，不为空就放入队列中</p></li><li><p>判断其右子树是否为空，不为空就放入队列中</p></li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将二叉树中的节点逐层放入队列中，再迭代处理队列中的元素</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             TreeNode temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//弹栈交换左右子树，交换之前先保存一边。</span>            TreeNode left <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>left <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断当前节点的左右子树是否为空，不为空则入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，所有节点遍历一次，对每个节点在常数时间内交换两棵子树。</li><li>空间复杂度：O(n)，最坏情况下会包含所有的叶子节点，完全二叉树叶子结点时<code>n/2</code>个</li></ul><h2 id="0232-用栈实现队列"><a href="#0232-用栈实现队列" class="headerlink" title="0232 用栈实现队列"></a>0232 用栈实现队列</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">https://leetcode-cn.com/problems/implement-queue-using-stacks/</a></p><p><strong>方法一</strong>：双栈（<code>inStack &amp; outStack</code>）</p><p>一种自然想法，处理入栈操作，另一个作为辅助栈，每次将结果栈内容全部弹到辅助栈，将push内容入栈，最后将辅助栈内容全部弹到结果栈。时间复杂度和空间复杂度都很高。</p><p>能不能充分利用两个栈呢？答案是肯定的，将一个栈作为输入栈，用于push传入的数据，另一个栈作为输出栈，用于pop和peek操作。</p><p>每次pop或peek时，如果输出栈为空，则将从输入栈内容依次弹出并压入输出栈，这样输出栈栈顶到栈底就是队列从队首到队尾的顺序，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0232-1.bfrcg51kpm.gif" alt="0232-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> inStack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入栈，新元素(队尾)压入</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> outStack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出栈，元素(队首)弹出</span>    <span class="token comment" spellcheck="true">/** Initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        inStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Push element x to the back of queue. */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接压入</span>        inStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Removes the element from in front of queue and returns that element. */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断输出栈是否为空，不为空直接pop，否则从输入栈取</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">in2out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Get the front element. */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断输出栈是否为空，不为空直接peek，否则从输入栈取</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">in2out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Returns whether the queue is empty. */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> inStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">in2out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将输入栈内容依次弹出并压入输出栈，为正确队列顺序</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>inStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            outStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)，push和empty为O(1)，pop和peek为均摊O(1)。对于每个元素，之多入栈和出栈个两次，故均摊复杂度为O(1)。</li><li>空间复杂度：O(n)，其中n是操作总数。对于有n次push操作的情况，队列中会有n个元素，故空间复杂度为O(n)。</li></ul><h2 id="0234-回文链表"><a href="#0234-回文链表" class="headerlink" title="0234 回文链表"></a>0234 回文链表</h2><p><strong>题目地址：</strong><a href="https://leetcode-cn.com/problems/palindrome-linked-list/solution/">https://leetcode-cn.com/problems/palindrome-linked-list/solution/</a></p><p><strong>方法一：</strong>快慢指针+反转链表</p><p>使用快慢指针，慢指针一次移动一格位置，快指针一次移动两个位置，初始都指向<code>head</code>，同时用慢指针加两个前位指针反转前半部分链表。</p><p><strong>快指针遍历到末尾时，慢指针指向中间位置</strong>（奇数链表长度指向中间，偶数指向后半部分链表的头部），奇数长度时，慢指针后移一位指向后半部分链表头结点，<code>pre</code>指向前半部分链表头结点，最后进行回文判断即可。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快慢指针+反转链表</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//快慢指针，反转前半部分链表指针初始值</span>        ListNode slow<span class="token operator">=</span>head<span class="token punctuation">,</span> fast<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode pre<span class="token operator">=</span>head<span class="token punctuation">,</span> prepre<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> slow<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//快慢指针移动</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//反转前半部分链表</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> prepre<span class="token punctuation">;</span>            prepre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//链表长度为奇数，fast指向末尾，slow指向中间位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//后移指向后半部分链表的头部</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回文判断</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> slow<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>val<span class="token operator">!=</span>slow<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0237-删除链表中的节点"><a href="#0237-删除链表中的节点" class="headerlink" title="0237 删除链表中的节点"></a>0237 删除链表中的节点</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">https://leetcode-cn.com/problems/delete-node-in-a-linked-list/</a></p><p><strong>方法一</strong>：与下一个节点交换</p><p>从链表删除一个节点最常见的方法是修改之前节点的next指针，使其指向之后的节点。</p><p>但这里，直接给出要删除的节点，我们无法访问前面的指针。所以可以<strong>巧妙的将后一个节点的值前移到删除节点</strong>（此时当前节点变为删除节点的前一个节点），然后让删除节点指针指向后面的位置。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0237-1.1vbwk3x179ls.png" alt="0237-1"></p><p>因为我们知道要删除的节点不是末尾节点，所以这种方案可行。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//与下一个节点交换</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//后一节点值前移，然后删除后一节点</span>        node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0242-有效的字母异位词"><a href="#0242-有效的字母异位词" class="headerlink" title="0242 有效的字母异位词"></a>0242 有效的字母异位词</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/valid-anagram/">https://leetcode-cn.com/problems/valid-anagram/</a></p><p><strong>方法一</strong>：哈希表</p><p>从另一个角度考虑，<code>t</code>是<code>s</code>的异位词<strong>等价于两个字符串中出现字符的种类和次数均相等</strong>。由于字符串只包含<code>26</code>个字母，因此可以维护一个长度为<code>26</code>的频次数组，先遍历<code>s</code>中字符出现的频次，然后遍历字符串<code>t</code>，减去<code>table</code>中对应频次，如果出现<code>table[i]&lt;0</code>，则说明<code>t</code>中包含一个不在<code>s</code>中的额外字符，返回<code>false</code>即可。</p><p>对于<code>Unicode</code>编码，可能一个字符对应多个字节，所以不能用数组索引维护字符出现的频次，改用哈希表<code>Map&lt;Character, Integer&gt;</code>即可。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数组作为哈希表统计字符</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串长度不同</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//统计s中字符个数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            table<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//t中字符出现频次相减，如果出现小于0，说明不是字母异位词</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            table<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Unicode字符（多个字节对应一个字符）用Map作为哈希表统计字符</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串长度不同</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//统计s中字符个数</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//t中字符出现频次相减，如果出现小于0，说明不是字母异位词</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>是<code>s</code>的长度。</li><li>空间复杂度：O(S)，<code>S</code>为字符集大小，此处<code>S=26</code>。</li></ul><h2 id="0263-丑数"><a href="#0263-丑数" class="headerlink" title="0263 丑数"></a>0263 丑数</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/ugly-number/">https://leetcode-cn.com/problems/ugly-number/</a></p><p><strong>方法一</strong>：迭代</p><p>看数<code>n</code>除完所有因子<code>2,3,5</code>之后的剩余数是否为<code>1</code>，需要特判<code>0</code>，负数直接返回<code>false</code></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUgly</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要特判0</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> n <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> n <span class="token operator">/=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> n <span class="token operator">/=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>方法二</strong>：递归</p><p>递归终止条件：</p><ul><li><code>n==0</code>返回<code>false</code></li><li><code>n==1</code>返回<code>true</code></li></ul><p>递归条件：</p><ul><li><code>n%2==0</code>，递归判断<code>n/2</code></li><li><code>n%3==0</code>，递归判断<code>n/3</code></li><li><code>n%5==0</code>，递归判断<code>n/5</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUgly</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">isUgly</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="0268-丢失的数字"><a href="#0268-丢失的数字" class="headerlink" title="0268 丢失的数字"></a>0268 丢失的数字</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/missing-number/">https://leetcode-cn.com/problems/missing-number/</a></p><p><strong>方法一</strong>：求和法</p><p>在循环中求<code>[0,n]</code>的区间和，并且减去<code>nums</code>数组中的数字，得到缺失数字。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//求和法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//res记录[0,n]的和并减去nums数组中的数字，得到缺失数字</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> i<span class="token punctuation">;</span>            res <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0283-移动零"><a href="#0283-移动零" class="headerlink" title="0283 移动零"></a>0283 移动零</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/move-zeroes/">https://leetcode-cn.com/problems/move-zeroes/</a></p><p><strong>方法一</strong>：双指针</p><p>直观方法，设置一个指针，循环将非0数从前往后写入数组，然后再循环把指针之后剩余元素置零。</p><p>快慢指针，当不为0时，两者同步增长；当存在0时，慢指针指向0，快指针继续找下一个不为0的数，将两者交换，慢指针前一一位，遍历数组结束即把0全部移动到末尾（同理，可以实现将0全部移动到头部）。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//向后移动0</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说明i之前存在0，i==j时不交换</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向前移动0</span>        <span class="token comment" spellcheck="true">// int j = nums.length-1;</span>        <span class="token comment" spellcheck="true">// for(int i=nums.length-1; i>=0; i--)&amp;#123;</span>        <span class="token comment" spellcheck="true">//     if(nums[i] != 0)&amp;#123;</span>        <span class="token comment" spellcheck="true">//         if(i&lt;j)&amp;#123;//说明i之后存在0，i==j时不交换</span>        <span class="token comment" spellcheck="true">//             nums[j] = nums[i];</span>        <span class="token comment" spellcheck="true">//             nums[i] = 0;</span>        <span class="token comment" spellcheck="true">//         &amp;#125;</span>        <span class="token comment" spellcheck="true">//         j--;</span>        <span class="token comment" spellcheck="true">//     &amp;#125;</span>        <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历数组一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0326-3的幂"><a href="#0326-3的幂" class="headerlink" title="0326 3的幂"></a>0326 3的幂</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/power-of-three/">https://leetcode-cn.com/problems/power-of-three/</a></p><p><strong>方法一</strong>：运算法</p><p>整数<code>n</code>是<code>3</code>的幂次方n=3<sup>x</sup>，则<code>x&gt;=0</code>且为整数。用数学公式同时取对数可得到<code>x=log10(n)/log10(3)</code>。判断<code>x</code>是否为整数即可，用<code>x%1==0</code>方法。</p><p>注意：由于自然底数<code>e</code>的特殊性，用<code>log10(n)</code>计算更佳。</p><p>但可能会遇到浮点数精度误差问题，不能简单用<code>==</code>判断。<code>5.000001%1==0</code>返回为<code>true</code>。需要用误差理论与<code>epsilon</code>比较。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//运算法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//整数n小于1，不可能是3的幂次方</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//浮点数精度问题解决</span>        <span class="token comment" spellcheck="true">// double epsilon = Double.MIN_VALUE;</span>        <span class="token comment" spellcheck="true">// return (Math.log10(n)/(Math.log10(3)+epsilon)) % 1 &lt;= 2*epsilon;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="0338-比特位计数"><a href="#0338-比特位计数" class="headerlink" title="0338 比特位计数"></a>0338 比特位计数</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/counting-bits/">https://leetcode-cn.com/problems/counting-bits/</a></p><p><strong>方法一</strong>：转为二进制字符串依次计算</p><p>题目要求计算<code>0-n</code>所有数中比特<code>1</code>位数，直观的想法是把每一个要计算的数转为二进制字符串，然后判断其中<code>1</code>的个数，时间复杂度是<code>n*sizeof(int)</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//转为二进制字符串依次计算</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String binaryString <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>binaryString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>binaryString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n*sizeof(int))。</li><li>空间复杂度：O(n)。</li></ul><p><strong>方法二</strong>：动态规划（空间复杂度O(n)）</p><p>对所有数字，<strong>只有两类</strong>：</p><ul><li>奇数：二进制表示中，**奇数一定比前面的偶数多一个<code>1</code>**，多的就是最低位的1。例如<code>0=0,1=1,2=10,3=11</code>。奇数动态规划：<code>dp[n]=dp[n-1]+1</code>。</li><li>偶数：二进制表示中，<strong>偶数中1的个数一定和除以2（即右移一位，抹除末尾0）之后的那个数一样多</strong>。例如<code>2=10,4=100,8=1000</code>；<code>3=11,6=110,12=1100</code>。偶数动态规划：<code>dp[n]=dp[n&gt;&gt;1]</code>。</li></ul><p>另外，初始条件<code>0</code>中<code>1</code>的个数为<code>0</code>，根据奇偶性遍历即可得到<code>0-n</code>所有数中1的个数。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dp数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始条件，这里可以不设置，默认0</span>        sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//偶数dp，等于右移一位数中1个数</span>                sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//奇数dp，等于前一偶数中1个数加一</span>                sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(n)。</li></ul><h2 id="0342-4-的幂"><a href="#0342-4-的幂" class="headerlink" title="0342 4 的幂"></a>0342 4 的幂</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/power-of-four/">https://leetcode-cn.com/problems/power-of-four/</a></p><p><strong>方法一</strong>：位运算</p><p>这道题可以采用递归、迭代、数学运算。</p><ul><li>如果数字为4的幂，则<img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0342-1.5w3wdpkypn40.jpg" alt="0342-1">a应该为整数，我们检查<code>log2x</code>是否为偶数就能判断x是否为4的幂。</li></ul><p>当然，最神奇的还是位运算。</p><ul><li>检查<code>num</code>是否为<code>2</code>的幂：<code>x&gt;0 &amp;&amp; x&amp;(x-1)==0</code></li><li>如<code>x</code>为<code>2</code>的幂，且<code>x%3==1</code>，则<code>x</code>为<code>4</code>的幂</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//迭代</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 n <span class="token operator">/=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数学运算</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位运算</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0344-反转字符串"><a href="#0344-反转字符串" class="headerlink" title="0344 反转字符串"></a>0344 反转字符串</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/reverse-string/">https://leetcode-cn.com/problems/reverse-string/</a></p><p><strong>方法一</strong>：前后交换/双指针</p><p>可以采用<code>char数组长度/2</code>，循环交换一半对应的前后位置。</p><p>也可以指定左右指针，往中间遍历交换。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0344-1.3t15srqaqiw0.png" alt="0344-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//前后交换</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双指针</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//交换</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移动指针</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0349-两个数组的交集"><a href="#0349-两个数组的交集" class="headerlink" title="0349 两个数组的交集"></a>0349 两个数组的交集</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">https://leetcode-cn.com/problems/intersection-of-two-arrays/</a></p><p><strong>方法一</strong>：两个集合</p><p>采用两个<code>HashSet</code>集合，其中一个集合存储<code>nums1</code>不重复元素；第二个集合，在遍历<code>nums2</code>时，判断第一个集合中是否存在该元素，如存在则加入集合二中，遍历结束，集合二中元素即为两个数组的交集，处理后输出。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组1不重复元素放入set集合</span>            set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果set1中包含数组2元素，放入set集合</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>set2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将set2集合元素以数组形式返回</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Integer i <span class="token operator">:</span> set2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(m+n)，m和n分别为两个数组的长度。</li><li>空间复杂度：O(m+n)，空间复杂度主要取决于两个集合。</li></ul><p><strong>方法二</strong>：排序+双指针</p><p>如果两个数组是有序的，可以通过双指针的方法得到两个数组的交集。为了保证结果不重复，用set集合存储结果。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>  Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历查找交集</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理结果集合，以数组形式输出</span>  <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mlog m+nlog n)，其中 m 和 n 分别是两个数组的长度。对两个数组排序的时间复杂度分别是<code>O(mlog m) </code>和 <code>O(nlog n)</code>，双指针寻找交集元素的时间复杂度是<code> O(m+n)</code>，因此总时间复杂度是<code> O(mlog m+nlog n)</code>。</li><li>空间复杂度：O(m+n),空间复杂度主要取决于两个集合。</li></ul><h2 id="0350-两个数组的交集Ⅱ"><a href="#0350-两个数组的交集Ⅱ" class="headerlink" title="0350 两个数组的交集Ⅱ"></a>0350 两个数组的交集Ⅱ</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/">https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/</a></p><p><strong>方法一</strong>：哈希表</p><p>由于同一数字可能出现多次，因此需要用哈希表存储每个数字出现的次数。</p><p>为了降低空间复杂度，<strong>首先遍历较短的数组并在哈希表中记录每个数字以及对应出现的次数</strong>，然后遍历较长的数组。<strong>如果第二个数组中数字在哈希表中存在，则将该数字添加到答案，并减少哈希表中该数字出现的次数</strong>。</p><p>进阶问题：</p><ul><li><p>如果数组有序，可以用方法二双指针来做，时间复杂度为O(min(m,n))；</p></li><li><p>如果两个数组长度差别很大，方法一哈希表更优，空间复杂度更小；</p></li><li><p>如果一个数组元素存储在磁盘上，内存有序，不能一次加载所有元素到内存中，用方法一哈希表（因为无法实现排序，或者需要外部排序）</p></li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对较小数组进行统计操作,nums1大的话，交换位置调用自己</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>length <span class="token operator">></span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">intersect</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//统计较短数组中数字出现次数</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token operator">:</span> nums1<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历较长数组中数字，找到重复</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num2 <span class="token operator">:</span> nums2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//两个数组中都有该数字，加入结果，并修改map集合中该数字的出现频次</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num2<span class="token punctuation">;</span>                count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(m+n)，其中<code>m</code>和<code>n</code>分别是两个数组的长度。</li><li>空间复杂度：O(min(m,n))。</li></ul><p><strong>方法二</strong>：排序+双指针</p><p>如果两个数组是有序的，则可以用双指针的方法得到两个数组的交集。</p><p><strong>首先对两个数组排序，然后使用两个指针遍历两个数组</strong>。</p><ul><li>初始时，两指针指向数组头部；</li><li>每次比较两指针中的数字，如果两个数字不相等，数字较小的指针右移一位。如果两个数字相等，将两个指针都右移一位，直到某一个指针超出数组范围，遍历结束。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//排序+双指针</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储结果数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//双指针遍历</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>nums1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//较小的指针右移一位</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相等，重复元素，加入结果，并同时将两指针右移一位</span>                res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mlogm+nlogn)，<code>m</code>和<code>n</code>是两数组长度。</li><li>空间复杂度：O(min(m,n))，存储结果的数组，排序。</li></ul><h2 id="0387-字符串中的第一个唯一字符"><a href="#0387-字符串中的第一个唯一字符" class="headerlink" title="0387 字符串中的第一个唯一字符"></a>0387 字符串中的第一个唯一字符</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">https://leetcode-cn.com/problems/first-unique-character-in-a-string/</a></p><p><strong>方法一</strong>：使用哈希表存储频数</p><p>我们可以对字符串进行两次遍历。</p><p>在第一次遍历时，我们使用哈希映射统计出字符串中每个字符出现的次数。在第二次遍历时，只要遍历到了只出现一次的字符，就返回它的索引，否则在遍历结束后返回<code>-1</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//哈希表存储频数，两次遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一次遍历字符串，记录每个字符出现频数</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//二次遍历字符串，遇到第一个只出现一次的字符返回其索引</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历完未找到，返回-1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中<code>n</code>是字符串<code>s</code>的长度。</li><li>空间复杂度：O(|∑|)，<code>∑</code></li></ul><h2 id="0401-二进制手表"><a href="#0401-二进制手表" class="headerlink" title="0401 二进制手表"></a>0401 二进制手表</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/binary-watch/">https://leetcode-cn.com/problems/binary-watch/</a></p><p><strong>方法一</strong>：递归回溯</p><p>总体思路</p><ul><li>在10个灯中选<code>num</code>个灯点亮，如果选择的灯所组成的时间已不合理(小时超过11，分钟超过59)就进行剪枝。</li><li>也就是从0-10先选一个灯亮，再选当前灯的后面的灯亮，再选后面的灯的后面的灯亮，一直到<code>num</code>个灯点满。</li></ul><p>具体思路</p><ul><li><p>为了方便计算，设置了一个小时分钟合并的数组</p></li><li><p>递归的四个参数分别代表：剩余需要点亮的灯数量，从索引index开始往后点亮灯，当前小时数，当前分钟数</p></li><li><p>每次进入递归后，先判断当前小时数和分钟数是否符合要求，不符合直接return</p></li><li><p>递归的结束条件为当前需要点亮灯数为0，将结果加入列表，然后return</p></li><li><p>for循环枚举点亮灯的情况，从index枚举到10，每次枚举：</p></li><li><ul><li>减少一个需要点亮的灯数量<code>num-1</code></li><li>从当前已点亮的灯后面选取下一个要点亮的灯<code>i+1</code></li><li>如果<code>i&lt;4</code>，当前灯是小时灯，当前小时数加上新亮灯的小时数</li><li>如果<code>i&gt;=4</code>，当前灯是分钟灯，当前分钟数加上新亮灯的分钟数</li></ul></li><li><p>当剩余需要点亮灯数量为0的时候，已枚举完一种情况，根据题目要求的格式加到res列表中</p></li><li><p>返回res</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hoursMinutes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//亮灯数组，前四个为小时，后六个为分钟</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果数组</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">readBinaryWatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**        num:需要点亮灯数        index:从索引index往后点亮灯        hour:当前小时数        minute:当前分钟数    **/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> hour<span class="token punctuation">,</span> <span class="token keyword">int</span> minute<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hour <span class="token operator">></span> <span class="token number">11</span> <span class="token operator">||</span> minute <span class="token operator">></span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//回溯剪枝</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归结束条件，需要点亮灯数为0</span>            StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minute <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果放入列表中</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环递归，查找一种结果，然后回溯</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//亮index，如果小于4，更改小时</span>                <span class="token function">backtrack</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hour <span class="token operator">+</span> hoursMinutes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> minute<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//亮index，如果大于4，更改分钟</span>                <span class="token function">backtrack</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hour<span class="token punctuation">,</span> minute <span class="token operator">+</span> hoursMinutes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：<code>O(C10 num)</code>，从10个灯选择<code>num</code>个，实际比这个低因为剪枝了。</li><li>空间复杂度：<code>O(num)</code>。</li></ul><h2 id="0412-Fizz-Buzz"><a href="#0412-Fizz-Buzz" class="headerlink" title="0412 Fizz Buzz"></a>0412 Fizz Buzz</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/fizz-buzz/">https://leetcode-cn.com/problems/fizz-buzz/</a></p><p><strong>方法一</strong>：模拟法</p><p>创建一个结果集合，遍历<code>[1,n]</code>，判断每个数加入对应字符串即可：</p><ul><li>如果同时被<code>3</code>和<code>5</code>整除，加入<code>FizzBuzz</code>；</li><li>如果仅被<code>3</code>整除，加入<code>Fizz</code>；</li><li>如果仅被<code>5</code>整除，加入<code>Buzz</code>；</li><li>以上都不行，加入该数。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模拟法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">fizzBuzz</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同时是3和5的倍数</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"FizzBuzz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//仅是3的倍数</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Fizz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//仅是5的倍数</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Buzz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//既不是3也不是5的倍数</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//res.add(Integer.toString(i));</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>是输入数字大小。</li><li>空间复杂度：O(1)，不把结果集合计算在内。</li></ul><h2 id="0448-找到所有数组中消失的数字"><a href="#0448-找到所有数组中消失的数字" class="headerlink" title="0448 找到所有数组中消失的数字"></a>0448 找到所有数组中消失的数字</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/">https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/</a></p><p><strong>方法一：</strong>哈希表</p><p>我们可以用一个哈希表记录数组 <code>nums</code> 中的数字，由于数字范围均在 <code>[1,n] </code>中，记录数字后我们再利用哈希表检查<code> [1,n]</code>中的每一个数是否出现，从而找到缺失的数字。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(n)，哈希表消耗空间。</li></ul><p><strong>方法二</strong>：原地修改</p><p>优化空间复杂度到<code> O(1)</code>，能否让 <code>nums</code> 充当哈希表呢？</p><p>由于 <code>nums </code>的数字范围均在 <code>[1,n] </code>中，我们可以利用这一范围之外的数字，来表达「是否存在」的含义。</p><p>具体来说，遍历 <code>nums</code>，每遇到一个数 <code>x</code>，就让 <code>nums[(x−1)%n] </code>增加 <code>n</code>。由于 <code>nums </code>中所有数均在 <code>[1,n]</code> 中，增加以后，这些数必然大于 <code>n</code>。最后我们遍历 <code>nums</code>，若<code>nums[i]</code> 未大于 <code>n</code>，就说明没有遇到过数 <code>i+1</code>。这样我们就找到了缺失的数字。</p><p><strong>注意</strong>，当我们遍历到某个位置时，其中的数可能已经被增加过，因此需要对 <code>n</code> 取模来还原出它本来的值。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//原地修改</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组中有num，将数组(num-1)%n索引处数字加n，大于n表示出现过数字：索引+1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求余，可能存在多次加n</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> n<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据原地修改数组值是否小于等于n，判断是否确实数字：索引+1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0455-分发饼干"><a href="#0455-分发饼干" class="headerlink" title="0455 分发饼干"></a>0455 分发饼干</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/assign-cookies/">https://leetcode-cn.com/problems/assign-cookies/</a></p><p><strong>方法一</strong>：排序+贪心</p><p>为了尽可能满足最多数量的孩子，从贪心的角度考虑，应该按照孩子的胃口从小到大的顺序依次满足每个孩子，且对于每个孩子，应该选择可以满足这个孩子的胃口且尺寸最小的饼干。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//能满足则移动孩子指针，否则只移动饼干指针</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mlog m +nlog n)，其中m和n分别是数组g和s的长度。对两个数组排序的时间复杂度是 O(mlog m+nlog n)，遍历数组的时间复杂度是 O(m+n)，因此总时间复杂度是O(mlog m+nlog n)。</li><li>空间复杂度：O(log m+ log n)，空间复杂度主要为排序的额外空间开销。</li></ul><h2 id="0461-汉明距离"><a href="#0461-汉明距离" class="headerlink" title="0461 汉明距离"></a>0461 汉明距离</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/hamming-distance/">https://leetcode-cn.com/problems/hamming-distance/</a></p><p><strong>方法一</strong>：移位实现计数</p><p>根据定义，我们先求处两数的异或<code>s</code>，然后不断检测<code>s</code>的最低位。如果最低位为<code>1</code>，那么令计数器加<code>1</code>，然后我们令<code>s</code>整体右移一位，舍去最低位，重复这个过程直到<code>s=0</code>位置。这样计数器中就累计了<code>s</code>中二进制表示中<code>1</code>的数量。</p><p>补充扩展，<code>Brian Kernighan</code>算法，减少移位循环次数。结论：<code>x&amp;(x-1)</code>恰好删除二进制最右侧的<code>1</code>，如图。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0461-1.5yadifzt2ec0.png" alt="0461-1"></p><p>代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//移位实现计数</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token operator">^</span>y<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> temp<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为1的和，不用判断末位是否为1</span>            temp <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Brian Kernighan算法，优化移位次数</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token operator">^</span>y<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">&amp;</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除temp二进制表示最右侧的1</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>复杂度分析</p><ul><li>时间复杂度：O(logC)，其中C是元素的数据范围，本题中logC=log2<sup>31</sup>=31。优化后时间复杂度不变，但循环次数相比未优化有减少。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0504-七进制数"><a href="#0504-七进制数" class="headerlink" title="0504 七进制数"></a>0504 七进制数</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/base-7/">https://leetcode-cn.com/problems/base-7/</a></p><p><strong>方法一</strong>：进制转换</p><p>普遍规律：不断除以进制数7(几进制就除几)，直到商为0，余数倒叙即为结果。</p><p>注意：正负数和0的处理。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进制转换的普遍规律，其他进制替换7即可</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">/=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log n)，n为<code>num</code>数值。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0543-二叉树的直径"><a href="#0543-二叉树的直径" class="headerlink" title="0543 二叉树的直径"></a>0543 二叉树的直径</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/">https://leetcode-cn.com/problems/diameter-of-binary-tree/</a></p><p><strong>方法一</strong>：深度优先搜索</p><p>可以参考下<a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/yi-pian-wen-zhang-jie-jue-suo-you-er-cha-6g00/">二叉树路径问题总结</a>：</p><ul><li>自顶向下：就是从某一个节点(不一定是根节点)，从上向下寻找路径，到某一个节点(不一定是叶节点)结束</li><li>非自上而下：就是从任意节点到任意节点的路径，不需要自顶向下（如该题）</li></ul><p>根据题目可知，<strong>任意节点的最大路径为其左右子树深度和</strong>，如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0543-1.egec5lfcfug.png" alt="0543-1"></p><p>假设我们知道对于该节点左子树深度<code>L</code>和右子树深度<code>R</code>，那么经过该节点的路径长度的最大值为<code>L+R</code>。我们定义一个递归函数<code>depth(node)</code>返回以该节点为根的子树深度<code>max(L,R)+1</code>，同时计算更新最大直径<code>ans=Math.max(ans, L+R)</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//深度优先搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//二叉树的直径</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用dfs</span>        <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊条件null，返回深度为0</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以root为根的左子树和右子树深度</span>        <span class="token keyword">int</span> L<span class="token operator">=</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> R<span class="token operator">=</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新最大直径</span>        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> L<span class="token operator">+</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回以root为根的树的深度</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>为二叉树节点数。</li><li>空间复杂度：O(height)，<code>height</code>为二叉树高度。</li></ul><h2 id="0575-分糖果"><a href="#0575-分糖果" class="headerlink" title="0575 分糖果"></a>0575 分糖果</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/distribute-candies/">https://leetcode-cn.com/problems/distribute-candies/</a></p><p><strong>方法一</strong>：排序</p><p>对给定的<code>candyType</code> 数组进行排序，并通过比较排序数组的相邻元素来找出唯一的元素。对于找到的每个新元素（与前一个元素不同），我们需要更新 <code>count</code>。最后，我们可以将所需结果返回为<code>min(n/2,count)</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candyType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>candyType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candyType<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> candyType<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历糖果类型，计数小于数组长度一半时，判断分配糖果</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>candyType<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> candyType<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlog n)，排序时间。</li><li>空间复杂度：O(nlog n)，排序空间。</li></ul><p><strong>方法二</strong>：集合</p><p>利用set集合只能存放不重复元素，根据不重复元素数和n/2的最小值，分配给妹妹最大糖果种类数。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candyType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>candyType<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历糖果种类，妹妹没有且妹妹糖果数小于一半时，分配给她</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>candyType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>candyType<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candyType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candyType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> candy<span class="token operator">:</span> candyType<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> candyType<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历<code>candyType</code>一次。</li><li>空间复杂度：O(n)，最坏的情况下，set的大小为n。</li></ul><h2 id="0617-合并二叉树"><a href="#0617-合并二叉树" class="headerlink" title="0617 合并二叉树"></a>0617 合并二叉树</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/merge-two-binary-trees/">https://leetcode-cn.com/problems/merge-two-binary-trees/</a></p><p><strong>方法一</strong>：深度优先搜索</p><p><strong>可以使用深度优先搜索合并两个二叉树。从根节点开始同时遍历两个二叉树，并将对应的节点进行合并</strong>。</p><p>两个二叉树的对于节点可能存在以下三种情况，对每种情况使用不同的合并方式。</p><ul><li>两个二叉树对应节点为空，则合并后的二叉树对应节点也为空；</li><li>两个二叉树对应节点只有一个为空，则合并后二叉树对应节点为其中的非空节点；</li><li>两个二叉树的对应节点都不为空，则合并后的二叉树的对应节点值为两个对应节点的值之和。</li></ul><p>对一个节点合并之后，还要对该节点的左右子树分别进行合并。这是一个递归的过程。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//深度优先搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode root1<span class="token punctuation">,</span> TreeNode root2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//终止条件，合并两节点至少有一个为null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root1<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> root2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root2<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> root1<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//两节点都不为空，合并</span>        TreeNode newRoot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>val<span class="token operator">+</span>root2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//递归得到左右子树的合并结果</span>        newRoot<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        newRoot<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回合并结果</span>        <span class="token keyword">return</span> newRoot<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(min(m,n))，其中m，n分别是两个二叉树的节点个数。对两个二叉树同时进行深度优先搜索，只有当两个二叉树中的对应节点都不为空时才会对该节点进行显性合并操作，因此被访问到的节点数不会超过较小的二叉树的节点数。</li><li>空间复杂度：O(min(m,n))，空间复杂度取决于递归调用的层数，递归调用的层数不会超过较小的二叉树的最大高度，最坏情况下，二叉树的高度等于节点数。</li></ul><h2 id="0665-非递减数列"><a href="#0665-非递减数列" class="headerlink" title="0665 非递减数列"></a>0665 非递减数列</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/non-decreasing-array/">https://leetcode-cn.com/problems/non-decreasing-array/</a></p><p><strong>方法一</strong>：贪心</p><p><strong>贪心算法</strong></p><p>本题是维持一个非递减的数列，所以遇到递减的情况时（<code>nums[i] &gt;nums[i+1]</code>），要么将前面的元素缩小，要么将后面的元素放大。</p><p>本题的唯一<strong>易错点</strong>就在这：</p><ul><li>如果将<code>nums[i]</code>缩小，可能会导致其无法融入前面已经遍历过的非递减子数列；</li><li>如果将<code>nums[i+1]</code>放大，可能会导致其后续继续出现递减；</li></ul><p>所以要采取贪心的策略，在遍历时，每次要看连续的三个元素，也就是瞻前顾后，遵循以下两个原则：</p><ul><li>需要尽可能不放大<code>nums[i+1]</code>，这样会让后续非递减更困难；</li><li>如果缩小<code>nums[i]</code>，但不能破坏前面的子序列的非递减小；</li></ul><p><strong>算法步骤</strong>：</p><p>遍历数组，如果遇到递减：</p><ul><li>还能修改：</li><li><ul><li>修改方案一：<code>num[i-1]&lt;=nums[i]&gt;nums[i+1]</code>情况下，如果<code>i&gt;0 &amp;&amp;nums[i+1]&lt;nums[i-1]</code>，只能将<code>nums[i+1]</code>放大至<code>nums[i]</code>; </li><li>修改方案二：<code>num[i-1]&lt;=nums[i]&gt;nums[i+1]</code>情况下，else(<code>i==0 || nums[i+1] &gt;= nums[i-1]</code>)，可以将<code>nums[i]</code>缩小至<code>nums[i+1]</code>；</li></ul></li><li>不能修改了：直接返回false；</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkPossibility</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改次数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遇到下降元素，修改次数+1</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改次数用完，返回false</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改方案1，只能将nums[i+1]调大</span>                    nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改方案2，可以将nums[i]调小</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历数组一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0821-字符的最短距离"><a href="#0821-字符的最短距离" class="headerlink" title="0821 字符的最短距离"></a>0821 字符的最短距离</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/shortest-distance-to-a-character">https://leetcode-cn.com/problems/shortest-distance-to-a-character</a></p><p><strong>方法一</strong>：数组正向反向遍历</p><p>对于每个字符<code>s[i]</code>，试图找出距离向左或者向右下一个字符<code>c</code>的距离。答案就是这两个值的较小值。</p><p>算法</p><ul><li>从左向右遍历，记录上一个字符<code>c</code>出现的位置<code>pre</code>，那么答案就是<code>i-pre</code>；</li><li>从右向左遍历，记录上一个字符<code>c</code>出现的位置<code>pre</code>，那么答案就是<code>pre-i</code>，这两个值取最小值就是最终答案。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shortestToChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> answer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-2^31，防止i-pre越界MAX_VALUE，因为i>=0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从左向右遍历数组，找s中当前字符到前一个字符c的距离</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>c<span class="token punctuation">)</span> pre<span class="token operator">=</span>i<span class="token punctuation">;</span>            answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">-</span>pre<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2^31-1，pre-i不会越界，因为i>=0，但还是/2，保持协调</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从右向左遍历数组，找s中当前字符到后一个字符c的距离</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>c<span class="token punctuation">)</span> pre<span class="token operator">=</span>i<span class="token punctuation">;</span>            answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> answer<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历数组两次。</li><li>空间复杂度：O(n)，返回<code>anwser</code>数组的大小。</li></ul><h2 id="0874-模拟行走机器人"><a href="#0874-模拟行走机器人" class="headerlink" title="0874 模拟行走机器人"></a>0874 模拟行走机器人</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/walking-robot-simulation/submissions/">https://leetcode-cn.com/problems/walking-robot-simulation/submissions/</a></p><p><strong>方法一</strong>：情景模拟</p><p>总体思想：模拟机器人行走过程，计算每一步坐标点到原点的欧氏距离的平方，与保存的最大值比较，实时更新最大值。</p><p>具体考虑：</p><ul><li><strong>机器人方向调整</strong>，如坐标轴显示，方向用东<code>0</code>，南<code>1</code>，西<code>2</code>，北<code>3</code>表示，分析可知左转<code>direction = (direction+3)%4</code>，右转<code>direction = (direction+1)%4</code>；</li><li><strong>分解机器人行走</strong>，走<code>k</code>步，就是朝着一个方向走<code>k</code>次一步。走一步更新坐标的数组为<code>dx=[-1, 0, 1, 0]</code>，<code>dy=[0, -1, 0, 1]</code>，数组下标<code>0-4</code>分别表示方向为东、南、西、北。下一步坐标<code>nextX=curX+dx[direction]</code>，<code>nextY=curY+dy[direction]</code>；</li><li><strong>判断障碍物</strong>，障碍物有多个，所以需要一个障碍物坐标点集合<code>Set&lt;Pair&lt;Integer, Integer&gt;&gt;</code>。机器人每试图走一个位置，就检测是否为障碍物点。<ul><li> 不是，则“可以走到这个点”，更新机器人坐标<code>curX</code>，<code>curY</code>，更新距离结果;</li><li>是障碍物，不走下一步，停留当前，执行下一条命令。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/0874-1.71ysj70309g0.png" alt="0874-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">robotSim</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> commands<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obstacles<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//东0、南1、西2、北3</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//东0、南1、西2、北3</span>        <span class="token keyword">int</span> curX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> curY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> direction<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化位置</span>        <span class="token keyword">int</span> nextX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> nextY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一步坐标</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化距离结果</span>        <span class="token comment" spellcheck="true">//将障碍物坐标放到Set集合中</span>        Set<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> obstacleSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>obstacles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            obstacleSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>obstacles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obstacles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//执行命令</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>commands<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>commands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//right</span>                direction <span class="token operator">=</span> <span class="token punctuation">(</span>direction<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>commands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//left</span>                direction <span class="token operator">=</span> <span class="token punctuation">(</span>direction<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//move</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>commands<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一步一步移动</span>                    nextX <span class="token operator">=</span> curX<span class="token operator">+</span>dx<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nextY <span class="token operator">=</span> curY<span class="token operator">+</span>dy<span class="token punctuation">[</span>direction<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obstacleSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>nextX<span class="token punctuation">,</span>nextY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一步不为障碍物，更新位置和结果</span>                        curX <span class="token operator">=</span> nextX<span class="token punctuation">;</span>                        curY <span class="token operator">=</span> nextY<span class="token punctuation">;</span>                        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> curX<span class="token operator">*</span>curX<span class="token operator">+</span>curY<span class="token operator">*</span>curY<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一步为障碍物，退出</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(N+K)，其中N，K分别是commands和obstacles的长度。</li><li>空间复杂度：O(K)，用于存储obstacleSet而使用的空间。</li></ul><h2 id="1128-等价多米诺骨牌对的数量"><a href="#1128-等价多米诺骨牌对的数量" class="headerlink" title="1128 等价多米诺骨牌对的数量"></a>1128 等价多米诺骨牌对的数量</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/number-of-equivalent-domino-pairs/">https://leetcode-cn.com/problems/number-of-equivalent-domino-pairs/</a></p><p><strong>方法一</strong>：哈希表解法</p><p><code>dominoes</code>中值的范围是<code>[1,9]</code>，因此可以使用单个骨牌的两个数构建一个范围在<code>[11,99]</code>的数。这里让较小的数作为十位数，较大的数作为个位数。这样就实现了两个等效的骨牌对应的是同一个数。</p><p>构造出来的数作为<code>key</code>，统计每类骨牌出现的次数<code>value</code>。当使用哈希表统计之后，对于<code>value&gt;=2</code>的骨牌，根据骨牌出现的次数，使用等差数列求和公式来计算对数：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/1128-1.45gkxk7ugk00.png" alt="1128-1"></p><p>注意：数量为<code>cnt</code>的骨牌，对数的项数为<code>cnt-1</code>。题目要求<code>0=&lt;i&lt;j=dominoes.length</code>，如<code>value=4</code>时，次数为<code>3+2+1</code>(画一排圆圈理解下)。</p><p>补充：等比数列求和</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/1128-2.39zr3zv5fjw0.png" alt="1128-2"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dominoes<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dominoe <span class="token operator">:</span> dominoes<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用map统计每类骨牌的出现次数，key为骨牌种类，value为次数</span>            k <span class="token operator">=</span> dominoe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> dominoe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> dominoe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>dominoe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> dominoe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> dominoe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//key = Math.max(dominoe[0], dominoe[1])*10 + Math.min(dominoe[0],dominoe[1]);</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历每类骨牌，统计等效骨牌数量</span>            val <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans <span class="token operator">+=</span> <span class="token punctuation">(</span>val<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>val<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>val<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历数组一次。</li><li>空间复杂度：O(n)，最坏情况，没有等价骨牌，每块骨牌在哈希表中占用一个key。</li></ul><p><strong>方法二</strong>：数组解法</p><p>哈希表的键和值都是整数，并且键表示的两位整数的范围是[11, 99] ，我们可以用数组代替哈希表，数组的下标就对应了原来使用的哈希表的键。</p><p>在遍历的时候使用加法：每遍历到一个在哈希表(数组)中已经存在的骨牌（0次也认为已存在），就给计数器加上此时这个骨牌在哈希表中已经记录的数量，因为当前这个骨牌和已经存在的骨牌中的每一个都等价，然后给对应哈希表（数组）中已经存在的骨牌数+1。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numEquivDominoPairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dominoes<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组代替哈希表，下标key，数组值value，初始化89，key都减去11可省一点内存</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dominoe <span class="token operator">:</span> dominoes<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历骨牌，结果加上该类骨牌出现次数，该类骨牌出现次数+1</span>            key <span class="token operator">=</span> dominoe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> dominoe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> dominoe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>dominoe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> dominoe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> dominoe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历多米诺骨牌一次。</li><li>空间复杂度：O(1)，进行计数的数组长度固定。</li></ul><h2 id="1260-二维网格迁移"><a href="#1260-二维网格迁移" class="headerlink" title="1260 二维网格迁移"></a>1260 二维网格迁移</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/shift-2d-grid/description/">https://leetcode-cn.com/problems/shift-2d-grid/description/</a></p><p><strong>方法一</strong>：模拟</p><p>重复<code>k</code>次迁移操作。每次的迁移过程一共有3种情况：</p><ul><li><strong>不是最后一列</strong>，直接往后移动一位；</li><li><strong>最后一列且非最后一个元素</strong>，移动到下一行的第一个元素；</li><li><strong>右下角最后一个元素</strong>，移动到头部，左上角；</li></ul><p>按照这种规则迁移k次，每次创建一个二维数组用于完成迁移，在Java中，迁移完成后需要将二维数组转化为二维列表。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/1260-1.390ztw93bx40.png" alt="1260-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">shiftGrid</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历执行k次迁移</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newGrid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次创建一个新数组</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//情况1：非最后一列</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        newGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//情况2：最后一列，非右下角</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        newGrid<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//情况3：右下角元素</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>grid<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">==</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        newGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            grid <span class="token operator">=</span> newGrid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新数组</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//转为指定格式输出</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> grid<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> rowList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> row<span class="token punctuation">)</span> rowList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rowList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nmk)，其中<code>nm</code>是元素数量，共迁移<code>k</code>次。</li><li>空间复杂度：O(nm)，每次迁移时需要创建一个新数组。</li></ul><p><strong>方法二</strong>：模拟+原地迁移</p><p>方法一创建了<code>k</code>个新的数组，本方法使用原地迁移简化迁移过程。首先了解单个元素在数组中的移动，这是一种简单的移动模式，按照箭头顺序移动，到达右下角后，再绕回左上角。</p><p>同样迁移k次，每次迁移时，记录当前位置的值供下一个位置使用。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/1260-2.4apxec9ekn00.png" alt="1260-2"></p><p>在<code>Java</code>中，最后需要将输出复制到二维列表中操作，如果想在自己的代码中实现原地操作，可以设置相同的输入输出类型。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">shiftGrid</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历执行k次迁移</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> grid<span class="token punctuation">[</span>grid<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录末尾元素</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录当前元素</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新当前元素</span>                    pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//转为指定格式输出</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> grid<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> rowList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> row<span class="token punctuation">)</span> rowList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rowList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nmk)，其中<code>nm</code>是元素数量，共迁移<code>k</code>次。</li><li>空间复杂度：</li><li><ul><li>如果输入输出类型相同，O(1)</li><li>如果输出输出类型不同，O(n*m)</li></ul></li></ul><p><strong>方法三：</strong>取模运算</p><p>注意：该方法使用模运算，这可能是一个“中等”级别的解法。</p><p>该问题要求<code>k&lt;=100</code>，当问题规模如此小时，使用模拟算法没有任何问题。但是如果k非常大，或者面试官要求运行时间不能说<code>O(knm)</code>，必须要<code>O(nm)</code>时，就需要进一步优化解法。</p><p>二维数组移动的问题上，除了模拟方法，直接计算元素迁移后的新位置更加高效。计算新位置分为两步：</p><ul><li>什么是新列？</li><li>什么是新行？</li></ul><p>通过一个例子说明如何完成这两个步骤。在一个<code>3</code>行<code>5</code>列的网格中，位于<code>i=1</code>和<code>j=3</code>处的值，迁移次数<code>k=88</code>。</p><p><strong>第一步：计算新列数</strong></p><p><code>k</code>步迁移后，列值供改变<code>k</code>次，每一步，都往后移动一列。由于网格不是无限的，需要考虑“环绕”问题，移动<code>88</code>次，每移动<code>5</code>次会回到原本的列，因此需要一直减去<code>5</code>，直到结果小于<code>5</code>，这就是模运算的工作。<code>(3+88)%5 = 1</code>，因此该列的新值为<code>1</code>。</p><p><strong>第二步：计算新行数</strong></p><p>现在需要确定该元素的新行。行的改变不像列那么频繁，最后一列移动到第一列时，行才会移动一次。因此确定行的新值，需要确定从最后一列移动到第一列的次数。</p><p>上面的例子中，计算新列使用到了<strong>余数</strong>，即<code>91%5</code>，计算新行使用的是<strong>商</strong>，<code>91/5=18</code>，行移动<code>18</code>次，行不是无限的，因此新行为<code>(1+18)%3=1</code>，最终新行为<code>1</code>。</p><p><strong>一般性公式</strong></p><p>新列：<code>new_col = (j+k)%num_cols</code>；</p><p>新行：<code>number_of_increments = (j + k) / num_cols</code>；</p><p><code>new_row = (i + number_of_increments) % num_rows</code>；</p><p>即：<code>new_row = (i+(j+k)/num_cols)%num_rows</code>；</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">shiftGrid</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numRows <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> numCols <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化二维List，元素值为0</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numRows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> rowList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>numCols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> rowList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rowList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历grid，根据新行和新列，修改List</span>        <span class="token keyword">int</span> newRows <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> newCols <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numRows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>numCols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                newCols <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">%</span>numCols<span class="token punctuation">;</span>                newRows <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">/</span>numCols<span class="token punctuation">)</span><span class="token operator">%</span>numRows<span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>newRows<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newCols<span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nm)，其中网格数量为nm，计算每个元素的新位置花费O(1)的时间，一般情况下，无法再提高其效率，因为每个元素都要移动。</li><li>空间复杂度：O(nm)，存储输出二维列表。</li></ul><h2 id="1332-删除回文子序列"><a href="#1332-删除回文子序列" class="headerlink" title="1332 删除回文子序列"></a>1332 删除回文子序列</h2><p><strong>题目地址:</strong><a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences/">https://leetcode-cn.com/problems/remove-palindromic-subsequences/</a></p><p><strong>方法一</strong>：规律法</p><p>本题其实没有你想象的那么复杂，通过反复测试，你可以发现最终返回结果仅有<code>3</code>个，分别为<code>0,1,2</code>！！！非常巧妙。</p><ul><li>0：字符串s为空；</li><li>1：字符串s本身为回文序列</li><li>2：排除上述情况的所有情况</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removePalindromeSub</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s为空，直接返回0，删除次数为0</span>        <span class="token comment" spellcheck="true">//遍历检测s是否为回文串</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不是回文串，删除次数为2</span>                <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s本身为回文串，删除次数为1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历字符串。</li><li>空间复杂度：O(1)。</li></ul><h2 id="Offer11-旋转数组的最小数字"><a href="#Offer11-旋转数组的最小数字" class="headerlink" title="Offer11 旋转数组的最小数字"></a>Offer11 旋转数组的最小数字</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/</a></p><p><strong>方法一</strong>：二分查找</p><p>一个包含重复元素的升序数组在经过旋转之后，可以得到下面可视化的折线图。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/offer11-1.46xr2pc8a1w0.png" alt="offer11-1"></p><p>二分查找时与右端点比较，有三种情况</p><ul><li><code>numbers[mid]&gt;numbers[right]</code>，说明<code>numbers[mid]</code>是最小值左侧元素，忽略二分查找左半区间<code>left=mid+1</code>；</li><li><code>numbers[mid]&lt;numbers[right]</code>，说明<code>numbers[mid]</code>是最小值右侧元素，忽略二分查找右半区间<code>right=mid</code>；</li><li><code>numbers[mid]==numbers[right]</code>，<strong>由于重复元素的存在，我们无法判断<code>numbers[mid]</code>在最小值的左侧还是右侧</strong>，我们唯一可以确定的是，由于它们值相等，所有无论<code>numbers[right]</code>是否为最小值，都有它的一个「替代品」<code>numbers[mid]</code>，因此我们可以忽略二分查找的右端点。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二分查找</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid处大于右端点，忽略左区间</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid处小于右端点，忽略右区间</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid处等于右端点（无法判断最小值在左还是右区间），但忽略右端点</span>                right <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：平均为O(logn)，其中<code>n</code>为<code>numbers</code>数组长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="Offer17-打印从1到最大的n位数"><a href="#Offer17-打印从1到最大的n位数" class="headerlink" title="Offer17 打印从1到最大的n位数"></a>Offer17 打印从1到最大的n位数</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/">https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/</a></p><p><strong>方法一</strong>：dfs/全排列</p><p>打印“从<code>1</code>到最大的<code>n</code>位数的列表”，需要考虑两个问题：</p><ul><li><strong>最大的<code>n</code>位数(记为<code>end</code>)和位数<code>n</code>的关系</strong>：end=10<sup>n</sup>-1；</li><li><strong>大数越界问题</strong>：当<code>n</code>较大时，<code>end</code>会超出<code>int32</code>整型的取值范围。本题要求返回<code>int</code>数组，相当于默认不越界。</li></ul><p>默认不越界只需要定义区间长度为10<sup>n</sup>-1的数组，通过循环赋值即可。时间复杂度O(10<sup>n</sup>)，空间复杂度O(1)。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">printNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>大数打印解法：在数字很大的情况下，哪怕<code>long</code>类型也无法承载，必须要有字符串保存。对于本题其实就是<code>n</code>位数的数字<code>0-9</code>的全排列，注意开头不能为<code>0</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/offer17-1.6jze3th5m3k0.png" alt="offer17-1"></p><p><strong>为了测试通过</strong>，把字符串转为了<code>int</code>类型，其实应该返回<code>String</code>数组。</p><ul><li><p>为了避免数字开头出现<code>0</code>，先把收尾<code>first</code>固定，<code>first</code>取值范围<code>1-9</code>；</p></li><li><p>用<code>digit</code>表示要生成的数字的位数，本题从<code>1</code>位数一直生成到<code>n</code>位数，对每种数字的位数都生成一下首位，所以是双重<code>for</code>循环；</p></li><li><p>生成首位之后，递归剩下的<code>digit-1</code>位数，从<code>0-9</code>中取值；</p></li><li><p>递归的终止条件为已经生成了<code>digit</code>位数字，即<code>index==digit</code>，将此时的<code>num</code>转为<code>int</code>加到结果<code>res</code>中。</p></li><li><p>**高位多余的<code>0</code>**；</p></li><li><p><strong>列表从<code>0</code>开始，而题目要求从<code>1</code>开始</strong>。</p></li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符串大数，为了测试返回int[]</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果数组和索引</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//String[] res;</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">printNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//res = new String[(int)Math.pow(10,n)-1];</span>        <span class="token comment" spellcheck="true">//1-n位数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> digit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> digit<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> digit<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置首位数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> first<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span> first<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">;</span> first<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">;</span>                num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>first<span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//满足生成位数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>digit<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//res[count++] = String.valueOf(num);</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//递归生成剩余digit-1位数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            num<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(10<sup>n</sup>)，全排列1到10<sup>n</sup>-1都遍历一遍。</li><li>空间复杂度：O()，递归的最大深度和数组的最大长度都为<code>n</code>，算返回值的话为O(10<sup>n</sup>)。</li></ul><h2 id="Offer29-顺时针打印矩阵"><a href="#Offer29-顺时针打印矩阵" class="headerlink" title="Offer29 顺时针打印矩阵"></a>Offer29 顺时针打印矩阵</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/</a></p><p><strong>方法一</strong>：按层模拟</p><p>设置死循环，从外层顺时针依次遍历，不断修改遍历方向，直到遍历完成。</p><ul><li>首先设定上下左右边界；</li><li>其次<code>向右移动</code>，此时第一行已使用，可以删去，体现在在新设置上边界，判断上下边界是否交错，如果交错，遍历结束，跳出循环，返回答案；</li><li>修改遍历方向为<code>向下移动</code>，此时最后一列已使用，设定右边界，判断遍历是否结束；</li><li>继续依次修改遍历方向为<code>向左、向右移动</code>，设定下、左边界，判断遍历是否结束。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/offer-29.6vlrjxx70ng0.png" alt="offer-29"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token operator">==</span>null <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设定上下左右边界</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建结果数组和索引</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>bottom<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开始遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移动到最右端</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>top<span class="token operator">></span>bottom<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新设置上边界，若上边界大于下边界，则遍历完成，下同</span>            <span class="token comment" spellcheck="true">//移动到最下端</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>top<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>bottom<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>right<span class="token operator">&lt;</span>left<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新设置右边界</span>            <span class="token comment" spellcheck="true">//移动到最左端</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>right<span class="token punctuation">;</span> i<span class="token operator">>=</span>left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>bottom<span class="token operator">&lt;</span>top<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新设置下边界</span>            <span class="token comment" spellcheck="true">//移动到最上端</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>bottom<span class="token punctuation">;</span> i<span class="token operator">>=</span>top<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>left<span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新设置左边界</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mn)，<code>m</code>和<code>n</code>为矩阵的行列数。</li><li>空间复杂度：O(1)，除了结果数组以外，空间复杂度为常数。</li></ul><h2 id="Offer53-Ⅰ在排序数组中查找数字"><a href="#Offer53-Ⅰ在排序数组中查找数字" class="headerlink" title="Offer53-Ⅰ在排序数组中查找数字"></a>Offer53-Ⅰ在排序数组中查找数字</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/</a></p><p><strong>方法一</strong>：二分查找</p><p>标准二分查找+简单处理。</p><p>一个朴素的想法是，二分找到目标值<code>target</code>下标，然后从目标值位置向左向右遍历查找进行数量统计。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 二分查找+简单处理</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到目标值</span>                <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向左查找等于目标值</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">==</span>t<span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向右统计等于目标值</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">==</span>t<span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回结果</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="Offer53-Ⅱ-0-n-1中缺失的数字"><a href="#Offer53-Ⅱ-0-n-1中缺失的数字" class="headerlink" title="Offer53-Ⅱ 0~n-1中缺失的数字"></a>Offer53-Ⅱ 0~n-1中缺失的数字</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/">https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/</a></p><p><strong>方法一</strong>：二分查找</p><p>排序数组中的搜索问题，首先想到<strong>二分法</strong>解决。</p><p>根据题意，数组可以按照以下规则划分为两部分：</p><ul><li><strong>左子数组</strong>：<code>nums[i]=i</code>。</li><li><strong>右子数组</strong>：<code>nums[i]≠i</code>。</li></ul><p>缺失的数字等于<strong>右子数组的首位元素对应的索引</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/offer53%E2%85%A1-1.769yzmkdiy00.png" alt="offer53Ⅱ-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二分查找</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束条件包含等号</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>mid<span class="token punctuation">)</span> left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引等于数字，左边界右移</span>            <span class="token keyword">else</span> right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引不等于数字，右边界左移</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="Offer54-二叉搜索树的第k大节点"><a href="#Offer54-二叉搜索树的第k大节点" class="headerlink" title="Offer54 二叉搜索树的第k大节点"></a>Offer54 二叉搜索树的第k大节点</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/</a></p><p><strong>方法一</strong>：中序遍历倒序+提前返回</p><p>二叉搜索树中序遍历为递增序列，根据该性质<strong>易得二叉树中序遍历倒序为递减序列。</strong>因此求二叉搜索树中第<code>k</code>大的节点<strong>转化为</strong>求中序遍历倒序的第<code>k</code>个节点。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/offer54-1.7bw0q0fno1s0.png" alt="offer54-1"></p><p>为求第<code>k</code>个节点，需要实现一下三项工作：</p><ul><li>递归遍历时计数，统计当前节点的序号；</li><li>递归到第<code>k</code>个节点时，应记录结果<code>res</code>；</li><li>记录结果后，后续遍历即失去意义，应提前终止。</li></ul><p><strong>题目指出</strong><code>1≦k≦N</code>(二叉搜索树节点个数)，因此无需考虑<code>k&gt;N</code>的情况。若考虑，可以在中序遍历完成后判断<code>k&gt;0</code>是否成立，若成立则说明<code>k&gt;N</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果记录res和计数k</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k<span class="token operator">=</span>k<span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//中序遍历倒序</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历到第k个节点记录，提前返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token operator">=</span>root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(k)，中序遍历倒序到第<code>k</code>个节点返回。</li><li>空间复杂度：O(height)，递归栈为树的高度。</li></ul><h2 id="Offer55-Ⅱ-平衡二叉树"><a href="#Offer55-Ⅱ-平衡二叉树" class="headerlink" title="Offer55-Ⅱ 平衡二叉树"></a>Offer55-Ⅱ 平衡二叉树</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/">https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/</a></p><p><strong>方法一</strong>：遍历+判断深度</p><p>方案一：先序遍历 + 判断深度 （<strong>从顶至底</strong>），<code>O(nlog n)</code>和<code>O(height)</code>，此方法容易想到，但会产生大量重复计算，时间复杂度较高。方法是构造一个获取当前子树深度的函数，通过比较左右子树的深度差<code>Math.abs(depth(root.left)-depth(root.right)) &lt;= 1</code>是否成立，来判断是否为二叉平衡树，若所有子树都平衡，则此树平衡。</p><p>具体做法：</p><ul><li><strong>特例处理</strong>：若根节点为空，直接返回<code>true</code>；</li><li><strong>返回值</strong>：所有子树都需要满足平衡树性质，使用三种逻辑<code>&amp;&amp;</code>连接；</li><li><ul><li><code>Math.abs(depth(root.left)-depth(root.right)) &lt;= 1</code>：<strong>当前子树</strong>是否平衡；</li><li><code>isBanced(root.left)</code>：先序遍历递归，判断<strong>当前子树的左子树</strong>是否是平衡树；</li><li><code>isBanced(root.right)</code>：先序遍历递归，判断<strong>当前子树的右子树</strong>是否是平衡树。</li></ul></li></ul><p>方案二：后序遍历 + 剪枝 （<strong>从底至顶</strong>），<code>O(n)</code>和<code>O(height)</code>，此方案为最优解法。思路是对二叉树做后序遍历，从底至顶返回子树深度，若判定某子树不是平衡树则<strong>剪枝</strong>，直接向上返回。</p><p>具体做法：</p><p><code>recur(root)</code>函数：</p><ul><li><p><strong>返回值</strong>：</p></li><li><ul><li>当节点<code>root</code>的左右子树深度差<code>≦1</code>：则返回当前子树的深度<code>Math.max(left, right)+1</code>；</li><li>当节点<code>root</code>左右子树的深度差<code>&gt;2</code>：则返回<code>-1</code>，<strong>代表此子树不是平衡树</strong>。</li></ul></li><li><p><strong>终止条件</strong>：</p></li><li><ul><li>当<code>root</code>为空：说明超过叶子节点，返回高度<code>0</code>； </li><li>当左/右子树深度为<code>-1</code>：说明<strong>此树的左/右子树不是平衡树</strong>，因此剪枝，直接返回<code>-1</code>；</li></ul></li></ul><p><strong><code>isBalanced(root)</code>函数</strong>：</p><ul><li>返回值：若<code>recur(root)!=-1</code>，则说明此树平衡，返回<code>true</code>，否则返回<code>false</code>。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//先序遍历+判断深度（从顶到底），非最优方案</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特例，root为空，返回true</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//先序遍历判断深度</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取当前节点的深度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后序遍历+剪枝（从底到顶），最优方案</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非-1为平衡树，-1为非平衡树</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从底到顶得到树的高度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特例</span>        <span class="token keyword">int</span> leftHeight <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>leftHeight<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//root.left不是平衡树，剪枝</span>        <span class="token keyword">int</span> rightHeight <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightHeight<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//root.right不是平衡树，剪枝</span>        <span class="token comment" spellcheck="true">//满足平衡返回root高度，否则返回-1</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftHeight<span class="token operator">-</span>rightHeight<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftHeight<span class="token punctuation">,</span> rightHeight<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>不分析，见方案说明。</li></ul><h2 id="Offer57-Ⅱ-和为s的连续正数序列"><a href="#Offer57-Ⅱ-和为s的连续正数序列" class="headerlink" title="Offer57-Ⅱ 和为s的连续正数序列"></a>Offer57-Ⅱ 和为s的连续正数序列</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/">https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/</a></p><p><strong>方法一</strong>：滑动窗口</p><p>要用滑动窗口解这道题，首先要回答两个问题：</p><ul><li>第一个问题，窗口何时扩大，何时缩小？</li><li>第二个问题，滑动窗口能找到全部的解吗？</li></ul><p>对于问题一，很简单：</p><ul><li>当窗口的和小于<code>target</code>时，窗口的和需要增加，所以要扩大窗口，窗口的右边界向右移动；</li><li>当窗口的和大于<code>target</code>时，窗口的和需要减少，所以要缩小窗口，窗口的左边界向右移动；</li><li>当窗口和恰好等于<code>target</code>时，我们记录结果。假设此时窗口为<code>[i,j)</code>开头，接下来要找<code>i+1</code>开头的序列，所以窗口的左边界要向右移动。</li></ul><p>对于问题二，可以证明用滑动窗口一定可以得到所有解，这里不证明。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/offer57-1.6kt85g9i1800.png" alt="offer57-1"></p><p><strong>注：这道题当前可以用等差数列的求和公式来计算滑动窗口的和。不过我这里没有使用求和公式，是为了展示更通用的解题思路。实际上，把题目中的正整数序列换成任意的递增整数序列，这个方法都可以解。</strong></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//滑动窗口</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动窗口的左右边界</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//滑动窗口中的数字和[left, right)</span>        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>target<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右边界向右移动</span>                sum <span class="token operator">+=</span> right<span class="token punctuation">;</span>                right<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左边界向右移动</span>                sum <span class="token operator">-=</span> left<span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录结果</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>right<span class="token operator">-</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token operator">-</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//左边界向右移动</span>                sum <span class="token operator">-=</span> left<span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(target)，两个指针单调不减，最多移动<code>target/2</code>次。</li><li>空间复杂度：O(1)，除了答案数组外只需要若干变量。</li></ul><h2 id="Offer58-Ⅰ-翻转单词顺序"><a href="#Offer58-Ⅰ-翻转单词顺序" class="headerlink" title="Offer58-Ⅰ 翻转单词顺序"></a>Offer58-Ⅰ 翻转单词顺序</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/">https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/</a></p><p><strong>方法一</strong>：双指针</p><p>首先，删除字符串<code>s</code>的首尾空格，然后倒序遍历字符串进行操作</p><ul><li>记录单词的左右索引边界left，right；</li><li>每确定一个单词的边界，将其添加到StringBuilder的末尾；</li><li>最终，将单词列表拼接为翻转单词字符串，返回即可。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//双指针，指向单词范围</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">reverseWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除首尾空格</span>        <span class="token keyword">int</span> left<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">=</span>left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双指针标识单词范围</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">' '</span><span class="token punctuation">)</span> left<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//搜索首个空格，表示当前单词结束</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加单词</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span> left<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳过单词间空格，找到下一个单词的末尾</span>            right <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//right指向下个单词的尾字符</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return sb.toString().trim();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中<code>n</code>为字符串<code>s</code>的长度。</li><li>空间复杂度：O(n)，拼接结果字符串所需空间。</li></ul><h2 id="Offer61-扑克牌中的顺子"><a href="#Offer61-扑克牌中的顺子" class="headerlink" title="Offer61  扑克牌中的顺子"></a>Offer61  扑克牌中的顺子</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/">https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/</a></p><p><strong>方法一</strong>：集合Set/排序</p><p>根据题意，此<code>5</code>张牌是顺子的<strong>充分条件</strong>如下：</p><ul><li>除大小王外，所有牌<strong>无重复</strong>；</li><li>设此<code>5</code>张牌中最大的牌为<code>max</code>，最小的牌为<code>min</code>(大小王除外)，<strong>则需满足</strong><code>max-min&lt;5</code>。</li></ul><p><strong>集合Set+遍历</strong></p><ul><li>遍历五张牌，遇到大小王（即<code>0</code>）直接跳过；</li><li><strong>判别重复</strong>：利用Set实现遍历判重；</li><li><strong>获取最大/最小的牌</strong>：借助辅助遍历<code>max</code>和<code>min</code>，遍历统计即可。</li></ul><p><strong>排序+遍历</strong></p><ul><li>先对数组排序；</li><li><strong>判别重复</strong>：排序数组中的相同元素位置相邻，因此可通过遍历数组，判断<code>nums[i]=nums[i+1]</code>是否成立来判重。</li><li><strong>获取最大/最小的牌</strong>：排序后，<code>max=nums[4]</code>；<code>min=num[joker]</code>，其中<code>joker</code>为大小王的数量。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">///集合Set+遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStraight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳过大小王</span>            min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新最小牌</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新最大牌</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若有重复，提前返回false</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入当前牌到set</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token operator">-</span>min<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//max-min&lt;5，即可构成顺子</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排序+遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStraight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组排序</span>        <span class="token keyword">int</span> joker<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//统计大小王数量，即为最小值索引</span>                joker<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若有重复，提前返回false</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>joker<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//max-min&lt;5，即可构成顺子</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：数组元素为<code>5</code>个，两种方法均为O(1)。</li><li>空间复杂度：两种方法均为O(1)。</li></ul><h2 id="Offer62-圆圈中最后剩下的数字"><a href="#Offer62-圆圈中最后剩下的数字" class="headerlink" title="Offer62  圆圈中最后剩下的数字"></a>Offer62  圆圈中最后剩下的数字</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/</a></p><p><strong>方法一</strong>：数学</p><p>这是个「约瑟夫环问题」。</p><p>数学+递归</p><p>我们将问题建模为函数<code>f(n,m)</code>，该函数返回最终留下的元素的序号。</p><p>首先，长度为<code>n</code>的序列会首先删除第<code>m%n</code>个元素，然后剩下长度为<code>n-1</code>的序列。那么我们可以递归地求解<code>f(n-1,m)</code>，就可以直到对于剩余<code>n-1</code>个元素，最终会留下第几个元素，我们设答案为<code>x=f(n-1,m)</code>。</p><p>由于我们删除了第<code>m%n</code>个元素，将序列长度变为<code>n-1</code>。当我们知道了<code>f(n-1,m)</code>对应答案<code>x</code>之后，我们也就知道长度为<code>n</code>的序列最后一个删除的元素，就是从<code>m%n</code>开始数的第<code>x</code>个元素，因此有<code>f(n, m) = (m % n + x) % n = (m + x) % n</code>。</p><p>数学+迭代</p><p>该方法可以转为迭代，避免递归使用栈空间，具体操作参考<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/">这篇解析</a>。仅有一个元素时，最后剩余元素为<code>0</code>，从两个元素开始反推，一直反推到<code>n</code>个元素，反推公式为<code>(当前index+m)%上一轮剩余数字的个数</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数学+递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>m<span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数学+迭代</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token operator">%</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//核心递推公式</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：迭代递归均O(n)。</li><li>空间复杂度：递归O(n)，迭代O(1)。</li></ul><h2 id="Offer65-不用加减乘除做加法"><a href="#Offer65-不用加减乘除做加法" class="headerlink" title="Offer65  不用加减乘除做加法"></a>Offer65  不用加减乘除做加法</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/">https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/</a></p><p><strong>方法一</strong>：位运算</p><p>本题考察位运算的灵活使用，即使用位运算实现加法。设两数字的二进制形式<code>a,b</code>，其求和<code>s=a+b</code>，<code>a(i)</code>代表<code>a</code>的二进制第i位，则分以下四种情况：</p><table><thead><tr><th>a(i)</th><th>b(i)</th><th>无进位和n(i)</th><th>进位c(i+1)</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>观察发现，「无进位和」与「异或运算」规律相同，「进位」和「与运算」规律相同（并需要左移一位）。因此，无进位和<code>n</code>」与「进位<code>c</code>」的计算公式为：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-easy/offer65-1.2us70i2e1qi0.png" alt="offer65-1"></p><p>（和<code>s</code>）=（非进位和<code>n</code>）+（进位<code>c</code>）。即转化求和<code>s=a+b⇒s=n+c</code>。循环求<code>n</code>和<code>c</code>，直到进位<code>c=0</code>；此时<code>s=n</code>返回<code>n</code>即可。</p><p><strong>Q</strong> ： 若数字 <code>a</code> 和 <code>b</code> 中有负数，则变成了减法，如何处理？<br><strong>A</strong> ： 在计算机系统中，数值一律用 补码 来表示和存储。<strong>补码的优势</strong>： 加法、减法可以统一处理（<code>CPU</code>只有加法器）。因此，以上方法同时适用于正数和负数的加法 。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//位运算</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进位为0时，结束循环</span>            <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进位和</span>            a <span class="token operator">^=</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非进位和</span>            b <span class="token operator">=</span> carry<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新要加的数，即进位和</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)，最差情况下（a=0x7fffffff，b=1），需要循环32次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="Offer68-Ⅰ-二叉搜索树的最近公共祖先"><a href="#Offer68-Ⅰ-二叉搜索树的最近公共祖先" class="headerlink" title="Offer68-Ⅰ  二叉搜索树的最近公共祖先"></a>Offer68-Ⅰ  二叉搜索树的最近公共祖先</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/">https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/</a></p><p><strong>方法一</strong>：迭代</p><p>根据以上定义，若 <code>root</code>是 <code>p,q </code>的 最近公共祖先 ，则只可能为以下情况之一：</p><ul><li><code>p</code> 和 <code>q</code> 在 <code>root</code> 的子树中，且分列 <code>root</code>的 异侧（即分别在左、右子树中）；</li><li><code>p = root</code>，且 <code>q</code> 在 <code>root</code> 的左或右子树中；</li><li><code>q=root</code>，且 <code>p</code> 在 <code>root </code>的左或右子树中；</li></ul><p>本题给了两个重要条件，① 树为<strong>二叉搜索树</strong>，②树的所有节点的<strong>值都是唯一的</strong>。根据以上条件，可以方便的判断<code>p,q</code>与<code>root</code>的关系。</p><ul><li>若<code>root.val&lt;p.val</code>，则<code>p</code>在<code>root</code>的右子树中；</li><li>若<code>root.val&gt;p.val</code>，则<code>p</code>在<code>root</code>的左子树中；</li><li>若<code>root.val==p.val</code>，则<code>p</code>和<code>root</code>指向同一节点。</li></ul><p>迭代方案，循环搜索，当节点<code>root</code>为空时跳出</p><ul><li>当<code>p,q</code>都在<code>root</code>的右子树中，遍历至<code>root.right</code>；</li><li>否则，当<code>p,q</code>都在<code>root</code>的左子树中，则遍历至<code>root.left</code>；</li><li>否则说明找到了最近公共祖先，跳出。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//迭代</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p,q都在右子树，遍历到右子树</span>                root<span class="token operator">=</span>root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">></span>p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val<span class="token operator">></span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p,q都在左子树，遍历到左子树</span>                root<span class="token operator">=</span>root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p,q分布在root两侧，最近公共祖先就为root</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优化，若可保证p.val&lt;q.val，则在循环中可减少判断条件</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">></span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保证 p.val &lt; q.val</span>            TreeNode temp <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的右子树中</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至右子节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的左子树中</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至左子节点</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>为二叉树的节点数，最差情况下退化为链表。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：递归</p><p>递归方案，<code>root</code>为空直接返回：</p><ul><li><code>p,q</code>在右子树，递归到右子树查找；</li><li><code>p,q</code>在左子树，递归到左子树查找；</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//递归到右子树查找</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">></span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//递归到左子树查找</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，递归一次排除一层，最小为<code>log n</code>（满二叉树），最大为<code>n</code>（退化为链表）</li><li>空间复杂度：O(height)，递归深度为二叉树高度。</li></ul><h2 id="Offer68-Ⅱ-二叉树的最近公共祖先"><a href="#Offer68-Ⅱ-二叉树的最近公共祖先" class="headerlink" title="Offer68-Ⅱ  二叉树的最近公共祖先"></a>Offer68-Ⅱ  二叉树的最近公共祖先</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/">https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/</a></p><p><strong>方法一</strong>：先序遍历</p><p>考虑通过递归对二叉树进行先序遍历，当遇到节点<code>p</code>或<code>q</code>、<code>root</code>为空时返回。从底至顶回溯，当节点<code>p,q</code>在节点<code>root</code>的异侧时，节点<code>root</code>即为最近公共祖先，向上返回<code>root</code>。</p><p>递归解析</p><ul><li><p><strong>终止条件</strong>：</p></li><li><ul><li>当越过叶节点，则直接返回<code>null</code>；</li><li>当<code>root</code>等于<code>p,q</code>，则直接返回<code>root</code>；</li></ul></li><li><p><strong>递推工作</strong>：</p></li><li><ul><li>递归左子节点，返回最近公共祖先记为<code>left</code>；</li><li>递归右子节点，返回返回最近公共祖先记为<code>right</code>；</li></ul></li><li><p>返回值：根据<code>left</code>和<code>right</code>，可分为四种情况</p></li><li><ul><li><p>一，<code>left</code>和<code>right</code>同时为空，说明<code>root</code>的左右子树中都不包含<code>p,q</code>，返回<code>null</code>；</p></li><li><p>二，<code>left</code>和<code>right</code>都不为空，说明<code>p,q</code>分布在<code>root</code>的异侧，因此<code>root</code>为最近公共祖先，返回<code>root</code>；</p></li><li><p>三，<code>left</code>为空，<code>right</code>不为空，说明<code>p,q</code>都不在<code>root</code>的左子树中，直接返回<code>right</code>；</p></li><li><p>四，当<code>left</code>不为空，<code>right</code>为空，与三同理。</p></li></ul></li></ul><p>观察发现，情况一可合并至三和四内。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//先序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//终止条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null <span class="token operator">||</span> root<span class="token operator">==</span>p <span class="token operator">||</span> root<span class="token operator">==</span>q<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//左子树的最近公共祖先</span>        TreeNode left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右子树的最近公共祖先</span>        TreeNode right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//分四种情况来写如下</span>        <span class="token comment" spellcheck="true">//if(left==null &amp;&amp; right==null) return null;//1</span>        <span class="token comment" spellcheck="true">//if(left==null) return right;//3</span>        <span class="token comment" spellcheck="true">//if(right==null) return left;//4</span>        <span class="token comment" spellcheck="true">//return root;//2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中<code>n</code>为二叉树节点数。</li><li>空间复杂度：O(height)，递归栈的深度。</li></ul><p><strong>方法二</strong>：存储父节点</p><p>我们可以用哈希表存储所有节点的父节点（不包括根节点，根节点在哈希表获取时返回<code>null</code>），然后我们就可以利用节点的父节点信息从<code>p</code>节点开始不断往上跳，并记录已经访问过的节点，再从<code>q</code>节点开始不断往上跳，如果碰到已经访问过的节点，那么这个节点就是我们要找的最近公共祖先。</p><p>具体实现</p><ul><li>从根节点遍历整颗二叉树，用哈希表记录每个节点的父节点指针；</li><li>从<code>p</code>节点开始不断往它的祖先移动，并用<code>Set</code>集合存储已经访问过的祖先节点；</li><li>接着，从<code>q</code>节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是<code>p</code>和<code>q</code>的深度最深的公共祖先，即<code>LCA</code>节点。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//存储父节点</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储所有节点的父节点的哈希表，根节点再获取父节点时会返回null</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> TreeNode<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储某节点及其所有根节点的集合</span>    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历p及其所有根节点加入Set集合中</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有根节点对应的value，返回null</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历q及其所有根节点，第一个在集合中出现的节点为最近公共祖先</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//递归存储父节点</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，二叉树所有节点别访问一次。</li><li>空间复杂度：O(height)，递归栈的深度取决于二叉树的高度。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode-easy </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode高频考题刷题笔记-中等</title>
      <link href="/posts/59109.html"/>
      <url>/posts/59109.html</url>
      
        <content type="html"><![CDATA[<ul><li>参考网站<a href="https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/">力扣加加</a></li></ul><h1 id="高频中等题"><a href="#高频中等题" class="headerlink" title="高频中等题"></a>高频中等题</h1><h2 id="面试题-17-09-第-k-个数"><a href="#面试题-17-09-第-k-个数" class="headerlink" title="面试题 17.09. 第 k 个数"></a>面试题 17.09. 第 k 个数</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/get-kth-magic-number-lcci/">https://leetcode-cn.com/problems/get-kth-magic-number-lcci/</a></p><p><strong>方法一</strong>：动态规划+三指针</p><p>动态规划</p><ul><li><code>1</code>没有质因子，<code>1</code>与任何正整数（包括<code>1</code>本身）都是互质；</li><li>设置<code>1</code>为第一位，<code>dp[0]=1</code>;</li><li>初始化三个指针<code>p3，p5，p7</code>，均指向<code>dp[0]</code>；</li><li>在<code>dp[p3]</code>乘以<code>3</code>, <code>dp[p5]</code>乘以<code>5</code>，<code>dp[p7]</code>乘以<code>7</code>中选取最小数字作为新的数字，并将该数字的指针向前移动一步；</li></ul><pre class=" language-java"><code class="language-java">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p7 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">9</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> p5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p7 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> p5 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> p7 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">21</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> p5 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> p7 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getKthMagicNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化动态规划数组大小</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首元素</span>        <span class="token keyword">int</span> p3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> p5<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> p7<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化指针指向首个元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//选出最小的数字</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将选择乘数的指针前移一位</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> p3<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>p5<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span> p5<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>p7<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span> p7<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回动态规划数组最后一个元素</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(k)，k为第k个数。</li><li>空间复杂度：O(k)。</li></ul><p><strong>方法二</strong>：小顶堆</p><p>创建小顶堆，创建<code>HashSet</code>保存<code>k</code>个数值。首先将<code>1</code>放入小顶堆，然后死循环取出小顶堆的堆顶并删除，判断该元素是否已在<code>HashSet</code>中，如不在，则加入<code>HashSet</code>并将该数乘以<code>3、5、7</code>的结果放入小顶堆，直到<code>HashSet</code>集合大小为<code>k</code>，返回此时从小顶堆取出的元素<code>val</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getKthMagicNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最小堆处理写入数值，Integer不够</span>        PriorityQueue<span class="token operator">&lt;</span>Long<span class="token operator">></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//HashSet保存k个位数值</span>        Set<span class="token operator">&lt;</span>Long<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取并删除队首元素（堆顶元素）</span>            Long val <span class="token operator">=</span> priorityQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//该元素是否已经在HashSet中，在则不操作，否则插入</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回此时从小顶堆取出的队首元素</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(k)。</li><li>空间复杂度：O(k)。</li></ul><h2 id="面试题-17-23-最大黑方阵"><a href="#面试题-17-23-最大黑方阵" class="headerlink" title="面试题 17.23. 最大黑方阵"></a>面试题 17.23. 最大黑方阵</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/max-black-square-lcci/">https://leetcode-cn.com/problems/max-black-square-lcci/</a></p><p><strong>方法一</strong>：动态规划</p><p>创建两个辅助数组<code>right</code>和<code>down</code>，数组大小与矩阵相同，分别记录<code>matrix</code>当前元素右边和下边连续<code>0</code>的数目。</p><p>初始化两个数组：</p><ul><li>首先逆序遍历将最后一行和最后一列初始化</li><li>然后逆序遍历<code>matrix</code>其他元素，完成数组初始化，如果<code>matrix[i][j] == 0</code>，<code>right[i][j] = right[i][j+1] + 1</code>，<code>down[i][j] = down[i+1][j] + 1</code></li></ul><p>初始化<code>right</code>和<code>down</code>数组后，遍历矩阵，对于元素为<code>0</code>的<code>matrix[i][j]</code>，取<code>right[i][j]</code>和<code>down[i][j]</code>中的较小值暂时记录在<code>maxSize</code>中。对于<code>0,1，...，maxSize</code>中每一个可能的边长<code>k</code>，对应的正方形的上边和左边均满足全为<code>0</code>，所以再判断右边和下边两条边即可。<code>right[i+k][j]&gt;k</code>和<code>down[i][j+k]&gt;k</code>。当前最长边记录在<code>res[2]</code>中。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findSquare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果数组</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//辅助数组，记录当前元素右边连续0数目</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> down <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//辅助数组，记录当前元素下边连续0数目</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//统计最后一行和最后一列的左边连续0数目和下边连续0数目</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>len<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一个元素为0</span>                right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一列</span>                    right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> down<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一行</span>                    right<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    down<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//统计除最后一行和最后一列其他元素的左边和下边连续0的数目</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> down<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">-</span>res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token operator">-</span>res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> maxsize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录当前0元素右边和下边连续0数目的最小值</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> maxsize <span class="token operator">=</span>  right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token keyword">else</span> maxsize <span class="token operator">=</span> down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> maxsize<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断正方形下边和右边两条边</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> k <span class="token operator">&amp;&amp;</span> down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                            res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新最大子方阵</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无满足条件的子方阵</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n<sup>2</sup>)。</p></li><li><p>空间复杂度：O(n<sup>2</sup>)，辅助数组。</p></li></ul><h2 id="0002-两数相加"><a href="#0002-两数相加" class="headerlink" title="0002. 两数相加"></a>0002. 两数相加</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/add-two-numbers/">https://leetcode-cn.com/problems/add-two-numbers/</a></p><p><strong>方法一</strong>：模拟</p><p>由于输入的两个链表都是逆序存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。</p><p>我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。具体而言，</p><ul><li><p>如果当前两个链表处相应位置的数字为<code>n1</code>，<code>n2</code>，进位值为<code>carry</code>，则它们的和为<code>n1+n2+carry</code>；其中，答案链表处的数字为<code>(n1+n2+carry)%10</code>，而新的进位值值为<code>(n1+n2+carry)/10</code>。</p></li><li><p>如果两个链表的长度不同，则可以认为长度短的链表后面有若干个<code>0</code>。</p></li><li><p>此外，如果链表遍历结束后，有<code>carry&gt;0</code>，还需要在答案链表的后面附加一个节点，节点的值为<code>carry</code>。</p></li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null <span class="token operator">||</span> l2<span class="token operator">!=</span>null <span class="token operator">||</span> carry<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null <span class="token operator">?</span> l1<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>l2<span class="token operator">!=</span>null <span class="token operator">?</span> l2<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求两个节点和进位的和，节点为空时，用0替代相加</span>            carry <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进位的值</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sum对10求余后放到节点中</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后移</span>                l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token operator">!=</span>null <span class="token operator">?</span> l2<span class="token punctuation">.</span>next<span class="token operator">:</span>null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//l2 = l2!=null ? l2.next:l2</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(max(m, n))，其中m和n分别为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要O(1)的时间。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：递归</p><p>看代码</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ListNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哨兵节点</span>    <span class="token function">helper</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span>ListNode result<span class="token punctuation">,</span> ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">,</span> <span class="token keyword">int</span> carry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> carry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//递归终止条件</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">?</span> l1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> null <span class="token operator">?</span> l2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>    result<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新节点的值</span>    carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进位值</span>    <span class="token function">helper</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l1 <span class="token operator">!=</span> null <span class="token operator">?</span> l1<span class="token punctuation">.</span>next <span class="token operator">:</span> null<span class="token punctuation">,</span> l2 <span class="token operator">!=</span> null <span class="token operator">?</span> l2<span class="token punctuation">.</span>next <span class="token operator">:</span> null<span class="token punctuation">,</span> carry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>时间复杂度：O(max(m, n))，其中m和n分别为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要O(1)的时间。</li><li>空间复杂度：O(max(m, n))，递归占用空间。</li></ul><h2 id="0003-无重复字符的最长子串"><a href="#0003-无重复字符的最长子串" class="headerlink" title="0003. 无重复字符的最长子串"></a>0003. 无重复字符的最长子串</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p><p><strong>方法一</strong>：滑动窗口</p><p>「滑动窗口」</p><p>我们使用<strong>两个指针表示字符串中的某个子串（或窗口）的左右边界</strong>，其中左指针代表着子串的起始位置，右指针代表子串不含重复字符的最大长度位置。</p><p>在每一步的操作中，我们将左指针向右移动一格，表示我们开始<strong>枚举下一个字符作为起始位置</strong>，然后我们可以不断地移动右指针，但需要保证这两个指针对应的子串没有重复的字符。在移动结束后，这个子串就对应着<strong>以左指针开始，不包含重复字符的最长子串</strong>。我们记录下这个子串的长度。</p><p>在枚举结束后，我们找到的最长的子串的长度即为答案。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0003-1.645dt74lc640.png" alt="0003-1"></p><p>「判断重复字符」</p><p>我们还需要使用一种数据结构来<strong>判断是否有重复字符</strong>，<code>Java</code>中采用<code>HashSet</code>集合，在左指针向右移动是，我们从哈希集合中移除一个字符，在右指针向右移动时，我们往哈希集合中添加一个字符。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//哈希集合，记录每个字符是否出现过</span>        Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右指针，初始化-1，相当于位于字符串左边界的左侧，还没有开始移动</span>        <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> left<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//左指针向右移动一格，移除一个字符</span>                set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//不断地移动右指针</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                right<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//以left为起始，right结束的一个无重复字符子串</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n是字符串的长度，左指针和右指针分别会遍历整个字符串一次。</li><li>空间复杂度：O(|∑|)，其中∑表示字符集（即字符串中可以出现的字符），|∑|表示字符集的大小。在本题中没有明确说明字符集，因此可以默认为所有ASCII码在[0,128)内的字符，即|∑|=128。我们用哈希集合存储出现过的字符，而字符最多有|∑|个，因此空间复杂度为O(|∑|)。</li></ul><h2 id="0005-最长回文子串"><a href="#0005-最长回文子串" class="headerlink" title="0005. 最长回文子串"></a>0005. 最长回文子串</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p><p><strong>方法一</strong>：中心扩散法</p><p>本题最容易想到的一种方法应该就是<strong>中心扩散法</strong>。中心扩散法怎么去找回文串？</p><p>从每一个位置出发，向两边扩散即可。遇到不是回文的时候结束。举个例子，<code>str=acdbbdaa</code>，我们需要寻找从第一个<code>b</code>（位置<code>3</code>）出发最长回文串为多少。怎么寻找？</p><ul><li>首先往左寻找与当前位置相同的字符，直到遇到不相等为止；</li><li>然后向右寻找与当前位置相同的字符，直到遇到不相等为止；</li><li>最后左右双向扩散，直到左和右不相等，如下图所示。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0005-1.6ctez85ds9c0.png" alt="0005-1"></p><p>每个位置向两边扩散都会出现一个窗口大小（<code>len</code>），如果<code>len&gt;maxLen</code>(用来表示最长回文串的长度)，则更新<code>maxLen</code>的值。</p><p>因为我们最后要返回的是具体子串，而不是长度，因此还需要记录一下<code>maxLen</code>时的起始位置<code>maxStart</code>，即此时还要<code>maxStart=len</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxLen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最长回文子串长度</span>        <span class="token keyword">int</span> maxStart<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最长回文子串起始位置</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前位置最长回文子串长度</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中心扩散法辅助指针</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> cur<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cur<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新len！！！</span>            left<span class="token operator">=</span>cur<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            right<span class="token operator">=</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//向左扩散，遇到不相等结束</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left<span class="token operator">--</span><span class="token punctuation">;</span>                len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//向右扩散，遇到不相等结束</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right<span class="token operator">++</span><span class="token punctuation">;</span>                len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//左右同时扩散，遇到不相等结束</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left<span class="token operator">--</span><span class="token punctuation">;</span>                right<span class="token operator">++</span><span class="token punctuation">;</span>                len <span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用当前位置最长回文串长度len，更新最长回文子串长度maxLen，并记录起始位置</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">></span>maxLen<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                maxLen<span class="token operator">=</span>len<span class="token punctuation">;</span>                maxStart<span class="token operator">=</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>maxStart<span class="token punctuation">,</span> maxStart<span class="token operator">+</span>maxLen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n^2)，<code>n</code>是字符串长度，每个回文中心都会向外扩展。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：动态规划</p><p>中心扩散的方法，其实做了很多重复计算。<strong>动态规划</strong>就是为了减少重复计算的问题。动态规划听起来高大上，其实说白了就是空间换时间，将计算结果暂时存起来，避免重复计算。作用和工程中用<code>redis</code>做缓存有异曲同工之妙。</p><p>我们用一个<code>booleand dp[l][r]</code>表示字符串从<code>i</code>到<code>j</code>这段是否为回文，试想如果<code>dp[l][r]=true</code>，我们要判断<code>dp[l-1][r+1]</code>是否为回文，只需要判断字符串在(<code>l-1</code>)和(<code>r+1</code>)两个位置是否为相同的字符。</p><p>进入正题，动态规划的关键是找到初始状态和状态转移方程。</p><p><strong>初始状态</strong>，<code>l=r</code>时，<code>dp[l][r]=true</code>。</p><p><strong>状态转移方程</strong>，<code>dp[l][r]=true</code>并且(<code>l-1</code>)和(<code>r+1</code>)两个位置为相同的字符，此时<code>dp[l-1][r+1]=true</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//最长回文串的起点</span>        <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//最长回文串的长度</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存计算结果</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//right初始化为1</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//left初始化为0，且left&lt;right</span>                <span class="token comment" spellcheck="true">//left和right处字符相等，且满足right-left&lt;=2或left+1到right-1处为回文串</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//记录计算结果</span>                    dp<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//更新最长回文串</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> maxLen<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        maxLen <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        maxStart <span class="token operator">=</span> left<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>maxStart<span class="token punctuation">,</span> maxStart<span class="token operator">+</span>maxLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n^2)，<code>n</code>是字符串长度。</li><li>空间复杂度：O(n^2)。</li></ul><h2 id="0011-盛最多水的容器"><a href="#0011-盛最多水的容器" class="headerlink" title="0011. 盛最多水的容器"></a>0011. 盛最多水的容器</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/container-with-most-water/description/">https://leetcode-cn.com/problems/container-with-most-water/description/</a></p><p><strong>方法一</strong>：双指针</p><p>这道题看似简单，做起来才发现不容易，分治法、动态规划都用不上，要想得到O(n)的解法只有使用双指针一条路。即使看题解写出双指针代码，你可能也不清楚为什么正确，移动双指针为什么没有漏掉某些情况呢？</p><p>如果没有真正理解题目，即使一次对着答案做出来了，再次遇到这个题目可能还是不会。要理解这道题的正确性和原来，需要从背后的<strong>缩减搜索空间</strong>的思想去考虑题解。</p><p>用一句话概括双指针解法的要点：<strong>指针每移动一次，都意味着排除掉了一根柱子</strong>。</p><p>如下图所示，一开始我们考虑相距最远的两个柱子所能容纳的面积。水的宽度是两根柱子之间的距离<code>d=8</code>，水的高度取决于两根柱子之间较短的那个，即左边柱子的高度<code>h=3</code>，水的面积就是<code>3×8=24</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0011-1.7isxqcl71fg0.png" alt="0011-1"></p><p>如果选择固定一根柱子，另一根变化，水的面积会有什么变化吗？稍加思考可得：</p><ul><li>当前柱子是最两侧的柱子，水的宽度<code>d</code>为最大，其他组合水的宽度都比这个小；</li><li>左边柱子较短，决定了水的高度为<code>3</code>，如果移动左边的柱子，新的水面高度不确定，但一定不会超过右边柱子高度<code>7</code>；</li><li>如果移动右边的柱子，新的水面高度一定不会超过左边的柱子高度<code>3</code>，也就是不会超过现在的水面高度</li></ul><p>由此可见，如果固定左边的柱子，移动右边的柱子，那么水的高度一定不会增加，且宽度一定减少，所以水的面积一定减少。这个时候，左边的柱子和任意一个其他柱子的组合，其实都可以排除了。也就是我们可以排除左边的柱子了。</p><p>这个排除左边柱子的操作，就是双指针中左指针加一，随着不断地排除，当左指针和右指针相遇，算法就结束了。</p><p>此题类似<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">0167 两数之和ΙΙ-输入有序数组</a></p><p>考虑下标约束和指针移动意味着什么？缩减搜索空间。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0011-2.3dtb299muo20.png" alt="0011-2"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化双指针</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>height<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化结果和临时变量</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> area<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前指针位置对于的容器大小</span>            area <span class="token operator">=</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新最大容器</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移动指针，排除数值较小的指针组合，与其他柱子结合都小于等于当前面积</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n为height数组长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0015-三数之和"><a href="#0015-三数之和" class="headerlink" title="0015. 三数之和"></a>0015. 三数之和</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/3sum/">https://leetcode-cn.com/problems/3sum/</a></p><p><strong>方法一</strong>：排序+双指针</p><p>本题的难点在于如何<strong>去除重复解</strong>。</p><p><strong>特判情况</strong>：对于数组为<code>null</code>或数组长度小于<code>3</code>，返回空列表。</p><p>首先对数组进行<strong>排序</strong>，排序后遍历数组，固定一个数<code>num[i]</code>，再使用<strong>左右指针</strong>指向<code>nums[i]</code>后面数组的两端。</p><ul><li>如果<code>nums[i]</code>大于<code>0</code>，则三数之和必然无法等于<code>0</code>，结束循环；</li><li>如果<code>nums[i]==nums[i-1]</code>，则说明该数字重复，会导致结果重复，所以应该跳过；</li><li>令左指针<code>L=i+1</code>，右指针<code>R=n-1</code>，当<code>L&lt;R</code>时，执行循环：</li><li><ul><li>当<code>nums[i] + nums[L] + nums[R]==0</code>时，将三个数添加进结果集。如果此时<code>nums[L]==nums[L+1]</code>，则会导致结果重复，应该跳过，如果<code>L&lt;R</code>且数字相等，<code>L</code>一直右移。如果此时<code>nums[R]==nums[R-1]</code>，则会导致结果重复，应该跳过，如果<code>L&lt;R</code>且数字相等，<code>R</code>一直左移。</li><li>若和大于<code>0</code>，说明<code>nums[R]</code>太大，<code>R</code>左移。</li><li>若和小于<code>0</code>，说明<code>nums[L]</code>太小，<code>L</code>右移</li></ul></li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特判情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> len<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历+双指针</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前数字大于0，则三数之和一定大于0，所以结束循环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去重</span>            <span class="token keyword">int</span> L<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双指针遍历</span>            <span class="token keyword">int</span> R<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//三数之和为0</span>                    <span class="token comment" spellcheck="true">// ArrayList&lt;Integer> list = new ArrayList&lt;>();</span>                    <span class="token comment" spellcheck="true">// list.add(nums[i]);</span>                    <span class="token comment" spellcheck="true">// list.add(nums[L]);</span>                    <span class="token comment" spellcheck="true">// list.add(nums[R]);</span>                    <span class="token comment" spellcheck="true">// ans.add(list);</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回指定数据组成的固定大小的列表</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去重</span>                        L<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>R<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去重</span>                        R<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    L<span class="token operator">++</span><span class="token punctuation">;</span>                    R<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//和小，L右移</span>                    L<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//和大，R左移</span>                    R<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n^2)，数组排序<code>O(nlog n)</code>，数组遍历和双指针遍历<code>O(n^2)</code>，总体<code>O(n^2)</code>。</li><li>空间复杂度：O(log n)。我们忽略存储答案的空间，额外排序的空间复杂度为<code>O(log n)</code>。然而我们修改了输入的数组<code>nums</code>，在实际情况下不一定允许，因此也可以看成使用了一个额外的数组存储了<code>nums</code>的副本并进行排序，空间复杂度为<code>O(n)</code>。</li></ul><h2 id="0017-电话号码的字母组合"><a href="#0017-电话号码的字母组合" class="headerlink" title="0017. 电话号码的字母组合"></a>0017. 电话号码的字母组合</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</a></p><p><strong>方法一</strong>：回溯</p><p>当题目出现“<strong>所有组合</strong>”等类似字眼时，我们的第一感觉就要想到用<strong>回溯</strong>。也就是在循环里套了递归调用。</p><p>首先需要一个<code>map</code>集合，从输入数字映射到字符串，这里可以用<code>String</code>数组。需要<code>StringBuilder</code>来拼接字符串。输入<code>digits</code>为<code>null</code>和长度为<code>0</code>时，直接返回空列表。</p><p>回溯函数<code>backtrack(digits, 0)</code>，输入数字字符串和当前拼接索引</p><ul><li>当拼接字符串长度等于<code>digits</code>长度时，将拼接字符串<code>sb</code>转为字符串保存到列表<code>res</code>中；</li><li>取出当前输入数字对应的字符串映射<code>map[digits.charAt(index)-&#39;2&#39;]</code>；</li><li>将此字符串转换为新的字符数组，遍历该数组，首先拼接字符<code>sb.append(ch)</code>，然后调用回溯函数<code>backtrack(digits, index+1)</code>，回溯时删除拼接字符串的最后一个字符<code>sb.deleteCharAt(sb.length()-1)</code>。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数字到字符串的映射</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"ghi"</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">,</span> <span class="token string">"mno"</span><span class="token punctuation">,</span> <span class="token string">"pqrs"</span><span class="token punctuation">,</span> <span class="token string">"tuv"</span><span class="token punctuation">,</span> <span class="token string">"wxyz"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拼接字符</span>    <span class="token keyword">private</span> StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果集</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>String digits<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token operator">==</span>null <span class="token operator">||</span> digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用回溯函数，digits输入数字字符串，0当前数字索引</span>        <span class="token function">backtrack</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//回溯函数</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>String digits<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接字符长度等于digits长度</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输入数字对应的映射字符串</span>        String val <span class="token operator">=</span> map<span class="token punctuation">[</span>digits<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span>val<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取出当前输入数字对应的字符串映射</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼接字符</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归调用下一个输入数字</span>            sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回溯时删除最后一个拼接字符</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(3^m×4^n)，其中m是输入中对应3个字母的数字个数，n是输入中对应3个字母的数字个数。当输入包含m个对应3个字母和n个对应4个字母的数字时，不同的字母组合一共有3^m×4^n中，需要遍历每一种字母组合。</li><li>空间复杂度：O(m+n)，m+n是输入数字的总个数，除了返回值外，空间复杂度主要取决于哈希表以及回溯过程中的递归调用层数，哈希表与输入无关，可以看出常数，递归调用层数最大为m+n。</li></ul><p><strong>方法二</strong>：队列法</p><p>我们也可使用队列，初始化队列仅含一个空字符串。遍历输入的<code>digits</code>，得到输入数字对应的映射字符串，然后从队列中取出所有当前元素，与映射字符串分别拼接后入队，直到遍历到<code>digits</code>末尾，最后队列中的元素就是所求结果。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0017-1.76abzgcyfkg.png" alt="0017-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>String digits<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token operator">==</span>null <span class="token operator">||</span> digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数字到字符串的映射</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"ghi"</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">,</span> <span class="token string">"mno"</span><span class="token punctuation">,</span> <span class="token string">"pqrs"</span><span class="token punctuation">,</span> <span class="token string">"tuv"</span><span class="token punctuation">,</span> <span class="token string">"wxyz"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先往队列里加入一个空字符串</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//由当前遍历的数字字符，取出对应的字符串</span>            String letters <span class="token operator">=</span> map<span class="token punctuation">[</span>digits<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从当前队列中将每个元素依次取出拼接</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不可写在第二个循环，会造成死循环</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//取出队首元素</span>                String temp <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//与letters拼接</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>letters<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token operator">+</span>letters<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(3^m×4^n)，其中m是输入中对应3个字母的数字个数，n是输入中对应3个字母的数字个数。</li><li>空间复杂度：O(3^m×4^n)，拼接字符串一共要生成3^m×4^n个结果。</li></ul><h2 id="0019-删除链表的倒数第-N-个节点"><a href="#0019-删除链表的倒数第-N-个节点" class="headerlink" title="0019. 删除链表的倒数第 N 个节点"></a>0019. 删除链表的倒数第 N 个节点</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a></p><p><strong>方法一</strong>：栈</p><p>一种容易想到的方法是两次遍历链表，第一次遍历得到链表长度<code>L</code>，随后再次遍历，当遍历到<code>L-n+1</code>时，它就是我们要删除的节点。时间复杂度O(L)，空间复杂度：O(1)。</p><p>题目进阶要求<strong>一次遍历完成</strong>，可以借用栈空间，根据栈「先进后出」的原则，我们弹出栈的第n个节点就是需要删除的节点，并且当前栈顶的节点就是待删除节点的前驱节点。设置一个傀儡头结点指向头结点，在删除头结点时起作用。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//傀儡节点，指向头结点</span>        Deque<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>ListNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链表所有节点入栈</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//弹出n个链表节点，栈顶为待删除元素的前一个节点</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode prev <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得栈顶节点</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除倒数第n个节点</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(L)，L为链表长度。</li><li>空间复杂度：O(L)，栈空间。</li></ul><p><strong>方法二</strong>：双指针</p><p>能不能不适用栈，一次遍历完成呢？答案是肯定的，使用双指针，遍历结束时，一个指针<code>slow</code>指向待删除元素的前一个元素，另一个指针<code>quick</code>指向末尾的<code>null</code>，将<code>slow</code>指向下下一个元素即可。</p><ul><li>创建傀儡节点<code>dummy</code>指向父节点，设置<code>slow</code>指向傀儡节点，<code>quick</code>指向<code>head</code>头结点</li><li>先将<code>quick</code>后移<code>n</code>次</li><li>同时移动<code>quick</code>和<code>slow</code>，直到<code>quick</code>为空，此时<code>slow</code>指向待删除元素的前一个元素</li><li>将<code>slow</code>指向下下一个节点即可，返回<code>dummy.next</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0019-1.5rduod3x12g0.gif" alt="0019-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//傀儡头结点</span>        ListNode quick <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快指针指向头结点</span>        ListNode slow <span class="token operator">=</span> dummy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//慢指针指向傀儡头结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快指针后移n次</span>            quick <span class="token operator">=</span> quick<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>quick <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快慢指针同时后移，直到快指针为null，此时慢指针指向待删除节点的前一个节点</span>            quick <span class="token operator">=</span> quick<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除倒数第n个节点</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(L)，L为链表长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0022-括号生成"><a href="#0022-括号生成" class="headerlink" title="0022. 括号生成"></a>0022. 括号生成</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/generate-parentheses">https://leetcode-cn.com/problems/generate-parentheses</a></p><p>这一类问题是在一棵隐式的树上求解，可以用深度优先遍历，也可以用广度优先遍历。<br>一般用深度优先遍历。原因是：</p><ul><li>代码好写，使用递归的方法，直接借助系统栈完成状态的转移；</li><li>广度优先遍历得自己编写结点类和借助队列。</li></ul><p>这里的「状态」是指程序执行到 隐式树 的某个结点的语言描述，在程序中用不同的 变量 加以区分。</p><p><strong>方法一</strong>：回溯（深度优先遍历）</p><p>由于我们需要求解所有可能，因此回溯就不难想到，但这与<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number">0017.电话号码的字符组合</a>不同，<code>0017</code>所有组合情况都符合条件，而本题需要组成的括号有效。因此需要对回溯进行优化，<strong>回溯的优化手段大多数是剪枝</strong>。</p><p>「<strong>做加法</strong>」括号使用数从<code>0-&gt;n</code>，做减法与做加法类似，括号剩余数从<code>n-&gt;0</code>。做加法的情况如下。</p><ul><li><p>当前左右括号使用数都小于<code>n</code>个时，才能产生分支。在左边和右边使用括号数都等于<code>n</code>时，是一种结果（<strong>回溯退出条件</strong>）；</p></li><li><p>产生左分支的时候，当前左括号使用数小于<code>n</code>可以使用；</p></li><li><p>产生右分支的时候，还受左分支的限制，左边使用括号数一定得严格小于右边使用括号数(<strong>剪枝</strong>)，才可以产生分支；</p></li></ul><p>加法递归树</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0022-1.pp6m3ws6feo.png" alt="0022-1"></p><p>减法递归树</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0022-2.10c0f9c0brfk.png" alt="0022-2"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 做加法</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param res    结果集     * @param cur    当前递归得到的结果     * @param left   左括号使用数     * @param right  右括号使用数     * @param n      左括号、右括号一共需要使用的数目     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> res<span class="token punctuation">,</span> StringBuilder cur<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回溯结束条件，拼接字符串放入结果集</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//剪枝，左括号使用数小于右括号使用数时！如，())</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左括号使用数小于n，递归</span>            cur<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右括号使用数小于n，递归</span>            cur<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(4^n/sqrt(n))，n为括号对数，在回溯过程中，每个答案需要O(n)的时间复制到答案数组中。</li><li>空间复杂度：O(n)，除了答案集合之外，所需空间取决于递归栈的深度，每一层递归函数需要O(1)的空间，最多递归2n层，因此空间复杂度为O(n)。</li></ul><p><strong>方法二</strong>：广度优先遍历</p><p>通过编写广度优先遍历的代码，读者可以体会一下，为什么搜索几乎都是用深度优先遍历（回溯算法）。</p><p>广度优先遍历，需要程序员自己编写节点类，显示使用队列这个数据结构。深度优先遍历的时候，就可以直接使用系统栈，在递归方法执行完成的时候，系统栈顶就把我们所需要的状态信息直接弹出，而无需编写节点类和显示使用栈。</p><p>使用广度优先遍历，结果集都在最后一层，即叶子节点处得到所有的结果集。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建队列节点，保存当前状态</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> String str<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前得到的字符串</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已使用的左括号数量</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已使用的右括号数量</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//双端队列</span>        Deque<span class="token operator">&lt;</span>Node<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将空字符串放入</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//检索并删除队列的头元素</span>            Node curNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//左右括号使用数量为n，加入结果集</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> curNode<span class="token punctuation">.</span>right <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//左括号入队，左括号使用数量小于n</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>str <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">,</span> curNode<span class="token punctuation">.</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//右括号入队，右括号使用数量小于n，且左括号使用数量大于右括号使用数量</span>            <span class="token comment" spellcheck="true">//（回溯中，左括号使用数量小于右括号，剪枝）迭代中，入队条件与剪枝条件相反</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> curNode<span class="token punctuation">.</span>left <span class="token operator">></span> curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>str <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">,</span> curNode<span class="token punctuation">.</span>left<span class="token punctuation">,</span> curNode<span class="token punctuation">.</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="0024-两两交换链表中的节点"><a href="#0024-两两交换链表中的节点" class="headerlink" title="0024. 两两交换链表中的节点"></a>0024. 两两交换链表中的节点</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">https://leetcode-cn.com/problems/swap-nodes-in-pairs/</a></p><p><strong>方法一</strong>：递归</p><p>可以通过递归的方式实现两两交换链表中的节点。</p><p><strong>递归的终止条件</strong>是链表中没有节点，或者链表中只有一个节点，此时无法交换。</p><p>如果链表中至少有两个节点，则在两两交换链表中的节点之后，原始链表的头结点变成新的链表的第二个节点，原始链表的第二个节点变成新的链表的头结点。链表中的其余节点的两两交换可以递归地实现。在对链表中的其余节点递归地两两交换之后，更新节点之间的指针关系，即可完成整个链表的两两交换。</p><p>用<code>head</code>表示原始链表的头结点(新链表的第二个节点)，用<code>newHead</code>表示新的链表的头结点(原始链表的第二个节点)，则原始链表中的其余节点的头结点时<code>newHead.next</code>。令<code>head.next=swapPairs(newHead.next)</code>，表示将其余节点进行两两交换，交换后的新的头结点为head的下一个节点。然后令<code>newHead.next=head</code>，即完成了所有节点的交换。最后返回新的链表头结点<code>newHead</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归终止条件</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//理解交换过程</span>        ListNode newHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新的头结点，原链表的第二个节点</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>newHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原始头节点的指向修改为新头节点下一个节点作为头结点交换结果</span>        newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新的头节点指向旧链表的头节点</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n是链表的节点数量，需要对每个节点进行更新指针的操作。</li><li>空间复杂度：O(n)，取决于递归调用的栈空间。</li></ul><p><strong>方法二</strong>：迭代</p><p>也可以通过迭代的方式实现两两交换链表中的节点。</p><p>创建哑结点dumyHead，令dummyHead.next=head。令temp表示当前到达的节点，初始时temp=dummyHead。每次需要交换temp后面的两个节点。</p><p>如果temp后面没有节点或只有一个节点，则没有更多的节点需要交换，因此结束交换。否则，获得temp后面的两个节点node1和node2，通过更新节点的指针关系实现两两交换节点。</p><p>具体而言，交换之前的节点关系是temp-&gt;node1-&gt;node2，交换之后的节点关系要变成temp-&gt;node2-&gt;node1，因此需要进行如下操作。</p><pre class=" language-java"><code class="language-java">temp<span class="token punctuation">.</span>next <span class="token operator">=</span> node2node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">.</span>nextnode2<span class="token punctuation">.</span>next <span class="token operator">=</span> node1</code></pre><p>完成上述操作后，节点关系即变成temp-&gt;node2-&gt;node1，再令temp=node1，对链表中其余节点进行两两交换，直到全部节点都被两两交换。</p><p>两两交换链表中的节点之后，新的链表头结点是dummyHead.next，返回新的链表头结点即可。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0024-1.3iz0dhno2ym0.png" alt="0024-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哑(头)节点</span>        dummyHead<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode temp<span class="token operator">=</span>dummyHead<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//待交换节点的前一个节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode node1 <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个指针指向两个待交换节点</span>            ListNode node2 <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改指针指向，注意避免链表断裂</span>            node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node1<span class="token punctuation">;</span>            temp <span class="token operator">=</span> node1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改temp</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n是链表的节点数量，需要对每个节点进行更新指针的操作。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0029-两数相除"><a href="#0029-两数相除" class="headerlink" title="0029. 两数相除"></a>0029. 两数相除</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/divide-two-integers/">https://leetcode-cn.com/problems/divide-two-integers/</a></p><p><strong>方法一</strong>：递归+倍增测试</p><p>符合直觉的做法是，被减数一次一次减去减数，不断更新差，直到差小于<code> 0</code>，我们减了多少次，结果就是多少。注意：思路简单，效率极低。而且越界的判断没那么简单。</p><p><strong>一些简单的特殊情况处理</strong></p><ul><li>被除数为<code> 0</code>，直接返回<code> 0</code></li><li>除数为<code>1</code>，直接返回被除数</li><li>除数为-1，存在唯一的溢出情况，被除数为<code>Inter.MIN_VALUE</code>，<code>-2^31</code>，按题目要求返回<code>Integer.MAX_VALUE</code>，<code>2^31-1</code>。不溢出直接返回改变符号的被除数</li></ul><p>设置<code>boolean</code>标志位，通过异或判断结果为正还是负，即判断两数是否异号，<code>(dividend ^ divisor)&lt;0</code>为异号。之后将除数和被除数均转为符号相同的数运算（因为<code>int</code>类型，负数的表示范围大）。</p><p>int类型范围<code>[-2^31, 2^31 - 1]</code>。</p><p>举个例子：<code>11</code>除以<code>3</code>，正数运算为例</p><ul><li>首先<code>11&gt;3</code>，结果至少是<code>1</code>。我们让<code>3</code>翻倍就是<code>6</code>，发现<code>11</code>比<code>6</code>大，那结果至少是<code>2</code>了，接着让<code>6</code>再翻倍是<code>12</code>，此时翻倍结果大于<code>11</code>，就不能让<code>2</code>翻倍得<code>4</code>了，但是我们知道结果肯定在<code>2</code>和<code>4</code>之间。</li><li>也就是<code>2</code>加上某个数就是结果，这个数是多少呢？我们让<code>11</code>减去最后一次倍增的结果<code>6</code>，即<code>12-6=5</code>，剩下<code>5</code>，我们计算<code>5</code>是<code>3</code>的几倍，接着倍增测试，看，递归出现了。</li></ul><p>用正数运算，采用<code>long</code>防止溢出，最后根据<code>res</code>处理溢出。</p><p>用负数运算，采用被除数左移防止溢出。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 使用long防止溢出</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特例处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dividend<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//运算溢出情况</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dividend<span class="token operator">==</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token keyword">return</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>dividend<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//异或判断结果正负</span>        <span class="token keyword">boolean</span> sign <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dividend<span class="token operator">^</span>divisor<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> sign<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//被除数和除数均转为正数处理</span>        <span class="token keyword">long</span> a <span class="token operator">=</span> dividend<span class="token punctuation">;</span>        <span class="token keyword">long</span> b <span class="token operator">=</span> divisor<span class="token punctuation">;</span>        a <span class="token operator">=</span> a<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>a<span class="token operator">:</span><span class="token operator">-</span>a<span class="token punctuation">;</span>        b <span class="token operator">=</span> b<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>b<span class="token operator">:</span><span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方案一：迭代</span>        <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">>=</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正数运算，3/2可进入</span>            <span class="token keyword">long</span> temp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> tb <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tb<span class="token operator">+</span>tb<span class="token punctuation">)</span><span class="token operator">&lt;=</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//倍增测试</span>                tb <span class="token operator">=</span> tb<span class="token operator">+</span>tb<span class="token punctuation">;</span>                temp <span class="token operator">=</span> temp<span class="token operator">+</span>temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> temp<span class="token punctuation">;</span>            a <span class="token operator">-=</span> tb<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方案二：递归调用</span>        <span class="token comment" spellcheck="true">// long res = div(a,b);</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">></span>Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">||</span> res<span class="token operator">&lt;</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//溢出处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">-</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//精髓和难点就在于下面这几句，使用long类型，divisor倍增时不会越界</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//递归结束条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> tb <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试值</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tb<span class="token operator">+</span>tb<span class="token punctuation">)</span><span class="token operator">&lt;=</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最小解翻倍</span>            tb <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前测试的值也翻倍</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">+</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token operator">-</span>tb<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//2. 转为负数，被除数左移防止溢出</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特例处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dividend<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dividend<span class="token operator">==</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token keyword">return</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//唯一的运算溢出情况</span>            <span class="token keyword">return</span> <span class="token operator">-</span>dividend<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//异或判断结果正负</span>        <span class="token keyword">boolean</span> sign <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dividend<span class="token operator">^</span>divisor<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> sign<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//被除数和除数均转为负数处理，-2^31不能用正数表示，唯一的表示溢出情况</span>        dividend <span class="token operator">=</span> dividend<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span>dividend<span class="token operator">:</span><span class="token operator">-</span>dividend<span class="token punctuation">;</span>        divisor <span class="token operator">=</span> divisor<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span>divisor<span class="token operator">:</span><span class="token operator">-</span>divisor<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//方案一：迭代</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>dividend<span class="token operator">&lt;=</span>divisor<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//负数运算，-2/-1可进入</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> tb<span class="token operator">=</span>divisor<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dividend<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>tb<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//倍增测试</span>                tb <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>                temp <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> temp<span class="token punctuation">;</span>            dividend <span class="token operator">-=</span> tb<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方案二：递归调用</span>        <span class="token comment" spellcheck="true">// int res = div(dividend,divisor);</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>res<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//精髓和难点就在于下面这几句，dividend和divisor都是负数，且中间不会出现越界</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//递归结束条件，负数运算，被除数大于除数时返回0，如-1除以-2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dividend<span class="token operator">></span>divisor<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tb <span class="token operator">=</span> divisor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试值</span>        <span class="token comment" spellcheck="true">//如果对tb翻倍，就可能越界，所以算dividend减半</span>        <span class="token comment" spellcheck="true">//不能用&lt;=号，由于dividend>>1可能牺牲精度，本来时tb*2不满足的情况满足</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dividend<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>tb<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最小解翻倍</span>            tb <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前测试的值也翻倍，dividend/2 > tb，而dividend没有越界，所以2*t也不会越界</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">+</span> <span class="token function">div</span><span class="token punctuation">(</span>dividend<span class="token operator">-</span>tb<span class="token punctuation">,</span>divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><h2 id="0031-下一个排列"><a href="#0031-下一个排列" class="headerlink" title="0031. 下一个排列"></a>0031. 下一个排列</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/next-permutation/solution/xia-yi-ge-pai-lie-by-leetcode-solution/">https://leetcode-cn.com/problems/next-permutation/solution/xia-yi-ge-pai-lie-by-leetcode-solution/</a></p><p><strong>方法一</strong>：两边扫描</p><p>本题要求找给定序列的下一个更大排列，以数字序列<code>[1,2,3]</code>为例，其排列依次为：</p><p><code>[1,2,3]-&gt;[1,3,2]-&gt;[2,1,3]-&gt;[2,3,1]-&gt;[3,1,2]-&gt;[3,2,1]</code></p><p>特别地，排序<code>[3,2,1]</code>的下一个排列是最小的排列<code>[1,2,3]</code>。</p><p>注意到下一个排列总是比当前排列要大，除非该排列已经是最大的排列。我们希望找到一种方法，能够找到一个大于当前序列的新序列，且变化的幅度尽可能小。具体地：</p><ul><li>我们需要将一个<strong>左边的较小数</strong>与一个<strong>右边的较大数</strong>交换，能够让当前排列变大，从而得到下一个排列。</li><li>同时我们要让这个<strong>较小数尽量靠右</strong>，而<strong>较大数尽可能小</strong>。当交换完成后，<strong>较大数右边的数需要按照升序重新排列</strong>，这样可以保证新排列大于原来排列的情况下，使变大的幅度尽可能小。</li></ul><p>以<code>[4,5,2,6,3,1]</code>为例：</p><ul><li>我们找到符合条件的一对<strong>较小数与较大数</strong>的组合为<code>2</code>和<code>3</code>，满足较小数尽量靠右，而较大数尽可能小。</li><li>当我们完成交换后排列变为<code>[4,5,3,6,2,1]</code>，此时我们可以重排较小数右边的序列，序列变为<code>[4,5,3,1,2,6]</code>。</li></ul><p>具体的算法：</p><ul><li>从后向前扫描数组，<strong>找到第一个降序位置为较小数</strong>，必然可以与其右边一个数交换位置得到一个较大序列。如果没找到降序位置，说明当前序列已经是一个降序序列（即最大序列），直接将序列翻转得到升序序列即可（最小序列）；</li><li>接着从后向前扫描数组，<strong>找到第一个比较小数大的较大数</strong>，交换两个数的位置，然后将最小数位置后面所有位置按升序排列（本身是降序，双指针指向末尾两两交换即可），得到下一个比当前排列大的排列。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0031-1.4c5bqf5maqq0.png" alt="0031-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//较小数位置</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从右到左扫描，找到第一个降序位置i</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存在降序位置i</span>            <span class="token keyword">int</span> j<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//较大数位置</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span>i <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从右到左扫描，找到第一个比较小数大的数的位置</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交换较大数和较小数</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交换后，较小数位置后面的数据升序排列。或者整个数组升序排列</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//交换数组两个位置数据</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数组i及以后位置数据升序排列，本身是降序</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span>start<span class="token punctuation">;</span>        <span class="token keyword">int</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n为给定序列长度，至多需要扫描两次序列，以及进行一次反转操作。</li><li>空间复杂度：O(1)，只需要常数的空间存放若干变量。</li></ul><h2 id="0033-搜索旋转排序数组"><a href="#0033-搜索旋转排序数组" class="headerlink" title="0033. 搜索旋转排序数组"></a>0033. 搜索旋转排序数组</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">https://leetcode-cn.com/problems/search-in-rotated-sorted-array/</a></p><p><strong>方法一</strong>：二分查找</p><p>对于有序数组，可以使用二分查找的方法查找元素。但是这道题中，数组本身不是有序的，进行旋转后只保证了数组的局部是有序的，还能进行二分查找吗？答案是可以的。</p><p>可以发现的是，我们将数组从中间分开成左右两部分是，一定有一部分是有序的。拿示例<code>[4,5,6,7,0,1,2]</code>来看，我们从<code>7</code>这个位置分开成<code>[4,5,6,7]</code>和<code>[0,1,2]</code>两个都有序，从<code>6</code>分开左边<code>[4,5,6]</code>有序。</p><p>这启示我们可以在常规二分查找的时候查看当前<code>mid</code>为分割位置分隔处理的两个部分<code>[l, mid]</code>和<code>[mid+1, r]</code>哪个部分有序，并根据有序的哪个部分确定我们如何改变二分查找的上下界，因为我们能够根据有序的那部分判断<code>target</code>在不在这个部分。</p><ul><li>如果<code>nums[0]&lt;=nums[mid]</code>（<code>0</code>到<code>mid</code>有序）</li><li><ul><li>如果<code>nums[0]&lt;=target&lt;nums[mid]</code>，<code>target</code>在有序部分中间，改变右搜索边界为<code>mid-1</code></li><li>否则，<code>target</code>在无序部分，改变左搜索边界为<code>mid+1</code></li></ul></li><li>否则（<code>mid</code>到<code>nums.length-1</code>有序）</li><li><ul><li>如果<code>nums[mid]&lt;target&lt;=nums[mid]</code>，<code>target</code>在有序部分中间，改变左搜索边界为<code>mid+1</code></li><li>否则<code>target</code>在无序部分，改变右搜索边界为<code>mid-1</code></li></ul></li><li>如果搜索结束<code>l&gt;r</code>，仍没有找到<code>target</code>，返回<code>-1</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0033-1.1rqf9pzpdkww.png" alt="0033-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特例判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token operator">==</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid处数值等于target</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0-mid有序</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>target <span class="token operator">&amp;&amp;</span> target<span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//target在有序部分之间，更新right</span>                    right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//target在无序部分之间，更新left</span>                    left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mid-(len-1)有序</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target <span class="token operator">&amp;&amp;</span> target<span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//target在有序部分之间，更新left</span>                    left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//target在无序部分之间，更新right</span>                    right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有找到target</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log n)，<code>n</code>为<code>nums</code>数组的大小，整个算法的时间复杂度即为二分查找的时间复杂度<code>O(log n)</code>。</li><li>空间复杂度：O(1)，只需要常数级别的空间存放变量。</li></ul><h2 id="0034-在排序数组中查找元素的第一个和最后一个位置"><a href="#0034-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="0034 在排序数组中查找元素的第一个和最后一个位置"></a>0034 在排序数组中查找元素的第一个和最后一个位置</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p><p><strong>方法一</strong>：二分查找</p><p>数组有序，可以采用两次二分查找。</p><p>可以采用两次二分查找，一次查找左边界，一次查找右边界，<strong>注意收缩条件和是否找到目标值的判断</strong>。</p><p>也可以直接二分查找找到目标值，之后往前和往后查找等于目标值的最前和最后索引，返回即可。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二分查找+边界判断</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特例</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//二分查找</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到目标值</span>                <span class="token keyword">int</span> index1<span class="token operator">=</span>mid<span class="token punctuation">,</span> index2<span class="token operator">=</span>mid<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>index1<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>index1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> index1<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到目标值左边界</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>index2<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>index2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> index2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到目标值右边界</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>index1<span class="token punctuation">,</span> index2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两次二分查找找到左右边界</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查找左边界</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等于也-1，收缩到左边界</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示没找到</span>        <span class="token keyword">int</span> index1<span class="token operator">=</span>left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录左边界</span>        <span class="token comment" spellcheck="true">//查找右边界</span>        left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等于也+1，收缩到右边界</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//if(right==-1 || nums[right]!=target) return new int[]&amp;#123;-1,-1&amp;#125;;//无需该步判断</span>        <span class="token keyword">int</span> index2<span class="token operator">=</span>right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找左边界没有提前返回，说明数组中有目标值，右边界一定有效</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>index1<span class="token punctuation">,</span> index2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log n)，<code>n</code>为数组元素数。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0039-组合总和"><a href="#0039-组合总和" class="headerlink" title="0039. 组合总和"></a>0039. 组合总和</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/combination-sum/">https://leetcode-cn.com/problems/combination-sum/</a></p><p><strong>方法一</strong>：回溯+剪枝</p><p>思路分析：根据示例<code>1</code>，输入<code>candidates=[2,3,6,7]</code>，<code>target=7</code></p><ul><li>候选数组里有<code>2</code>，如果找到组合总和为<code>7-2=5</code>的所有组合，再在之前加上<code>2</code>，就是<code>7</code>的所有组合；</li><li>同理考虑<code>3</code>，如果找到组合总和为<code>7-3=4</code>的所有组合，再在之前加上<code>3</code>，就是<code>7</code>的所有组合，依次这样找下去。</li></ul><p>基于以上的想法，可以画出如下的树形图。建议大家自己在纸上画出这颗树，<strong>这类问题都需要先画出树形图，然后编码实现</strong>。</p><p>画出树形图</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0039-1.1op4ncdyvu4g.png" alt="0039-1"></p><p>对于组合来说，以上是一种树形图，还可以根据一个数选和不选画树形图（<a href="https://leetcode-cn.com/problems/combination-sum/solution/zu-he-zong-he-by-leetcode-solution/">官方题解</a>）。</p><p>说明：</p><ul><li>以<code>target=7</code>为<strong>根节点</strong>，创建一个分支的时候<strong>做减法</strong>；</li><li>每一个箭头表示：从父节点的数值减去边上的数值，得到孩子节点的数值。边的数值就是题目中给出的<code>candidate</code>数组的每个元素的值；</li><li><strong>减到0或者负数的时候停止</strong>，即：节点0和负数节点为叶子结点；</li><li>所有从根节点到节点<code>0</code>的路径（只能从上往下，没有回路）就是题目要找的一个结果。</li></ul><p>这棵树有<code>4</code>个叶子结点的值为<code>0</code>，对应的路径列表是<code>[[2,2,3], [2,3,2], [3,2,2], [7]]</code>，而示例中给的输出只有<code>[[7], [2,2,3]]</code>。即：题目中要求每一个符合要求的解是不计算顺序的。下面分析为什么会重复。</p><p>重复路径产生的原因（<strong>难点</strong>）</p><ul><li>在每一个节点做减法展开分支的时候，由于题目中说<strong>每一个元素可以重复使用</strong>，我们<strong>考虑了所有的候选数</strong>，因此出现了重复的列表。</li></ul><p>怎么去除重复呢？<strong>遇到这一类相同元素不计算顺序的问题，我们在搜索时按照某种顺序搜索</strong>。此题具体做法</p><ul><li>每一次搜索的时候设置下一轮搜索的起点<code>begin</code>，见下图。即：从每一层的第<code>2</code>个节点开始，都不能搜索产生同一层节点已经使用过的<code>candidate</code>元素。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0039-2.3dg42lrkmkc0.png" alt="0039-2"></p><hr><p>剪枝提速</p><ul><li>根据上面画树形图的经验，如果<code>target</code>减去一个数得到负数，那么减去一个更大的树仍然是负数，同样搜索不到结果。基于这个想法，我们可以对输入数组进行排序，添加相关逻辑达到进一步剪枝的目的。</li><li>排序是为了提高搜索速度，对于解决这个问题来说非必要。<strong>但是搜索问题一般复杂度较高，能剪枝就尽量剪枝</strong>。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//未剪枝代码</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集合</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接路径</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> combine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//深度优先搜索</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> res<span class="token punctuation">,</span> combine<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果集合</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**      * @param candidates 候选数组      * @param target     搜索目标值      * @param res        结果集合      * @param combine    从根节点到叶子结点的路径，是一个列表      * @param begin      搜索起点    **/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> combine<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//搜索目标为负数和0时不再产生新的孩子节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>combine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//res.add(combine);为什么不行？combine是拼接路径，随着搜索变化</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//重点理解从begin开始搜索的语意</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>begin<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加当前搜索值</span>            combine<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新查找目标，下一轮搜索起点仍然是i，因为元素可以重复使用，这里容易出错</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> combine<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//状态重置</span>            combine<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>combine<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//剪枝代码，排序是前提！！！</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集合</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接路径</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> combine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序是剪枝的前提！！！</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//深度优先搜索</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> res<span class="token punctuation">,</span> combine<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果集合</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**      * @param candidates 候选数组      * @param target     搜索目标值      * @param res        结果集合      * @param combine    从根节点到叶子结点的路径，是一个列表      * @param begin      搜索起点    **/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> combine<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//搜索目标为负数的情况被剪枝</span>        <span class="token comment" spellcheck="true">//搜索目标为0时不再产生新的孩子节点，作为递归终止条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>combine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//res.add(combine);为什么不行？combine是拼接路径，随着搜索变化</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//重点理解从begin开始搜索的语意</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>begin<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//重点理解这里剪枝，前提是候选数组已经有序</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加当前搜索值</span>            combine<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新查找目标，下一轮搜索起点仍然是i，因为元素可以重复使用，这里容易出错</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> combine<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//状态重置</span>            combine<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>combine<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><h2 id="0040-组合总和-II"><a href="#0040-组合总和-II" class="headerlink" title="0040. 组合总和 II"></a>0040. 组合总和 II</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/combination-sum-ii/">https://leetcode-cn.com/problems/combination-sum-ii/</a></p><p><strong>方法一</strong>：回溯+剪枝</p><p>解题思路：<strong>按顺序搜索</strong>，设置合理的变量，在搜索中判断<strong>是否会出现重复集结果</strong>。重点理解对<strong>输入数组排序的作用</strong>和<strong>大剪枝、小剪枝的意思</strong>。</p><p>与<a href="https://leetcode-cn.com/problems/combination-sum/">0039组合之和 Ι</a>之间唯一差别：<code>candidates</code>中的数字在每个组合中只能使用一次。相同点是：相同的数字列表的不同排列视为一个结果。</p><p>如何<strong>去掉重复结合（重点）</strong>，两种方案：</p><ul><li>使用哈希表天然去重功能，但是编码相对复杂；</li><li>使用<a href="https://leetcode-cn.com/problems/combination-sum/">0039组合之和 Ι</a>和<a href="https://leetcode-cn.com/problems/3sum/">0015三数之和</a>类似的思路：<strong>不重复就需要按顺序搜索</strong>，在搜索的过程中检测分支是否会出现重复结果。注意：这里的顺序不仅仅指的是数组<code>candidates</code>有序，还指按照一定的顺序搜索结果。</li><li><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0040-2.xkuwn7qr21s.png" alt="0040-2"></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0040-1.3jutbb67yc40.png" alt="0040-1"></p><p>有0039题我们知道，<code>candidates</code>有序，是深度优先遍历过程中实现剪枝的前提。</p><p>将数组先排序的思路来源于这个问题：去掉一个数组中重复的元素。<strong>很容易想到的方案是</strong>：先对数组升序排序，重复的元素一定不是排好序以后相同的连续数组区域的第一个元素。也就是说，剪枝发生在：<strong>同一层数值相同的第2、3…个节点，因为数值相同的第1个节点已经搜索处了包含这个数值得全部结果</strong>，同一层的其他节点，候选数的个数更少，搜索处的结果一定不会比第一个节点更多，并且是第一个节点的子集。（很难理解，结合代码和具体例子，画图理解）。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接路径</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序，是剪枝的前提</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用回溯</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param candidates 候选数组     * @param begin      从候选数组的 begin 位置开始搜索     * @param target     表示剩余目标数值，这个值一开始等于题目target     * @param path       从根结点到叶子结点的路径     * @param res     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//递归结束，路径加入结果集合</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>begin<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//大剪枝：减去 candidates[i] 小于 0，减去后面的 candidates[i + 1]、candidates[i + 2] 肯定也小于 0，因此用 break</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//小剪枝：同一层相同数值的结点，从第 2 个开始，候选数更少，结果一定发生重复，因此跳过，用 continue</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>begin <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调试语句 1</span>            <span class="token comment" spellcheck="true">// System.out.println("递归之前 => " + path + "，剩余 = " + (target - candidates[i]));</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 因为元素不可以重复使用，这里递归传递下去的是 i + 1 而不是 i</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token operator">-</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调试语句 2</span>            <span class="token comment" spellcheck="true">// System.out.println("递归之后 => " + path + "，剩余 = " + (target - candidates[i]));</span>            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="0046-全排列"><a href="#0046-全排列" class="headerlink" title="0046. 全排列"></a>0046. 全排列</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/permutations/">https://leetcode-cn.com/problems/permutations/</a></p><p><strong>方法一</strong>：回溯</p><p>大佬文章：<a href="https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/">回溯算法入门级详解 + 练习</a></p><p>从全排列问题开始<strong>理解回溯算法</strong></p><p>我们尝试在纸上写<code>3</code>个数字、<code>4</code>个数字、<code>5</code>个数字的全排列，相信不难找到这样的方法。以数组<code>[1,2,3]</code>的全排列为例。</p><ul><li>先写以<code>1</code>开头的全排列，<code>[1,2,3], [1,3,2]</code>，即<code>1</code>+<code>[2,3]</code>的全排列（注意：<strong>递归结构体现在这里</strong>）；</li><li>再写以<code>2</code>开头的全排列，<code>[2,1,3], [2,3,1]</code>，即<code>2</code>+<code>[1,3]</code>的全排列；</li><li>最后写以<code>3</code>开头的全排列，<code>[3,2,1], [3,1,2]</code>，即<code>3</code>+<code>[1,2]</code>的全排列。</li></ul><p>「总结搜索的方法」：按照顺序枚举每一个位可能出现的情况，已经选择的数字在当前要选择的数字中不能出现。按照这种策略搜索就能做到<strong>不重不漏</strong>。这样的思路，可以用一个树形结构表示。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0046-1.441dop72m1w0.png" alt="0046-1"></p><p>「说明」：</p><ul><li><strong>每一个节点表示了求解全排列问题的不同阶段</strong>，这些阶段通过变量的「不同的值」体现，这些变量的不同的值，称之为「状态」；</li><li>使用深度优先遍历有「回头」的过程，在「回头」以后，<strong>状态变量需要设置成为和先前一样</strong>，因此在回到上一层节点的过程中，需要撤销上一次的选择，这个操作称之位「状态重置」；</li><li>深度优先遍历，<strong>借助系统栈空间，保存所需要的状态遍历</strong>，在编码中只需要注意遍历到相应的节点的时候，状态遍历的值是正确的，<strong>具体做法是</strong>：往下走一层的时候，<code>path</code>变量在尾部追加，而往回走的时候，需要撤销上一次的选择，也是在尾部操作，因此<code>path</code>变量是一个栈；</li><li>深度优先遍历通过「回溯」操作，实现了全局使用一份状态遍历的效果。</li></ul><p>「<strong>设计状态变量</strong>」</p><ul><li>首先这棵树除了根节点和叶子结点以外，每一个节点做的事情其实是一样的，即：在已经选择了一些数的前提下，在剩下的还没有选择的数中，依次选择一个数，这显然是一个<strong>递归</strong>结构；</li><li>递归的终止条件是：一个排列中的数字已经选够了，因为我们需要一个变量来表示当前程序递归到第几层，我们把这个变量叫做<code>depth</code>，其实就是拼接路径<code>path</code>集合的大小。</li><li>布尔数组<code>isVisited</code>，初始化的时候都为<code>false</code>表示这些数都还没有被选择，当我们选定一个数的时候，就将这个数组的相应位置设置为<code>true</code>，这样在考虑下一个位置的时候，就能够以<code>O(1)</code>的时间复杂度判断这个数是否被选择过，这是一种「以空间换时间」的思想。或者采用<code>path.contains(nums[i])</code>判断是否访问过，在数组元素本身不重复时可用，但时间复杂度<code>O(n)</code>。</li></ul><p>这些变量称为「状态变量」，它们表示了在求解一个问题的时候所处的阶段。需要根据问题的场景设计合适的状态变量。</p><p>变量<code>path</code>所指向的列表<strong>在深度优先遍历的过程中只有一份</strong>，深度优先遍历完成以后，回到根节点，称为空列表。</p><p>在<code>Java</code>中，参数传递是<strong>值传递</strong>，对象类型变量在传参过程中，<strong>复制的是变量的地址</strong>。这些地址被添加到<code>res</code>变量，<strong>实际上指向的是同一块内存地址</strong>，因此我们直接往<code>res</code>添加<code>path</code>会看到<code>6</code>个空列表对象。解决办法很简单，在添加时做一次拷贝即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//res.add(path);//值传递，添加6个复制地址，指向同一个内存，最后为空列表</span>    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解决，拷贝一次即可</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>到这，你就能写出该题的代码了。接下来我们<strong>深入理解下回溯过程</strong>。</p><p>从 <code>[1, 2, 3]</code> 到 <code>[1, 3, 2] </code>，深度优先遍历是这样做的，从 <code>[1, 2, 3]</code> 回到<code>[1, 2]</code>的时候，需要撤销刚刚已经选择的数<code> 3</code>，因为在这一层只有一个数 <code>3</code> 我们已经尝试过了，因此程序回到上一层，需要撤销对<code> 2</code> 的选择，好让后面的程序知道，选择 <code>3 </code>了以后还能够选择<code> 2</code>。</p><p>执行深度优先遍历，从较深层的结点返回到较浅层结点的时候，需要做「状态重置」，即「回到过去」、「恢复现场」。你可以通过打印递归前后变化观察。</p><p>在一些字符串的搜索问题中，<strong>有时不需要回溯</strong>的原因是这样的：字符串变量在拼接的过程中会产生新的对象。</p><p>为什么「不是广度优先遍历」</p><ul><li>首先是正确性，只有遍历状态空间，才能得到所有符合条件的解，这一点  <code>BFS  </code>和 <code>DFS </code>其实都可以；</li><li><strong>在深度优先遍历的时候</strong>，<strong>不同状态之间的切换很容易</strong> ，可以再看一下上面有很多箭头的那张图，每两个状态之间的差别只有  <code>1 </code> 处，因此回退非常方便，这样全局才能使用一份状态变量完成搜索；</li><li>如果使用广度优先遍历，从浅层转到深层，状态的变化就很大，此时我们不得不在每一个状态都新建变量去保存它，从性能来说是不划算的；</li><li>如果使用广度优先遍历就得使用队列，然后编写结点类。队列中需要存储每一步的状态信息，需要存储的数据很大，真正能用到的很少 ；</li><li>使用深度优先遍历，直接使用了系统栈，系统栈帮助我们保存了每一个结点的状态信息。我们不用编写结点类，不必手动编写栈完成深度优先遍历。</li></ul><p>「<strong>不回溯可不可以</strong>」</p><p>可以。搜索问题的状态空间一般很大，如果每一个状态都去创建新的变量，时间复杂度是  <code>O(n) </code>。在候选数比较多的时候，在非叶子结点上创建新的状态变量的性能消耗就很严重。</p><p>就本题而言，只需要叶子结点的那个状态，在叶子结点执行拷贝，时间复杂度是 <code>O(n)</code>。路径变量在深度优先遍历的时候，结点之间的转换只需要 <code>O(1) </code>。</p><p>最后，由于回溯算法的时间复杂度很高，因此在遍历的时候，如果能够提前知道这一条分支不能搜索到满意的结果，就可以提前结束，这一步操作称为 <strong>剪枝</strong>。</p><p><strong>剪枝</strong></p><ul><li>回溯算法会应用「剪枝」技巧达到以加快搜索速度。<strong>有些时候，需要做一些预处理工作（例如排序）才能达到剪枝的目的</strong>。预处理工作虽然也消耗时间，但能够剪枝节约的时间更多；</li><li>提示：剪枝是一种技巧，通常需要根据不同问题场景采用不同的剪枝策略，需要在做题的过程中不断总结。</li><li>由于回溯问题本身时间复杂度就很高，所以能用空间换时间就尽量使用空间。</li></ul><p><strong>总结</strong></p><p>做题的时候，建议 <strong>先画树形图</strong> ，<strong>画图能帮助我们想清楚递归结构，想清楚如何剪枝</strong>。拿题目中的示例，想一想人类是怎么做的，一般这样下来，这棵递归树都不难画出。</p><p>在画图的过程中思考清楚：</p><ul><li>分支如何产生；</li><li>题目需要的解在哪里？是在叶子结点、还是在非叶子结点、还是在从根结点到叶子结点的路径？</li><li>哪些搜索会产生不需要的解的？例如：产生重复是什么原因，如果在浅层就知道这个分支不能产生需要的结果，应该提前剪枝，剪枝的条件是什么，代码怎么写？</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接路径</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否访问过</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//深度优先搜索</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> isVisited<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归结束条件，拼接路径长度和数组长度相等</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//剪枝，已经访问过，继续下一个元素</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// System.out.println("递归前"+path);</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> isVisited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在得到第一个结果[1,2,3]之后，回退2次到[1]</span>            <span class="token comment" spellcheck="true">//首先，下一次的dfs的return回退一次，回退之后，i=2，for循环执行完毕，当前dfs又回退一次，由此到[1]。按步骤Debug理解！！！</span>            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// System.out.println("递归后"+path);</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n×n!)，回溯算法由于其遍历的特点，时间复杂度一般比较高，有些问题分析起来很复杂。一些回溯算法解决的问题，剪枝剪得好的话，复杂度会降的很低，因此分析最坏时间复杂度的意义也不是很大，但还是视情况而定。递归调用次数O(n!)，将当前答案复制到答案集合中O(n)，两者相乘O(n×n!)。</li><li>空间复杂度：O(n)，其中 n 为序列的长度。除答案数组以外，递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，这里可知递归调用深度为 O(n)。</li></ul><h2 id="0047-全排列-II"><a href="#0047-全排列-II" class="headerlink" title="0047. 全排列 II"></a>0047. 全排列 II</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/permutations-ii/">https://leetcode-cn.com/problems/permutations-ii/</a></p><p><strong>方法一</strong>：回溯+剪枝</p><p>这题与<a href="https://leetcode-cn.com/problems/permutations/">0046全排列</a>不同，增加了序列中的元素可重复这一条件，但要求：返回的结果又不能有重复元素。</p><p>思路：在遍历的过程中，一边遍历，一遍检测，<strong>在一定会产生重复结果集的地方剪枝</strong>。</p><p>我们可以在搜索之前对候选数组排序，一旦发现某个分支搜索下去可能搜索到重复的元素就停止搜索，这样结果集中不会包含重复列表。</p><p>画出树形结构如下：重点想象深度优先遍历在这棵树上执行的过程，哪些地方遍历下去一定会产生重复，这些地方的状态的特点是什么？<br>对比图中标注 ① 和 ② 的地方。相同点是：这一次搜索的起点和上一次搜索的起点一样。不同点是：</p><ul><li>标注 ① 的地方，<strong>搜索的数和上一次一样，但是上一个<code>1</code>刚刚被撤销</strong>，正是因为刚刚被撤销，下面的搜索中还会使用到，因此会产生重复，<strong>剪掉的就应该是这样的分支</strong>。</li><li>标注 ② 的地方，搜索的数和上一次一样，但是上一次的<code>1</code>还在使用中，<strong>不用剪枝</strong>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0047-1.6fc771ocfu00.png" alt="0047-1"></p><p>代码方面，<strong>只需要加上一段剪枝代码</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></code></pre><p>这段代码就能检测到标注为 ① 的两处节点，跳过它们，剪枝。注意：这里<code>isVisited[i-1]</code>不加<code>！</code>，测试也能通过，可以想一下为什么。建议对比这几个实验：</p><ul><li>干脆不写<code>!isVisited[i-1]</code>，结果会怎样？</li><li>写<code>isVisited[i-1]</code>结果是什么？给出结论：<code>!isVisited[i-1]</code>剪枝更彻底。</li></ul><p><a href="https://leetcode-cn.com/problems/permutations-ii/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liwe-2/">分析原因</a></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集合</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接路径</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序、剪枝的前提</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否访问过</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用回溯</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> isVisited<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归结束条件，拼接路径长度和数组长度相等</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//剪枝，已访问过，进入下一元素递归</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 剪枝条件：i > 0 是为了保证 nums[i - 1] 有意义</span>            <span class="token comment" spellcheck="true">// 写 !used[i - 1] 是因为 nums[i - 1] 在深度优先遍历的过程中刚刚被撤销选择</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// System.out.println("递归前"+path);</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> isVisited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在得到第一个结果[1,1,2]之后，回退2次到[1]</span>            <span class="token comment" spellcheck="true">//首先，下一次的dfs的return回退一次，回退之后，i=2，for循环执行完毕，当前dfs又回退一次，由此到[1]。按步骤Debug理解！！！</span>            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// System.out.println("递归后"+path);</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n×n!)，递归调用次数O(n!)，将当前答案复制到答案集合中O(n)，两者相乘O(n×n!)。</li><li>空间复杂度：O(n)，其中 n 为序列的长度。除答案数组以外，递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，这里可知递归调用深度为 O(n)。</li></ul><h2 id="0048-旋转图像"><a href="#0048-旋转图像" class="headerlink" title="0048. 旋转图像"></a>0048. 旋转图像</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/rotate-image/">https://leetcode-cn.com/problems/rotate-image/</a></p><p><strong>方法一</strong>：原地旋转</p><p>题目中说了是顺时针旋转<code>90</code>度，通过旋转可以发现一个规律：只需要从外到内一圈一圈的旋转即可。</p><ul><li>因为每圈交换处理了两行，交换圈数为维度的一半，不断缩小旋转圈子；</li><li>内层循环完成一圈旋转，每次交换四个变量。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0048-1.29zkmiq5n44k.png" alt="0048-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//辅助旋转</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交换圈数为维度一半</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//j变化，交换一圈</span>                temp<span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以第一次循环为例，保存左上角</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左上角=左下角</span>                matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左下角=右下角</span>                matrix<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右下角=左上角</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右上角=左上角</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n<sup>2</sup>)。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：用翻转代替旋转</p><p>我们还可以另辟蹊径，用翻转操作代替旋转操作。</p><p>看一个示例，首先通过水平轴翻转，然后根据主对角线翻转得到结果：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0048-2.3qxfx362jg20.png" alt="0048-2"></p><p>就得到了答案。为什么呢？对于水平翻转而言，我们只需要枚举矩阵上半部分的元素，和下半部分的元素进行交互，即：<br>$$<br>\operatorname{matrix}[\mathrm{row}][\mathrm{col}] \stackrel{\text { 水平轴再转 }}{\longrightarrow} \operatorname{matrix}[n-\text { row }-1][\mathrm{col}]<br>$$<br>对于主对角线翻转而言，我们只需要枚举对角线左侧的元素，和右侧的元素进行交换，即：<br>$$<br>\operatorname{matrix}[\text { row }][\mathrm{col}] \stackrel{\text { 主对角线翻转 }}{\longrightarrow} \operatorname{matrix}[\operatorname{col}][\text { row }]<br>$$<br>将它们联立即可得到：<br>$$<br>\begin{aligned}<br>\operatorname{matrix}[\mathrm{row}][\operatorname{col}] &amp; \stackrel{\text { 水平轴翻转 }}{\longrightarrow} \operatorname{matrix}[n-\text { row }-1][\mathrm{col}] \<br>&amp; \stackrel{\text { 主对角线翻转 }}{\longrightarrow} \operatorname{matrix}[\operatorname{col}][n-\text { row }-1]<br>\end{aligned}<br>$$<br><strong>和新建一个数组的关键等式等价</strong><br>$$<br>\operatorname{matrix}[\text { row }][\text { col }]=\operatorname{matrixnew}[\operatorname{col}][n-\text { row }-1]<br>$$<br><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//水平翻转</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对角线翻转</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n<sup>2</sup>)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0049-字母异位词分组"><a href="#0049-字母异位词分组" class="headerlink" title="0049. 字母异位词分组"></a>0049. 字母异位词分组</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/group-anagrams/">https://leetcode-cn.com/problems/group-anagrams/</a></p><p><strong>方法一</strong>：排序</p><p>由于互为字母异位词的两个字符串包含的字母相同，因此对两个字符串分别进行排序后得到的额字符串一定是相同的，故可以将排序之后的字符串作为哈希表的键，排序后相同的字符串集合作为哈希表的值。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//排序</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//哈希键值对</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历字符串数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> strs<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//转为char数组并排序</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据排序后的字符串最为键，查找字母异位词集合，把当前遍历字符串放入对应集合</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//再把修改后的键值对放入map集合中</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有字母异位词集合，用它新建一个集合返回</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nklog k)，n是strs中字符串数量，k是strs中字符串的最大长度。遍历strs和排序的时间复杂度。</li><li>空间复杂度：O(nk)，需要哈希表存储全部字符串。</li></ul><p><strong>方法二</strong>：计数</p><p>由于互为字母异位词的两个字符串包含的字母相同，因此两个字符串中的相同字母出现的次数一定是相同的，<strong>故可以将每个字母出现的次数使用字符串表示，作为哈希表的键</strong>。</p><p>注意：<strong>字母出现次数要做一定变化表示，将出现次数大于0的字母和出现次数按顺序拼接成字符串，作为哈希表的键。</strong>直接使用字母出现次数拼接，当某个字母出现次数大于9时，直接拼接字符会影响其它字母的表示。</p><p>由于字符串子包含小写字母，因此对于每个字符串，可使用长度为26的数组记录每个字母出现的次数，需要注意的是，在使用数组作为哈希表的键时，不同语言的支持成都不同，因此不同语言的实现方式也不同。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//计数</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//哈希键值对</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历字符串数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> strs<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//统计每个字符出现次数</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                counts<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 将每个出现次数大于 0 的字母和出现次数按顺序拼接成字符串，作为哈希表的键</span>            StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据统计字符串，放入当前遍历字符串到对应集合，最后放入映射表</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n(k+|∑|))，其中<code>n</code>是<code>strs </code>中的字符串的数量，<code>k </code>是<code>strs</code>中的字符串的的最大长度，<code>Σ </code>是字符集<code>26</code>。</li><li>空间复杂度：O(n(k+|∑|))，需要用哈希表存储全部字符串，而记录每个字符串中每个字母出现次数的数组需要的空间为 <code>O(∣Σ∣)</code>，在渐进意义下小于 <code>O(n(k+∣Σ∣))</code>，可以忽略不计。</li></ul><h2 id="0050-Pow-x-n"><a href="#0050-Pow-x-n" class="headerlink" title="0050. Pow(x, n)"></a>0050. Pow(x, n)</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/powx-n/description/">https://leetcode-cn.com/problems/powx-n/description/</a></p><p><strong>方法一</strong>：快速幂+递归</p><p>当指数 <code>n </code>为负数时，我们可以计算x<sup>-n</sup>，再取倒数得到结果。因此我们只需要考虑 <code>n </code>为自然数的情况。</p><p>「快速幂算法」的本质是分治算法。<strong>举个例子</strong>，如果我们要计算x<sup>64</sup>，我们可以按照：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0050-1.69d93u4ec4w0.png" alt="0050-1"></p><p>的顺序，从<code>x</code>开始，每次直接把上一次的结果进行平方，计算<code>6</code>次就可以得到x<sup>64</sup>的值，而不需要对<code>x</code>乘<code>63</code>次<code>x</code>。</p><p>再举个例子，如果我们要计算x<sup>77</sup>，我们可以按照：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0050-2.6wfw8b3zolo0.png" alt="0050-2"></p><p>的顺序，某些步骤直接将上一次结果进行平方，而又有些步骤把上次结果平方后，还要额外乘一个<code>x</code>。</p><p>直接从左到右进行推导看上去很困难，因为在每一步中，我们不知道在将上一次结果平方之后，还需不需要额外乘<code>x</code>，<strong>但如果我们从右往左看，分治的思想就十分明显了</strong>：</p><ul><li>当我们要计算x<sup>n</sup>时，我们可以先递归地计算出y=x<sup>⌊n/2⌋</sup>，<code>⌊n/2⌋</code>表示向下取整；</li><li>根据递归结算的结果，如果<code>n</code>为偶数，那么x<sup>n</sup>=y<sup>2</sup>，如果<code>n</code>为奇数，那么x<sup>n</sup>=y<sup>2</sup>×2；</li><li>递归的边界为<code>n=0</code>，任意数的<code>0</code>次方均为<code>1</code>。</li></ul><p>由于每次递归都使得指数减少一半，因此递归的层数为<code>O(log n)</code>，算法可以在很快的时间内得到结果。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> N <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止负数-2^31转为正数计算是溢出</span>        <span class="token keyword">return</span> N<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token function">qucMul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token function">qucMul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">qucMul</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> N<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归终止条件</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token function">qucMul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> N<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> N<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">?</span> y<span class="token operator">*</span>y <span class="token operator">:</span> y<span class="token operator">*</span>y<span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x^N为前一快速幂结果的平方，根据N的奇偶判断是否再乘以x</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log n)，即为递归的层数。</li><li>空间复杂度：O(log n)，即为递归的层数。这是由于递归的函数调用会使用栈空间。</li></ul><p><strong>方法二</strong>：快速幂+位运算</p><p><a href="https://leetcode-cn.com/problems/powx-n/solution/50-powx-n-kuai-su-mi-qing-xi-tu-jie-by-jyd/">参考解题思路</a>：这里有数学推导</p><p>直观理解，举个例子，x<sup>10</sup>，10的二进制是1010，然后用2进制转10进制的方法把它展成2的幂次和。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0050-3.3eql67txu6s0.jpg" alt="0050-3"></p><p>因此我们的算法就是：</p><ul><li>边界条件当<code>x=0</code>时，直接返回<code>1</code>（询问边界定义是否为<code>1</code>）；</li><li>初始化<code>res=1</code>；</li><li>当<code>n&lt;0</code>时：把问题转化至<code>n≥0</code>的范围内，即执行<code>x=1/x</code>，<code>n=-n</code>；</li><li>循环计算，当<code>n=0</code>时跳出</li><li><ul><li>当<code>n&amp;1=1</code>时：将当前<code>x</code>乘入<code>res</code>（即<code> res *= x</code> ）；</li><li>执行x = x<sup>2</sup>，（即 <code>x *= x </code>）；</li><li>执行 <code>n</code> 右移一位（即<code> n &gt;&gt;= 1</code>）。</li></ul></li><li>返回<code>res</code>。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快速幂+位运算</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界条件</span>        <span class="token keyword">long</span> N<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止转为正数运算溢出-2^31</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>N<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">;</span>            N<span class="token operator">=</span><span class="token operator">-</span>N<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//x^10 = x^(1010)二进制，二进制转十进制，变成相乘</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>N<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>N<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//N二进制末尾位为1，结果乘以当前x</span>                res <span class="token operator">*=</span> x<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            x <span class="token operator">*=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x平方</span>            N <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//N左移一位</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(log n)，二分的时间复杂度为对数级别。</li><li>空间复杂度：O(1)，res，b等变量占用常数大小的额外空间。</li></ul><h2 id="055-跳跃游戏"><a href="#055-跳跃游戏" class="headerlink" title="055. 跳跃游戏"></a>055. 跳跃游戏</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/jump-game/">https://leetcode-cn.com/problems/jump-game/</a></p><p><strong>方法一</strong>：贪心</p><p>这道题是一道典型的<code>贪心</code>类型题目。思路就是用一个变量记录当前能够到达的最大索引，并逐个遍历数组中的元素去更新这个索引，遍历完成判断这个索引是否大于<code>数组长度-1</code>即可。</p><p>以题目中的示例一<code>[2,3,1,1,4]</code>为例</p><ul><li>我们一开始在位置<code>0</code>，可以跳跃的最大长度为<code>2</code>，因此最远可以到达的位置被更新为<code>2</code>；</li><li>我们遍历到位置<code>1</code>，由于<code>1≤2</code>，因此位置<code>1</code>可达。我们用1加上它可以跳跃的最大长度<code>3</code>，将最远可以到达的位置更新为<code>4</code>。由于<code>4</code>大于等于最后一个位置<code>4</code>，因此我们直接返回<code>True</code>。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> rightMost<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以到达的最右端</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>rightMost<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前i小于等于可以到达最右端，更新righMost</span>                rightMost <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rightMost<span class="token punctuation">,</span> i<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//贪心，当前i能到达最右端</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>rightMost <span class="token operator">>=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rightMost可以到达最右端，直接返回true</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>为数组的大小，只需要访问<code>nums</code>数组一遍，共<code>n</code>个位置。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0056-合并区间"><a href="#0056-合并区间" class="headerlink" title="0056. 合并区间"></a>0056. 合并区间</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/merge-intervals/">https://leetcode-cn.com/problems/merge-intervals/</a></p><p><strong>方法一</strong>：排序</p><p>思路：</p><p>如果我们按照区间的左端点排序，那么在排完序的列表中，可以合并的区间一定是连续的。如下图所示，标记为蓝色、黄色和绿色的区间分别可以合并成一个大区间，它们在排完序的列表中是连续的。（正确性证明见<a href="https://leetcode-cn.com/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/">官方题解</a>）</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0056-1.2rderjp4uxg0.png" alt="0056-1"></p><p>算法</p><p>我们用数组<code>merged</code>存储最终的答案。</p><p>首先，我们将列表中的区间按照左端点升序排序。然后我们将第一个区间加入<code>merged</code>数组中，并按顺序依次考虑之后的每个区间：</p><ul><li>如果当前区间的左端点在数组<code>merged</code>中最后一个区间的右端点之后，那么它们不会重合，我们可以直接将这个区间加入数组<code>merged</code>的末尾。比如图中<code>(2,5),(10,11)</code>。</li><li>否则，它们重合，我们需要用当前区间的右端点更新数组<code>merged</code>，将其置为二者的较大值。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按照区间首端点排序</span>        <span class="token comment" spellcheck="true">// Arrays.sort(intervals, new Comparator&lt;int[]>()&amp;#123;//匿名内部类</span>        <span class="token comment" spellcheck="true">//     public int compare(int[] interval1, int[] interval2)&amp;#123;</span>        <span class="token comment" spellcheck="true">//         return interval1[0]-interval2[0];</span>        <span class="token comment" spellcheck="true">//     &amp;#125;</span>        <span class="token comment" spellcheck="true">// &amp;#125;);</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> <span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>val1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>val2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Lambda表达式，省略类型、return、&amp;#123;&amp;#125;</span>        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> L<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> R<span class="token operator">=</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> merged<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> L<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不重合</span>                merged<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>L<span class="token punctuation">,</span> R<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重合，取更新右端值，取R和旧区间右端点的最值</span>                merged<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>merged<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> merged<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>merged<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不知道ArrayList的toArray方法，用循环来做</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlog n)，其中n为区间的数量。除去排序的开销，我们只需要一次线性扫描，所以主要的时间开销是排序的O(nlogn)。</li><li>空间复杂度：O(log n)。存储答案之外，排序使用的额外空间。</li></ul><h2 id="0061-旋转链表"><a href="#0061-旋转链表" class="headerlink" title="0061. 旋转链表"></a>0061. 旋转链表</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/rotate-list/">https://leetcode-cn.com/problems/rotate-list/</a></p><p><strong>方法一</strong>：快慢指针</p><p>快慢指针，这种方式经常用于解决需要反向操作链表的问题。</p><p>需要记录链表长度<code>len</code>，求出实际旋转次数<code>k=k%len</code>。</p><p>主要思想是，让快指针先走<code>k</code>次，然后慢指针和快指针一起走，当快指针走完时，慢指针会刚好来到<code>k</code>的位置。此次慢指针的下一个节点就是新的头结点，慢指针当前的节点就是尾结点，最后把快指针指向的节点指向头结点。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快慢指针</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">rotateRight</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> head<span class="token operator">==</span>null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录链表长度</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等效旋转次数</span>        k <span class="token operator">=</span> k<span class="token operator">%</span>len<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//快指针先走k次</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//快慢指针一起走，直到fast.next为空</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改指向，返回新的头节点</span>        ListNode newHead <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        fast<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历链表两次。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：闭合成环</p><p>先遍历一次链表，得到链表长度和最后一个节点，闭合成环。有了链表长度就可以直接遍历到断开位置，然后修改指向断开环。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//闭合为环</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">rotateRight</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界处理</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> head<span class="token operator">==</span>null <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录链表长度和最后一个节点</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//闭合成环</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到断开位置</span>        k <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token operator">%</span>len<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改指向，返回新的头节点</span>        ListNode newHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，最坏情况下遍历链表两次。</li><li>空间负载的：O(1)。</li></ul><h2 id="0062-不同路径"><a href="#0062-不同路径" class="headerlink" title="0062. 不同路径"></a>0062. 不同路径</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/unique-paths/">https://leetcode-cn.com/problems/unique-paths/</a></p><p><strong>方法一</strong>：动态规划</p><p>对于<code>(0,0)</code>这个点来说，它只能往右走或者往下走。那么反过来，哪个点可以到达<code>(2,2)</code>呢？</p><ul><li>上方点<code>(1,2)</code></li><li>左方点<code>(2,1)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0062.6hmikh7bevk0.png" alt="0062"></p><p>搞清楚这个关系，动态规划的转移方程就很容易写出来了：<br>$$<br>\operatorname{dp}[i][j]=d p[i-1][j]+d p[i][j-1]<br>$$<br>解决了核心逻辑，再把边界条件处理一下就可以了。因为我们是从上到下一行一行推导的，所以我们要处理下第一行和第一列，将它们都赋值为<code>1</code>即可。</p><p>「<strong>空间优化</strong>」</p><p>我们在二维数组推导的时候发现，<code>dp[i][j]</code>的值来自于<code>dp[i-1][j]</code>和<code>dp[i][j-1]</code>。也就是只需要上一行的值就可以了，上上一行并不需要，所以这里可以用滚动数组的方式优化一下空间。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0062-2.u1qozmbakvk.png" alt="0062-2"></p><p>以上图所述，对于第三行<code>10</code>这个值，需要上方的值<code>+</code>左方的值。而经过上一次计算之后，第四列的值是<code>4</code>。此时我们不需要再跟上一行做累加，只需要<code>4</code>+<code>6</code>即可。所以我们可以申请长度为<code>n</code>的一维数组，将原先的动态规划方程<br>$$<br>dp[i][j]=dp[i-1][j]+dp[i][j-1]<br>$$<br>改为<br>$$<br>dp[j]=dp[j]+dp[j-1]<br>$$<br><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一行赋值1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一列赋值1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两层for循环推导，对于(i,j)来说，只能由上方或者左方转移过来</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.动态规划+空间优化</span><span class="token comment" spellcheck="true">//动态规划+空间优化</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一维动态规划数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化为全1</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//等式右边dp[j]是上一次计算结果（即，i,j处上方的值），加上左边dp[j-1]即为当前结果</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mn)。</li><li>空间复杂度：O(mn)，存储状态所需空间。</li><li>空间优化后，空间复杂度：O(n)，存储上一行状态所需空间。</li></ul><p><strong>方法二</strong>：排列组合</p><p>从左上角到右下角的过程中，我们需要移动<code>m+n-2</code>次，其中有m-1次向下移动，n-1次向右移动。因此路径的总数就等于从m+n-2次移动中选择m-1次向下移动的方案数，即组合数：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0062-3.45pcet4eu4m0.png" alt="0062-3"></p><p>因此我们直接计算出这个组合数即可。<code>(m+n-2)(m+n-3)...n / (m-1)!</code></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> ans <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回值范围</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span>n<span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> y<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> ans<span class="token operator">*</span>x<span class="token operator">/</span>y<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(m)。由于我们交换行列的值并不会对答案产生影响，因此我们总可以通过交换 m 和 n 使得 m≤n，这样空间复杂度降低至 O(min(m,n))。</li><li>空间复杂度：O(1)</li></ul><h2 id="0064-最小路径和"><a href="#0064-最小路径和" class="headerlink" title="0064 最小路径和"></a>0064 最小路径和</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/minimum-path-sum/">https://leetcode-cn.com/problems/minimum-path-sum/</a></p><p><strong>方法一</strong>：动态规划</p><p>此题是典型的动态规划题目。</p><p>「状态定义」，设<code>dp</code>为大小<code>m*n</code>，其中<code>dp[i][j]</code>的值代表走到<code>(i,j)</code>的最小路径和。</p><p>「转移方程」，题目要求只能向下和向右走</p><ul><li>上边界：当<code>i&gt;0</code>时，<code>dp[0][i] = dp[0][i-1]+grid[0][i]</code>；</li><li>左边界：当<code>i&gt;0</code>时，<code>dp[i][0] = dp[i-1][0]+grid[i][0]</code>；</li><li>其他：到达<code>(i,j)</code>只能是上方和左方，选择两者较小值加上<code>grid[i][j]</code>，即<code>dp[i][j]=Math.min(dp[i-1][j],dp[i][j-1])+grid[i][j]</code>；</li></ul><p>「初始状态」，<code>dp</code>初始化即可，无需修改初始值。</p><p>「返回值」，返回<code>dp</code>矩阵右下角的值，即走到终点的最小路径和。</p><p>注意，此题我们无需简历dp矩阵，完全可以在原始<code>grid</code>矩阵上修改。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token operator">==</span>null <span class="token operator">||</span> grid<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n<span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dp初始值</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首行，即上边界</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首列，即左边界</span>                <span class="token keyword">else</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其他</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> grid<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dp右下角，即最小路径和</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mn)，遍历整个<code>grid</code>矩阵的元素。</li><li>空间复杂度：O(1)，直接修改原矩阵，不使用额外空间。</li></ul><h2 id="0073-矩阵置零"><a href="#0073-矩阵置零" class="headerlink" title="0073. 矩阵置零"></a>0073. 矩阵置零</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/set-matrix-zeroes/">https://leetcode-cn.com/problems/set-matrix-zeroes/</a></p><p><strong>方法一</strong>：使用标记数组</p><p>本题难点：如果在输入矩阵上原地修改行列为<code>0</code>，会影响后续遍历判断。</p><p>直观想法是O(MN)算法，把原数组复制一份，根据<code>copy</code>出来的数组判断某个位置是否为<code>0</code>，然后在原始数组中修改。</p><p>上面方法是每次遇到<code>0</code>就修改对应的行列，优化方法是遍历一次矩阵，使用标记数组记录下每行、每列是否出现了<code>0</code>。最后通过遍历将行列置<code>0</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用标记数组，空间复杂度O(m+n)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标记每行、每列是否有0出现</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历得到标记数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//遍历修改数组，有出现0的行列置0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mn)，其中m、n分别是矩阵的行列数。我们至多遍历该矩阵两次。</li><li>空间复杂度：O(m+n)，我们需要分别记录每一行或每一列是否有零出现。</li></ul><p><strong>方法二</strong>：使用两个标记变量</p><p>我们可以用矩阵第一行和第一列代替方法一中的两个标记数组，以达到O(1)的额外空间。但这样会导致原数组的第一行和第一列被修改，无法记录它们是否原本包含<code>0</code>，因此我们需要额外使用两个标记变量分别记录第一行和第一列是否原本包含<code>0</code>。</p><p>分三步</p><p>1.使用两个变量<code>r0</code>和<code>c0</code>，记录「首行和首列」是否该被置零。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0073-1.5n6wn8wog3c0.png" alt="0073-1"></p><p>2.「非首行首列位置」</p><ul><li>将置零信息存储到原矩阵的「首行首列」</li><li>根据置零信息，置零「非首行首列」的位置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0073-2.6ixduj1movc0.png" alt="0073-2"></p><p>3.使用<code>r0</code>和<code>c0</code>，置零「首行首列」</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0073-3.6edqjsg6fq80.png" alt="0073-3"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用两个标记变量，空间复杂度O(1)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标记首行、首列是否有0出现</span>        <span class="token keyword">boolean</span> row0 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> col0 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首列有0</span>                col0 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首行有0</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                row0 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历非首行首列，置零信息存储到首行首列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i行有0</span>                    matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//j列有0</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//根据置零信息，遍历修改非首行首列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//首行首列修改</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row0<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>col0<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mn)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0075-颜色分类"><a href="#0075-颜色分类" class="headerlink" title="0075. 颜色分类"></a>0075. 颜色分类</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/sort-colors/">https://leetcode-cn.com/problems/sort-colors/</a></p><p><strong>方法一</strong>：双指针</p><p>我们可以考虑对数组进行两次遍历。在第一次遍历中，我们将数组中所有的<code>0</code>交换到数组的头部。在第二次遍历中，我们将数组中所有的<code>1</code>交换到头部的<code>0</code>之后。</p><p>如何一次遍历完成呢？</p><p>额外使用一个指针，即使用两个指针分别用来交换<code>0</code>和<code>2</code>。<code>p0</code>初始值为<code>0</code>，<code>p2</code>初始值为<code>n-1</code>。在遍历过程中，我们需要找出所有的<code>0</code>交换至数组的头部，并且找出所有的<code>2</code>交换至数组的尾部。</p><p>由于此时其中一个指针<code>p2</code>是<strong>从右向左</strong>移动的，因此当我们在<strong>从左向右遍历整个数组时</strong>，如果遍历到的位置超过了<code>p2</code>，那么就可以直接停止遍历了。</p><p>具体地，我们用指针我们从左向右遍历整个数组，设当前遍历到的位置为<code>i</code>，对应的元素为<code>nums[i]</code>。</p><ul><li>如果找到了<code>2</code>，将其与<code>nums[p2]</code>进行交换，并将<code>p2</code>前移一个位置。（交换后<code>nums[i]</code>可能为<code>0,1,2</code>，需要接着交换直至不为<code>2</code>）</li><li>如果找到了<code>0</code>，那么将其与<code>nums[p0]</code>进行交换，并将<code>p0</code>后移一个位置。（先判断<code>2</code>，再判断<code>0</code>，交换后<code>nums[i]</code>为<code>1</code>，无需接着交换）</li></ul><p>这样做是正确的吗？可以发现，对于第二种情况，当我们将<code> nums[i]</code> 与<code>nums[p2]</code>进行交换之后，新的<code>nums[i] </code>可能仍然是 <code>2</code>，也可能是<code> 0</code>。然而此时我们已经结束了交换，开始遍历下一个元素<code>nums[i+1]</code>，不会再考虑 <code>nums[i] </code>了，这样我们就会得到错误的答案。</p><p>因此，当我们找到<code> 2</code> 时，我们需要不断地将其与<code>nums[p2] </code>进行交换，直到新的<code>nums[i] </code>不为<code> 2</code>。此时，如果 <code>nums[i]</code> 为 <code>0</code>，那么对应着第一种情况；如果 <code>nums[i]</code> 为 <code>1</code>，那么就不需要进行任何后续的操作。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//双指针，一次遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sortColors</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//双指针，p0指向0的右边界，p2指向2的左边界</span>        <span class="token keyword">int</span> p0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p2<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//单次遍历，结束条件为i&lt;=p2</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>p2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//首先判断2，交换直到nums[i]不为2，nums[i]可能为0或1</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>p2 <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                temp<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                p2<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//然后判断0，为0交换，不为0即是1，不用交换。</span>            <span class="token comment" spellcheck="true">//注意：判断2和0的顺序不能变</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                temp<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>p0<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>p0<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                p0<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中<code>n</code>是数组<code>nums</code>的长度。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二</strong>：刷漆</p><p>用<code>zero</code>、<code>one</code>分别表示<code>0</code>、<code>1</code>的右边界。遍历数组时，记录下待处理的值<code>nums[i]</code>：</p><ul><li>首先填入<code>2</code>，<code>nums[i]=2</code>；</li><li>如果<code>temp&lt;2</code>，<code>1</code>的右边界<code>one</code>要向右挪一格。即填入<code>1</code>；</li><li>如果<code>temp==0</code>，<code>0</code>的右边界<code>zero</code>要向右挪一格。即填入<code>0</code>。</li></ul><p>这种填入顺序保证了不会出错。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//刷漆</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sortColors</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//zero、one分别表示0、1的右边界</span>        <span class="token keyword">int</span> zero<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> one<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//记录待处理的值</span>            temp<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//不管怎样，先赋值为2</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//&lt;2的话，1的右边界one要向右挪一格</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>one<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                one<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//==0的话，0的右边界要向右挪一格</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>zero<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                zero<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中<code>n</code>是数组<code>nums</code>的长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0078-子集"><a href="#0078-子集" class="headerlink" title="0078. 子集"></a>0078. 子集</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/subsets/">https://leetcode-cn.com/problems/subsets/</a></p><p><strong>方法一</strong>：回溯</p><ol><li><code>DFS</code>和回溯算法的区别</li></ol><p><code>DFS</code>是一个劲的往某一个方向搜索，而回溯算法建立在<code>DFS</code>基础之上，但不同的是在搜索过程中，达到结束条件后，恢复状态，回溯到上一层，再次搜索。因此回溯算法与<code>DFS</code>的<strong>区别就在于有无状态重置</strong>。</p><ol start="2"><li>何时使用回溯算法</li></ol><p><strong>当问题需要“回头”，以此查找出所有的解的时候，使用回溯算法</strong>。即满足结束条件或者发现不是正确路径的时候（走不通），需要撤销选择，回到上一个状态，继续尝试，直到找出所有解为止。</p><ol start="3"><li><strong>回溯算法如何写</strong>（从上而下，※代表难点，根据题目而变化）</li></ol><ul><li>①画出递归树，找到状态变量(回溯函数的参数)，这一步非常重要※</li><li>②根据题意，确立结束条件</li><li>③找准选择列表(与函数参数相关),与第一步紧密关联※</li><li>④判断是否需要剪枝</li><li>⑤作出选择，递归调用，进入下一层</li><li>⑥撤销选择</li></ul><ol start="4"><li>回溯问题的类型</li></ol><p>第一种：子集、组合。第二种：全排列。第三种：搜索。</p><p><strong>注意</strong>：子集、组合与排列是不同性质的概念。子集、组合是<strong>无关顺序的</strong>，而排列是和元素<strong>顺序有关的</strong>，如<code> [1,2]</code> 和<code> [2,1]</code> 是同一个组合(子集)，但<code>[1,2]</code>和<code> [2,1]</code> 是两种不一样的排列！！！因此被分为两类问题。</p><p>对于本题，解题步骤如下。</p><p>①递归树</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0078-1.3wubkiodyhk0.png" alt="0078-1"></p><p>观察上图可得，<strong>选择列表里的数，都是选择路径(红色框)后面的数</strong>，比如<code>[1]</code>这条路径，他后面的选择列表只有<code>2、3</code>，<code>[2]</code>这条路径后面只有<code>3</code>这个选择，那么这个时候，就应该使用一个参数<code>begin</code>，来<strong>标识当前的选择列表的起始位置</strong>。也就是标识每一层的状态，因此被形象的称为”<strong>状态变量</strong>“。</p><p>②找出结束条件</p><p><strong>此题非常特殊，所有路径都应该加入结果集，所以不存在结束条件</strong>。或者说当<code>begin</code>参数超越数组边界的时候，程序就自己跳过下一层递归了，因此不需要手写结束条件，直接加入结果集。</p><p>③找出选择列表</p><p>在①中已经提过，子集问题的选择列表，是上一条路径之后的数。</p><p>④判断是否需要剪枝</p><p>从递归树中看到，路径没有重复的，也没有不符合条件的，所以不需要剪枝。</p><p>⑤做出选择(即for循环里面的)</p><p>⑥撤销选择</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//回溯</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//路径</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用回溯函数</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊，所有路径都应该加入结果集，无边界条件</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>begin<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//做出选择</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归进入下一层，注意i+1，标识下一个选择列表的开始位置，最重要的一步</span>            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//撤销选择</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n*2<sup>n</sup>)，一共2<sup>n</sup>个状态，每种状态需要O(n)的时间来构造子集。</li><li>空间复杂度：O(n)。递归栈空间的代价是O(n)。</li></ul><h2 id="0079-单词搜索"><a href="#0079-单词搜索" class="headerlink" title="0079. 单词搜索"></a>0079. 单词搜索</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/word-search/">https://leetcode-cn.com/problems/word-search/</a></p><p><strong>方法一</strong>：深度优先搜索</p><p>设函数<code>check(i,j,k)</code>判断以网络的<code>(i,j)</code>位置出发，能否搜索到单词<code>word[k..]</code>，其中<code>word[k..]</code>表示字符串<code>word</code>从第<code>k</code>个字符开始的后缀子串。如果能搜索到，则返回<code>true</code>，反之返回<code>false</code>。函数<code>check(i,j,k)</code>的执行步骤如下：</p><ul><li>如果<code>board[i][j]≠s[k]</code>，当前字符不匹配，直接返回<code>false</code>。</li><li>如果当前已经访问到字符串的末尾，且对应字符仍然匹配，此时直接返回<code>true</code>；</li><li>否则，遍历当前位置的所有相邻位置。如果从某个相邻出发，能够搜索到子串<code>word[k+1..]</code>，则返回<code>true</code>，否则返回<code>false</code>。</li></ul><p>这样，我们对每一个位置<code>(i,j)</code>都调用<code>check(i,j,0)</code>进行检查：只要有一处返回<code>true</code>，就说明网络中能够找到相应的单词，否则说明找不到。</p><p>为了防止重复遍历相同的位置，需要额外维护一个与<code>board</code>等大<code>visited</code>数组，用于表示每个位置是否被访问过。每次遍历相邻位置时，需要跳过已经被访问的位置。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> String word<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h<span class="token operator">=</span>board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> w<span class="token operator">=</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每个位置是否访问过</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历网格每一个位置，检测是否能从该位置出发找到word。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>h<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>w<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> isVisited<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到直接返回true</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历到最后没有找到，返回false</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> String word<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//终止条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i,j处字符与当前字符不匹配</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i,j处字符与当前字符匹配，且当前字符为word的最后一个字符</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置i,j处已访问</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i,j处字符与当前字符匹配，但不是word的最后一个字符</span>        <span class="token comment" spellcheck="true">//判断四个相邻位置是否有匹配word下一个字符的</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> directions <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i,j处的相邻位置，右、左、下、上</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dir <span class="token operator">:</span> directions<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newi <span class="token operator">=</span> i<span class="token operator">+</span>dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新坐标</span>            <span class="token keyword">int</span> newj <span class="token operator">=</span> j<span class="token operator">+</span>dir<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>newi<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newi <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> newj<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newj<span class="token operator">&lt;</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//限定边界</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>newi<span class="token punctuation">]</span><span class="token punctuation">[</span>newj<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> isVisited<span class="token punctuation">,</span> newi<span class="token punctuation">,</span> newj<span class="token punctuation">,</span> word<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        result<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//i,j处四个方向深度搜索完毕，设置i,j未访问，进入下一个检测起始位置</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：一个非常宽松的上界为 O(MN⋅3 <sup>L</sup> )，其中 <code>M,N </code>为网格的长度与宽度，<code>L </code>为字符串 <code>word </code>的长度。</li><li>空间复杂度：O(MN)。我们额外开辟了O(MN)的<code>visited</code>数组，同时栈的深度最大为O(min(L,MN))。</li></ul><h2 id="0080-删除排序数组中的重复项-II"><a href="#0080-删除排序数组中的重复项-II" class="headerlink" title="0080. 删除排序数组中的重复项 II"></a>0080. 删除排序数组中的重复项 II</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/</a></p><p><strong>方法一</strong>：双指针</p><p>因为给定数组是有序的，所以相同元素必然连续。我们可以使用双指针解决本题，遍历数组检查每一个元素是否应该被保留，如果应该被保留，就将其移动到指定位置。具体地，</p><ul><li>设置快慢两个指针：<code>fast</code>和<code>slow</code>，初始值均为<code>2</code>，<code>slow</code>指针表示处理出的数组长度，<code>fast</code>指针表示已经检查过的数组的长度，即<code>nums[fast]</code>表示待检查的第一个元素，<code>nums[slow-1]</code>为上一个应该被保留的元素所移动到的指定位置；</li><li>本题要求相同元素最多出现两次，所以我们需要检查上上个应该被保留的元素<code>nums[slow-2]</code>是否和当前待检查元素<code>nums[fast]</code>相同。当且仅当<code>nums[slow-2]==nums[fast]</code>时，当前待检查元素不应该被保留（因为此时必然有<code>nums[slow-2]==nums[slow-1]==nums[fast]</code>）。</li><li>最后，<code>slow</code>即为处理好的数组长度。</li><li>特别地，数组的前两个数必然可以被保留，因此对于长度不超过<code>2</code>的数组，我们无需进行任何处理，<strong>对于长度超过<code>2</code>的数组，我们直接将双指针的初始值设为2即可</strong>。</li></ul><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">删除有序数组中的重复项</a>，这道题目被修改为<code>每个元素只能出现一次</code>。我们只需要修改快慢指针初始值为<code>1</code>，判断<code>nums[slow-1]</code>和<code>nums[fast]</code>是否相等确定是否保留。</p><p><code>一般规律</code>：如果要求每个元素最多出现<code>K</code>次，只需要修改快慢指针初始值为<code>K</code>，判断<code>nums[slow-K]</code>和<code>nums[fast]</code>是否相等确定是否保留。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//双指针</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊判断，如果nums长度小于2，直接输出长度n即可</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>        <span class="token keyword">int</span> slow<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> fast<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//题目要求最多两个数相同，如果满足不等条件，fast处应该放入结果</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>slow<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//更新slow</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>                slow<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//不管判断结果如何，fast均前移</span>            fast<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果长度，即slow</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历数组一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0086-分隔链表"><a href="#0086-分隔链表" class="headerlink" title="0086. 分隔链表"></a>0086. 分隔链表</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/partition-list/">https://leetcode-cn.com/problems/partition-list/</a></p><p><strong>方法一</strong>：双哑节点</p><p>直观来说我们只需<strong>维护两个链表</strong><code>small</code> 和<code>large</code> 即可，<code>small</code> 链表按顺序存储所有小于<code>x</code> 的节点，<code>large</code> 链表按顺序存储所有大于等于 <code>x</code> 的节点。遍历完原链表后，我们只要将 <code>small</code> 链表尾节点指向<code>large</code> 链表的头节点即能完成对链表的分隔。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0086-1.50hgifl355s0.gif" alt="0086-1">为了实现上述思路，我们设<code>smallHead</code> 和<code>largeHead</code> 分别为两个链表的哑节点，即它们的<code>next</code> 指针指向链表的头节点，<strong>这样做的目的是为了更方便地处理头节点为空的边界条件</strong>。起初，设 <code>small</code> 和 <code>large</code> 节点指向各自的哑节点。随后，从前往后遍历链表，判断当前链表的节点值是否小于 <code>x</code>，如果小于就将 <code>small</code> 的<code>next</code> 指针指向该节点，否则将<code>large</code> 的<code>next</code> 指针指向该节点。</p><p><strong>遍历结束后</strong>，<strong>我们将<code>large</code> 的 <code>next</code> 指针置空</strong>，这是因为当前节点复用的是原链表的节点，而其 <code>next</code> 指针可能指向一个小于 <code>x</code> 的节点，我们需要切断这个引用。</p><p>同时将<code>small</code> 的 <code>next</code> 指针指向 <code>largeHead.next</code> ，即真正意义上的<code>large</code> 链表的头节点。最后返回 <code>smallHead</code> 的 <code>next</code> 指针即为我们要求的答案。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//双哑节点</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">partition</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置两个哑节点，两个指针指向两个哑节点</span>        ListNode smallHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode largeHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode small <span class="token operator">=</span> smallHead<span class="token punctuation">;</span>        ListNode large <span class="token operator">=</span> largeHead<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历链表</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前值小于特定值x，放入small链表中</span>                small<span class="token punctuation">.</span>next<span class="token operator">=</span> head<span class="token punctuation">;</span>                small <span class="token operator">=</span> small<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前值大于等于特定值x，放入large链表中</span>                large<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>                large <span class="token operator">=</span> large<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//合并两个链表，为防止成环，大链表末尾指向空</span>        large<span class="token punctuation">.</span>next<span class="token operator">=</span>null<span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next<span class="token operator">=</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> smallHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历链表一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0090-子集-II"><a href="#0090-子集-II" class="headerlink" title="0090. 子集 II"></a>0090. 子集 II</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/subsets-ii/">https://leetcode-cn.com/problems/subsets-ii/</a></p><p><strong>方法一</strong>：回溯法</p><p>该题是<a href="https://leetcode-cn.com/problems/subsets/">子集</a>的变形，区别在于元素可重复，需要<strong>剪枝</strong>（<strong>排序是剪枝的前提！</strong>）</p><p>自然想到用回溯法求「所有可能的结果」。<strong>回溯法</strong>是一种思想，而<strong>递归</strong>是一种编程方法，回溯法可以用递归实现。</p><p><strong>回溯法的整体思路</strong>是：搜索每一条路，每次回溯是对具体的一条路径而言的。对当前搜索路径下的的未探索区域进行搜索，则可能有两种情况：</p><ul><li>当前未搜索区域满足结束条件，则保存当前路径并退出当前搜索；</li><li>当前未搜索区域需要继续搜索，则遍历当前所有可能的选择：如果该选择符合要求，则把当前选择加入当前的搜索路径中，并继续搜索新的未探索区域。</li></ul><p>上面说的未搜索区域是指搜索某条路径时的未搜索区域，并不是全局的未搜索区域。 </p><p><strong>回溯法搜所有可行解的模板</strong>一般是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>未探索区域<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>path满足条件<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # 深度拷贝        <span class="token keyword">return</span><span class="token punctuation">;</span>        # 不用继续搜索，<span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>遍历未探索区域<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>符合剪枝要求<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            剪枝<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>当前选择<span class="token punctuation">)</span><span class="token punctuation">;</span> # 加入当前选择        <span class="token function">dfs</span><span class="token punctuation">(</span>新的未探索区域<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span> # 深度优先        path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # 撤销当前选择    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>对于本题，重复元素显然需要剪枝。要提前排序处理。递归树如图所示，剪枝条件是新的选择和刚被撤销的选择相等，即<code>i&gt;begin &amp;&amp; nums[i-1]==nums[i]</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0090-1.1zgz8lbgii68.png" alt="0090-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//回溯</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接路径</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排序！剪枝的前提！！！</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用回溯函数</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊，无结束条件，选择路径都是子集结果</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>begin<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>begin <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重复元素剪枝</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//探索新的位置区域</span>            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//撤销选择</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n<code>*</code>2<sup>n</sup>)，<code>n</code>是数组<code>nums</code>的长度。排序时间复杂度为O(nlogn)，最坏情况下 <code>nums</code> 中无重复元素，需要枚举其所有 2<sup>n</sup>个子集，每个子集加入答案时需要拷贝一份，耗时 O(n)，共O(n<code>*</code>2<sup>n</sup>)。</li><li>空间复杂度：O(n)，递归栈空间O(n)，path空间O(n)。</li></ul><h2 id="0091-解码方法"><a href="#0091-解码方法" class="headerlink" title="0091. 解码方法"></a>0091. 解码方法</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/decode-ways/">https://leetcode-cn.com/problems/decode-ways/</a></p><p><strong>方法一</strong>：动态规划</p><p><strong>这其实是一道字符串类的动态规划题，不难发现对于字符串<code>s</code>的某个位置<code>i</code>而言，我们只关心「位置<code>i</code>自己能否形成<code>item</code>」和「位置<code>i</code>能够与上一个位置<code>i-1</code>能否形成<code>item</code>」，而不关心<code>i-1</code>之前的位置。</strong></p><p>用<code>dp[i]</code>记录以<code>i</code>结尾的译码方法总数，分情况讨论（建立最优子结构）</p><ul><li>若<code>s[i]=&#39;0&#39;</code>，</li><li><ul><li>那么若<code>s[i-1]=&#39;1&#39; or &#39;2&#39;</code>，<code>s[i-1]+s[i]</code>唯一被译码，不增加情况，<code>dp[i]=dp[i-2]</code>。否则<code>return 0</code>（如字符串中存在<code>30</code>，无法译码）。</li></ul></li><li>否则<code>s[i]</code>在范围<code>[1,9]</code>内，</li><li><ul><li>若<code>s[i-1]=&#39;1&#39;</code>，则<code>s[i-1]</code>与<code>s[i]</code>分开译码，为<code>dp[i-1]</code>，合并译码，为<code>dp[i-2]</code>。则<code>dp[i]=dp[i-1]+dp[i-2]</code>。</li><li>若<code>s[i-1]=&#39;2&#39;</code>且<code>s[i]</code>在<code>[1,6]</code>范围内，则<code>s[i-1]</code>与<code>s[i]</code>分开译码，为<code>dp[i-1]</code>，合并译码，为<code>dp[i-2]</code>。则<code>dp[i]=dp[i-1]+dp[i-2]</code>。</li><li>其余情况<code>dp[i]=dp[i-1]</code>。</li></ul></li></ul><p><strong>细节</strong>：由于字符串存在前导<code>0</code>，所以要特判字符串首个字符为<code>0</code>的情况，遍历从第二个字符开始。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//dp[-1]=dp[0]=1</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从第二个字符开始遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//s[i-1]和s[i]被唯一译码，不增加情况</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'1'</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    cur <span class="token operator">=</span> pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新dp[i]：dp[i]=dp[i-2]</span>                <span class="token comment" spellcheck="true">//无法解码s[i-1]和s[i]，如"30"</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//s[i-1]和s[i]可以分开译码，也可以合并译码</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'1'</span> <span class="token operator">||</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'2'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'1'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token operator">+</span>pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新dp[i]：dp[i]=dp[i-1]+dp[i-2]</span>            <span class="token comment" spellcheck="true">//其余情况</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新dp[i]：dp[i]=dp[i-1]</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新dp[i-1]：dp[i-1]=dp[i-2]</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历字符串一次，共<code>n</code>个状态需要被转移。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0092-反转链表-II"><a href="#0092-反转链表-II" class="headerlink" title="0092. 反转链表 II"></a>0092. 反转链表 II</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">https://leetcode-cn.com/problems/reverse-linked-list-ii/</a></p><p><strong>方法一</strong>：双指针-头插法</p><p>1、我们定义两个指针，分别称为<code>guard</code>和<code>point</code>。给链表添加一个傀儡头节点<code>dummyHead</code>。</p><p>我们首先根据方法的参数<code>m</code>确定<code>guard</code>和<code>point</code>的位置。将<code>gurad</code>移动到第一个要反转的节点的前面，将<code>point</code>移动到第一个要反转的节点的位置上。我们以<code>m=2,n=4</code>为例图解。</p><p>2、将<code>point</code>后面的元素删除，然后添加到<code>gurad</code>的后面，即头插法。</p><p>3、根据<code>m</code>和<code>n</code>重复步骤（2）；</p><p>4、返回<code>dummyHead.next</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0092-1.5v7b31d6bio0.png" alt="0092-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//双指针+头插法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义一个傀儡头节点，方便处理</span>        ListNode dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummyHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化指针</span>        ListNode guard <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        ListNode point <span class="token operator">=</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将指针移动到相应的位置，point指向第一个反转节点，guard指向</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            guard <span class="token operator">=</span> guard<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            point <span class="token operator">=</span> point<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//头插法插入节点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//删除节点</span>            ListNode removed <span class="token operator">=</span> point<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            point<span class="token punctuation">.</span>next <span class="token operator">=</span> point<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//头插</span>            removed<span class="token punctuation">.</span>next <span class="token operator">=</span> guard<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            guard<span class="token punctuation">.</span>next <span class="token operator">=</span> removed<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回新链表头节点</span>        <span class="token keyword">return</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，最多遍历链表一次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0094-二叉树的中序遍历"><a href="#0094-二叉树的中序遍历" class="headerlink" title="0094. 二叉树的中序遍历"></a>0094. 二叉树的中序遍历</h2><p><strong>0144前序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a></p><p><strong>0094中序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a></p><p><strong>0145后序遍历题目地址</strong>：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/</a></p><p><strong>0102层次遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p><p><strong>方法一</strong>：递归实现</p><p>递归遍历太简单了。</p><ul><li>前序遍历：打印-左-右；</li><li>中序遍历：左-打印-右；</li><li>后序遍历：左-右-打印；</li></ul><p>题目要求中序遍历，递归实现很简单。</p><ul><li>终止条件：当前节点为空时</li><li>函数内：digital的调用左节点，打印当前节点，再递归调用右节点。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//递归-前中后序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左-打印-右，调整这里的顺序实现前中后序遍历</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，访问每个节点一次。</li><li>空间复杂度：O(h)，<code>h</code>是树的高度。</li></ul><p><strong>方法二</strong>：迭代实</p><p>这题的真正难点在于如何用非递归的方式实现。</p><p>递归实现时，是函数自己调用自己，一层层的嵌套下去，<code>OS/JVM</code>会自动帮我们用<strong>栈</strong>来保存每个调用的函数，现在我们需要自己模拟这样的调用过程。</p><p>递归的调用过程是不断往左边走，当左边走不下去了，就打印节点，并转向右边，然后右边继续这个过程。我们在迭代时，就可以用栈来模拟上面的调用过程。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0094-1.1bhjq7i0sh1c.gif" alt="0094-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//迭代-中序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点不为空</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//压入当前节点，向左遍历</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左子树为空，弹出父节点，记录父节点值，向右遍历</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//迭代-前序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点不为空</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首先记录父节点值，父节点入栈，然后向左遍历</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左子树为空，弹出父节点，向右遍历</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//迭代-后序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点不为空</span>                res<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头插法！先记录根节点值，根节点入栈，向右遍历</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右子树为空，弹出根节点，向左遍历</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，访问每个节点一次。</li><li>空间复杂度：O(h)，<code>h</code>是树的高度。</li></ul><h2 id="0095-不同的二叉搜索树-II"><a href="#0095-不同的二叉搜索树-II" class="headerlink" title="0095. 不同的二叉搜索树 II"></a>0095. 不同的二叉搜索树 II</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/unique-binary-search-trees-ii/">https://leetcode-cn.com/problems/unique-binary-search-trees-ii/</a></p><p><strong>方法一</strong>：回溯</p><p><strong>二叉搜索树关键的性质</strong>是根节点的值大于左子树所有节点的值，小于右子树所有节点的值，且左子树和右子树也同样为二叉搜索树。因此在生成所有可行的二叉搜索树的时候，假设当前序列长度为 <code>n</code>，如果我们枚举根节点的值为 <code>i</code>，那么根据二叉搜索树的性质我们可以知道左子树的节点值的集合为 <code>[1…i−1]</code>，右子树的节点值的集合为 <code>[i+1…n]</code>。而左子树和右子树的生成相较于原问题是一个序列长度缩小的<strong>子问题</strong>，因此我们可以想到用<strong>回溯</strong>的方法来解决这道题目。</p><p>我们定义 <code>generateAllTrees(start, end) </code>函数表示当前值的集合为 <code>[start,end]</code>，返回序列<code>[start,end] </code>生成的所有可行的二叉搜索树。按照上文的思路，我们考虑枚举 <code>[start,end]</code> 中的值 <code>i</code> 为当前二叉搜索树的根，那么序列划分为了 <code>[start,i−1] </code>和 <code>[i+1,end]</code> 两部分。我们<strong>递归调用这两部分</strong>，即 <code>generateAllTrees(start, i - 1)</code> 和 <code>generateAllTrees(i + 1, end)</code>，获得所有可行的左子树和可行的右子树，那么最后一步我们只要从可行左子树集合中选一棵，再从可行右子树集合中选一棵拼接到根节点上，并将生成的二叉搜索树放入答案数组即可。</p><p><strong>递归的入口</strong>即为 <code>generateAllTrees(1, n)</code>，<strong>出口</strong>为当 <code>start&gt;end</code> 的时候，当前二叉搜索树为空，返回<code>null</code>即可。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> <span class="token function">generateTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//n==0，返回空集合</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">generateAllTrees</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> <span class="token function">generateAllTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回所有二叉搜索树结果</span>        List<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> allTrees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件，返回空二叉树</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">></span>end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            allTrees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> allTrees<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//枚举所有根节点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//i为根节点，获得所有可行的左子树集合</span>            List<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> leftTrees <span class="token operator">=</span> <span class="token function">generateAllTrees</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//i为根节点，获得所有可行的右子树集合</span>            List<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> rightTrees <span class="token operator">=</span> <span class="token function">generateAllTrees</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//取出一个左子树和右子树，以i为根节点构成一个二叉搜索树</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>TreeNode left <span class="token operator">:</span> leftTrees<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>TreeNode right <span class="token operator">:</span> rightTrees<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    TreeNode curTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    curTree<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>                    curTree<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>                    allTrees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curTree<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> allTrees<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>过于复杂，不分析。</li></ul><h2 id="0096-不同的二叉搜索树"><a href="#0096-不同的二叉搜索树" class="headerlink" title="0096. 不同的二叉搜索树"></a>0096. 不同的二叉搜索树</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/unique-binary-search-trees">https://leetcode-cn.com/problems/unique-binary-search-trees</a></p><p><strong>方法一</strong>：动态规划</p><p><strong>思路</strong></p><ul><li>如果整数<code>[1,n]</code>中的<code>k</code>作为根节点值，则<code>[1,k-1]</code>会去构建左子树，<code>[k+1,n]</code>会去构建右子树；</li><li>左子树出来的形态有<code>a</code>种，右子树出来的形态有<code>b</code>种，则整个树的形态有<code>a*b</code>中；</li><li><ul><li>以<code>k</code>为根节点的<code>BST</code>种类数=左子树<code>BST</code>种类数*右子树<code>BST</code>种类数</li></ul></li><li>问题变成：不同的<code>k</code>之下，等号右边的乘积，进行累加。</li></ul><p><strong>定义<code>DP</code>子问题</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0096-1.6zs7uyfm0vc0.png" alt="0096-1"></p><ul><li>用<code>[2,3]</code>构建，和用<code>[1,2]</code>构建，出来的种类数是一样的，因为参与构建的个数一样；</li><li>再比如<code>[2,3,4]</code>和<code>[1,2,3]</code>都是连着的三个数，构建出的<code>BST</code>的种类数相同，属于重复的子问题；</li><li>定义<code>dp[i]</code>：用连着的<code>i</code>个数，所构建出的<code>BST</code>种类数。</li></ul><p><strong>状态转移方程</strong></p><ul><li><p>用<code>i</code>个根节点构建<code>BST</code>时，除去根节点，剩余<code>i-1</code>个节点构建左、右子树，左子树分配<code>0</code>个，右子树分配<code>i-1</code>个…依次类推。<img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0096-2.6phei59udfo0.png" alt="0096-2"></p></li><li><p>左子树用掉<code>j</code>个，则右子树用掉<code>i-j-1</code>个，能构建出<code>dp[j]*dp[i-j-1]</code>种不同的<code>BST</code>。<br>$$<br>d p[i]=\sum d p[j] * d p[i-j-1], 0&lt;=j&lt;=i-1<br>$$</p></li></ul><p><strong>基础条件</strong></p><ul><li>当<code>n=0</code>时，没有数字，只能形成一种<code>BST</code>：空树。</li><li>当<code>n=1</code>时，只有一个数字，只能形成一种<code>BST</code>：单个节点。</li></ul><p>其实，<code>dp[i]</code>是<strong>卡塔兰数</strong>，定义如下，可以直接用数学方法求：<br>$$<br>C_{0}=1, \quad C_{n+1}=\frac{2(2 n+1)}{n+2} C_{n}<br>$$<br><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存计算结果</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始条件</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从2推算到n</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用i个数构建BST时，左子树个数j变化范围为[0,i-1]，对应的右子树个数为i-1-j，累加所有情况</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n<sup>2</sup>)，<code>n</code>代表<code>BST</code>节点个数。</li><li>空间复杂度：O(n)，需要O(n)的空间存储<code>0-n</code>个节点可以构建<code>BST</code>数。</li></ul><h2 id="0098-验证二叉搜索树"><a href="#0098-验证二叉搜索树" class="headerlink" title="0098. 验证二叉搜索树"></a>0098. 验证二叉搜索树</h2><p><strong>题目地址</strong>:<a href="https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/medium/98.validate-binary-search-tree">https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/medium/98.validate-binary-search-tree</a></p><p><strong>方法一</strong>：递归</p><p>根据题目<strong>二叉搜索树</strong>的性质，我们设计一个递归函数<code>helper(root, lower, upper)</code>来递归判断，函数表示考虑以<code>root</code>为根的子树，判断子树中所有节点的值是否都在<code>(l,r)</code>的范围内（注意是开区间）。如果<code>root</code>节点的值<code>val</code>不在<code>(l,r)</code>范围内说明不满足条件直接返回，负责我们要继续递归调用检测它的左右子树是否满足，如果都满足说明这是一颗二叉搜索树。</p><p>递归调用左子树，改变上界，<code>helper(root.left, lower, root.val)</code>。递归调用右子树，改变下界，<code>helper(root.right, root.val, upper)</code></p><p>函数递归的入口为<code>helper(root, -inf, +inf)</code>，<code>inf</code>表示一个无穷大的值。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用递归</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">long</span> lower<span class="token punctuation">,</span> <span class="token keyword">long</span> upper<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件，返回true</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断条件，返回false。不能用返回true的条件，两个true会出问题</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">>=</span>upper <span class="token operator">||</span> root<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span>lower<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> upper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>为二叉树的节点个数。</li><li>空间复杂度：O(h)，<code>h</code>为二叉树的高度。</li></ul><p><strong>方法二</strong>：中序遍历</p><p>二叉搜索树中序遍历是升序的，这启示我们在中序遍历时实时检查当前节点的值是否大于前一个中序遍历到的节点的值即可。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//中序遍历迭代</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储中序遍历前一个值</span>        <span class="token keyword">long</span> pre <span class="token operator">=</span> Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//辅助遍历栈</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//向左遍历</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断条件</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 如果中序遍历得到的节点的值小于等于前一个 pre，说明不是二叉搜索树</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> pre<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//向右遍历</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中序遍历递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储中序遍历前一个值</span>    <span class="token keyword">long</span> pre <span class="token operator">=</span> Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用递归</span>        <span class="token keyword">return</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">inorder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向左递归</span>        <span class="token keyword">boolean</span> left <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">>=</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向右递归</span>        <span class="token keyword">boolean</span> right <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中<code>n</code>为二叉树的节点数。</li><li>空间复杂度：O(h)，<code>h</code>为二叉树的高度，栈最多存储<code>h</code>个节点。</li></ul><h2 id="0102-二叉树的层序遍历"><a href="#0102-二叉树的层序遍历" class="headerlink" title="0102. 二叉树的层序遍历"></a>0102. 二叉树的层序遍历</h2><p><strong>0144前序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a></p><p><strong>0094中序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a></p><p><strong>0145后序遍历题目地址</strong>：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/</a></p><p><strong>0102层序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p><p>解题总结在<code>0094</code>中序遍历！！！</p><p><strong>方法一</strong>：深度优先遍历</p><p><code>DFS</code>与<code>BFS</code></p><p><code>DFS</code>遍历使用<strong>递归</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>BFS</code>遍历使用<strong>队列</strong>数据结构：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>只是比较两段代码的话，最直观的感受就是：<code>DFS</code> 遍历的代码比 <code>BFS</code> 简洁太多了！这是因为递归的方式隐含地使用了<strong>系统的栈</strong>，我们不需要自己维护一个数据结构。如果只是简单地将二叉树遍历一遍，那么 <code>DFS</code> 显然是更方便的选择。</p><p>虽然 <code>DFS</code> 与 <code>BFS</code> 都是将二叉树的所有结点遍历了一遍，但它们遍历结点的顺序不同。这个遍历顺序就是<code>BFS</code>能用来解决「层序遍历」、「最短路径」问题的根本原因。</p><p>「层序遍历」</p><p>乍一看，我们可以直接用<code>BFS</code>得出层序遍历结果。然而，层序遍历要求的输出结果和 <code>BFS</code> 是不同的。<strong>层序遍历要求我们区分每一层，也就是返回一个二维数组</strong>。而 <code>BFS</code> 的遍历结果是一个一维数组，无法区分每一层。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0102-1.7h6n9my3jfs0.png" alt="0102-1"></p><p><strong>怎么区分出队列中的节点来自哪一层呢</strong>？只需要在每一层遍历开始前，先记录队列中的节点数量<code>n</code>（也就是这一层的节点数量），然后一次遍历完这一层的<code>n</code>个节点。如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0102-2.1km0uzy8wv4w.gif" alt="0102-2"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//迭代-层序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集合</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//辅助遍历队列</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前队列大小为该层元素个数，一次性遍历该层</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> level <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> currentLevelSize <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>currentLevelSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                level<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//该层元素加入结果集</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，每个节点出入队各一次，渐进时间复杂度为O(n)。</li><li>空间复杂度：O(n)，队列中元素个数不超过<code>n</code>，渐进空间复杂度为O(n)。</li></ul><h2 id="0103-二叉树的锯齿形层次遍历"><a href="#0103-二叉树的锯齿形层次遍历" class="headerlink" title="0103. 二叉树的锯齿形层次遍历"></a>0103. 二叉树的锯齿形层次遍历</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/</a></p><p><strong>方法一</strong>：广度优先遍历</p><p>此题是<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">0102二叉树层序遍历</a>的变种，最后输出的要求有所变化，我们按照<strong>层数的奇偶</strong>（<strong>使用一个布尔变量</strong>）来决定每一层的输出顺序，<strong>只需要改变加入结果集合的顺序即可</strong>！</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0103-1.32gojhrci4o0.png" alt="0103-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//BFS</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集合</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//队列</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//二叉树的奇偶层，根据奇偶决定结果添加顺序</span>        <span class="token keyword">boolean</span> isOrderLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//首先加入根节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> curSize <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历当前层</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>curSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//奇数层，从左往右添加</span>                    list<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//偶数层，从右往左添加</span>                    list<span class="token punctuation">.</span><span class="token function">offerFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> deque<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//奇偶切换</span>            flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n为二叉树的节点数，每个节点会且仅会遍历一次。</li><li>空间复杂度：O(n)，我们需要维护存储节点的队列和存储节点值的双端队列。</li></ul><h2 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105 从前序与中序遍历序列构造二叉树"></a>105 从前序与中序遍历序列构造二叉树</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</a></p><p><strong>方法一</strong>：递归</p><p>对于任意一颗树而言，前序遍历形式总是<code>[根节点,[左子树前序遍历结果],[右子树前序遍历结果]]</code>，中序遍历的形式总是<code>[[左子树中序遍历结果],根节点,[右子树中序遍历结果]]</code>。</p><p>只要我们在中序遍历中<strong>定位</strong>到根节点，那么就可以知道左右子树的节点数目。同一子树前序和中序遍历长度相同，因此我们就可以得到左右子树的前序和中序遍历结果，递归的进行构造即可。</p><p>例如输入前序遍历序列<code>&#123;1,2,4,7,3,5,6,8&#125;</code>和中序遍历序列<code>&#123;4,7,2,1,5,3,8,6&#125;</code></p><ul><li>首先根节点是<code>&#123;1&#125;</code>；</li><li>左子树是：前序<code>&#123;2,4,7&#125;</code>,中序<code>&#123;4,7,2&#125;</code>；</li><li>右子树是：前序<code>&#123;3,5,6,8&#125;</code>,中序<code>&#123;5,3,8,6&#125;</code>；</li><li>递归构造左右子树。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用递归</span>        TreeNode root <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preStart<span class="token punctuation">,</span> <span class="token keyword">int</span> preEnd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inStart<span class="token punctuation">,</span> <span class="token keyword">int</span> inEnd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preStart<span class="token operator">></span>preEnd <span class="token operator">||</span> inStart<span class="token operator">></span>inEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前前序和中序遍历结果的根节点</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定位中序遍历中根节点的位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>inStart<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>inEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token operator">==</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归调用生成左右子树</span>                root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> preStart<span class="token operator">+</span>i<span class="token operator">-</span>inStart<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token operator">-</span>inStart<span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> inEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳出循环</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中<code>n</code>是树中的节点个数。</li><li>空间复杂度：O(height)，递归栈空间，二叉树的高度。</li></ul><h2 id="0113-路径总和-II"><a href="#0113-路径总和-II" class="headerlink" title="0113. 路径总和 II"></a>0113. 路径总和 II</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/path-sum-ii/">https://leetcode-cn.com/problems/path-sum-ii/</a></p><p><strong>方法一</strong>：回溯</p><p>注意本题的要求是，找到所有满足从根节点到某个叶子结点经过的路径上的节点之和等于目标和的路径。核心思想是对树进行一次遍历，在遍历的时候记录从根节点到当前节点的路径和，以防止重复计算。</p><p>我们可以采用深度优先搜索的方式，枚举每一条从根节点到叶子结点的路径。当我们遍历到叶子节点，且此时路径和恰为目标和时，我们就找到了一条满足条件的路径。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 深度优先遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果集</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拼接路径</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用递归</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//选择节点</span>        sum <span class="token operator">+=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//叶子结点且路径总和等于给定目标，不用加return</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> targetSum<span class="token operator">==</span>sum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向左深度搜索</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向右深度搜索</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//撤销选择</span>        path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n<sup>2</sup>)，其中n是树的节点数。</li><li>空间复杂度：O(n)，空间复杂度主要取决于栈空间的开销，栈中元素的个数不会超过树的节点数。</li></ul><h2 id="0114-二叉树展开为链表"><a href="#0114-二叉树展开为链表" class="headerlink" title="0114 二叉树展开为链表"></a>0114 二叉树展开为链表</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/">https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/</a></p><p><strong>方法一</strong>：</p><p><strong>直观想法</strong>是对二叉树进行前序遍历，将各个节点访问顺序放入集合中，然后遍历集合修改指向。</p><p>根据观察，本题可以用<code>DFS</code>方式来解决，如图是如何将二叉树展开为链表，其实分三步：</p><ul><li>首先将根节点的左子树变成链表；</li><li>然后将根节点的右子树变成链表；</li><li>最后将变成链表的左子树放到根节点右边，将变成链表的右子树放到变成链表的左子树的最右边。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0114-1.329aov0rrwo0.png" alt="0114-1"></p><p>这就是一个递归过程，递归重要的点是：不用管函数内部细节如何处理，我们只看函数作用以及输入输出。对于<code>flatten</code>函数来说，将一个二叉树展开成链表，输入根节点，无输出。</p><p>时间复杂度<code>O(1)</code>的方法，寻找前驱节点，如图，比较难理解。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0114-2.74jjnb2gps40.png" alt="0114-2"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//dfs</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//终止条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将根节点的左子树变成链表</span>        <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将根节点的右子树变成链表</span>        <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根节点的右子树暂存到temp</span>        TreeNode temp <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根节点的右指针指向左子树</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根节点左子树清空</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到树最右边节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把右边链表添加到最右边节点的右端</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//寻找前驱节点，时间复杂度O(n)，空间复杂度O(1)</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TreeNode cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//根节点的下一个节点</span>                TreeNode next <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//根节点右子树的前一个节点</span>                TreeNode pre <span class="token operator">=</span> next<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//修改指向</span>                pre<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>right <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新cur</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(height)，递归栈深度。</li></ul><h2 id="0128-最长连续序列"><a href="#0128-最长连续序列" class="headerlink" title="0128 最长连续序列"></a>0128 最长连续序列</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/">https://leetcode-cn.com/problems/longest-consecutive-sequence/</a></p><p><strong>方法一</strong>：哈希表</p><p>这道题可能首先会想到排序来做，但会超过空间复杂度。排序后遍历数组：</p><ul><li>如果当前值和上一个值相同，跳过本次循环；</li><li>如果当前值是上一个值<code>+1</code>，连续变量<code>count++</code>；</li><li>如果不满足上面两个条件，更新最长连续序列长度，连续变量<code>count</code>置为<code>1</code>。</li></ul><p>不超时间复杂度的做法是用「哈希表」，首先把<code>nums</code>元素放入哈希<code>Set</code>集合中<strong>去除重复元素</strong>，然后遍历集合<strong>看哪些元素能够当做连续序列的左边界</strong></p><ul><li>如果<code>x</code>为左边界，那么<code>x-1</code>不能做集合中，因为如果<code>x-1</code>在集合中，最长连续序列应该至少以<code>x-1</code>为左边界；</li><li>也即，<code>x</code>为左边界，那么<code>x-1</code>不能在集合中。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//排序，会超时间复杂度</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特例</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxLen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遇到重复值，跳出本次循环</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遇到连续值，连续变量count++</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不连续值，更新maxLen和重置count</span>                maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跳出循环之后，还有最后一个连续长度未计算</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哈希集合</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特例</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组元素加入集合去重</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxLen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历集合，寻找可以充当左边界元素统计最长连续序列的长度</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//集合中不存在x-1，x才能充当最长连续序列的左边界</span>                <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不断在集合中找x+1是否存在</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    x<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新最长连续序列长度</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxLen<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>为数组长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0129-求根到叶子节点数字之和"><a href="#0129-求根到叶子节点数字之和" class="headerlink" title="0129. 求根到叶子节点数字之和"></a>0129. 求根到叶子节点数字之和</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/">https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/</a></p><p><strong>方法一</strong>：深度优先搜索</p><p>根据题意，每个节点都对应一个数字，等于父节点对应数字乘以<code>10</code>再加上该节点的值。</p><p>深度优先搜索时很直观的做法。从根节点开始，遍历每个节点：</p><ul><li>如果遇到叶子节点，则将叶子结点对应的数字加到数字之和。</li><li>如果当前节点不是叶子节点，则计算其子节点对应的数字，然后对子节点递归遍历。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0129-1.1o3yjdbrshuo.png" alt="0129-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//深度优先遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumNumbers</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用递归</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> preSum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点对应数字</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> preSum<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点是叶子节点，返回sum</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前节点非叶子结点，深度优先计算其左右子节点对应数字之和</span>            <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n为二叉树的节点个数。对每个节点访问一次。</li><li>空间复杂度：O(h)，取决于递归调用栈空间，递归栈的深度等于二叉树的高度。</li></ul><p><strong>方法二</strong>：广度优先搜索</p><p>使用广度优先搜索，<strong>需要维护两个队列，分别存储节点和节点对应的数字</strong>。</p><p>初始时，将根节点和根节点对应的值放入两个队列。每次从两个队列分别取出一个节点和一个数字，进行如下操作：</p><ul><li>如果当前节点是叶子节点，则将该节点对应的数字加到数字之和；</li><li>如果当前节点不是叶子节点，则获得当前节点的非空子节点，并根据当前节点对应的数字和子节点的值计算子节点对应的数字，然后将子节点和子节点对应的数字分别加入两个队列。</li></ul><p>搜索结束后，即可得到所有叶子结点对应的数字之和。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//广度优先遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumNumbers</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//广度优先遍历辅助节点队列</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//广度优先遍历辅助数队列，记录根节点到当前节点的数值</span>        Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//如果根节点不为空，先将根节点和root.val加入队列</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nodeList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            numList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>nodeList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出一个节点队列和数队列元素</span>            TreeNode node <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果取出节点是叶子节点，将对应数值加到最终结果</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//否则，如果左节点不为空，节点和运算后的数入队列</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    numList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果左节点不为空，节点和运算后的数入队列</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    numList<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，访问每个节点一次。</li><li>空间复杂度：O(n)，取决于队列，每个队列中的元素个数不会超过n。</li></ul><h2 id="0130-被围绕的区域"><a href="#0130-被围绕的区域" class="headerlink" title="0130. 被围绕的区域"></a>0130. 被围绕的区域</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/surrounded-regions/">https://leetcode-cn.com/problems/surrounded-regions/</a></p><p><strong>写在前面</strong>：</p><p>本题给定的矩阵中有<strong>三种元素</strong>：</p><ul><li>字母<code>X</code>;</li><li>被字母<code>X</code>包围的字母<code>O</code>；</li><li>没有被字母<code>X</code>包围的字母<code>O</code>；</li></ul><p>题目要求将所有被字母 <code>X</code> 包围的字母 <code>O</code>都变为字母 <code>X</code> ，但很难判断哪些 <code>O</code> 是被包围的，哪些 <code>O</code> 不是被包围的。</p><p>注意题目解释到：**任何边界上的<code>O</code>都不会被填充为 <code>X</code>**。我们可以想到，所有的不被包围的 <code>O</code> 都直接或间接与边界上的 <code>O</code> 相连。我们可以利用这个性质判断 <code>O</code> 是否在边界上，具体地说：</p><ul><li>对于每一个边界上的<code>O</code>，我们以它为起点，标记所有与它直接或间接相连的字母<code>O</code>；</li><li>最后我们遍历这个矩阵，对于每一个字母：</li><li><ul><li>如果该字母被标记过，则字母为为没有被字母<code>X</code> 包围的字母 <code>O</code>，我们将其还原为字母 <code>O</code>；</li><li>如果该字母没有被标记过，则该字母为被字母 <code>X</code> 包围的字母 <code>O</code>，我们将其修改为字母 <code>X</code>。</li></ul></li></ul><p><strong>方法一</strong>：深度优先搜索</p><p>我们可以使用深度优先搜索实现标记操作。用字母<code>A</code>标记（修改）直接或间接被字母<code>X</code>包围字母<code>O</code>。最后将遍历将<code>O</code>修改为<code>X</code>，<code>A</code>修改为<code>O</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//深度优先搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件，满足时'O'不可能被包围，直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&lt;=</span><span class="token number">2</span> <span class="token operator">||</span> n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//深度优先搜索，标记所有与边界上'O'直接或间接相连的'O'</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第一列</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最后一列</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第一行，去首尾</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最后一行，去首尾</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//修改标记和被包围的‘O'，注意顺序</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'X'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'A'</span><span class="token punctuation">)</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'O'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件：下标范围和当前字符不为'O'</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">>=</span>board<span class="token punctuation">.</span>length <span class="token operator">||</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> y<span class="token operator">>=</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'O'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前字符为'O'，与边界直接或间接相连接。标记为'A'</span>        board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按上、下、左、右顺序搜索与边界直接或间接相连的'O'</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(m*n)，深度优先搜索过程中，每个点至多只会标记一次。</li><li>空间复杂度：O(m*n)，主要是深度优先搜索的栈开销。</li></ul><p><strong>方法二</strong>：广度优先遍历</p><p>我们也可以使用广度优先搜索实现标记操作。用字母<code>A</code>标记（修改）直接或间接被字母<code>X</code>包围字母<code>O</code>。最后将遍历将<code>O</code>修改为<code>X</code>，<code>A</code>修改为<code>O</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//广度优先搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件，满足时'O'不可能被包围，直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&lt;=</span><span class="token number">2</span> <span class="token operator">||</span> n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//广度优先搜索坐标范围</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dx<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dy<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//辅助搜索队列，存储边界'O'或直接/间接与边界'O'相连的'O'</span>        Queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//首先将边界上的'O'存储到队列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>i<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//广度优先搜索直接/间接与边界'O'相连的'O'，标记为'A'</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pos <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//搜索所有相连位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> newX<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newY<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>newX<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> newX<span class="token operator">>=</span>m <span class="token operator">||</span> newY<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> newY<span class="token operator">>=</span>n <span class="token operator">||</span> board<span class="token punctuation">[</span>newX<span class="token punctuation">]</span><span class="token punctuation">[</span>newY<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'O'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>newX<span class="token punctuation">,</span> newY<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//修改标记和被包围的‘O'，注意顺序</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'O'</span><span class="token punctuation">)</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'X'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'A'</span><span class="token punctuation">)</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'O'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(m*n)，广度优先搜索过程中，每个点至多只会被标记一次。</li><li>空间复杂度：O(m*n)，主要为广度优先搜索的队列的开销。</li></ul><h2 id="0131-分割回文串"><a href="#0131-分割回文串" class="headerlink" title="0131. 分割回文串"></a>0131. 分割回文串</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/palindrome-partitioning/">https://leetcode-cn.com/problems/palindrome-partitioning/</a></p><p><strong>方法一</strong>：回溯算法</p><p>首先画出树形结构，<strong>本题的递归树模型是一棵多叉树</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0131-1.6mdjpxu08kc0.png" alt="0131-1"></p><p>解释：</p><ul><li>每个<strong>节点表示</strong>剩余没有扫描到的字符串，<strong>产生分支</strong>是截取了剩余字符串的前缀；</li><li>产生前缀字符串的时候，<strong>判断前缀字符串是否是回文</strong>；</li><li><ul><li>如果前缀字符串是回文，则可以产生分支和节点；</li><li>如果前缀字符串不是回文，则不产生分支和节点，这是一步<strong>剪枝操作</strong>。</li></ul></li><li>在叶子结点是空字符串的时候结算，此时<strong>从根节点到叶子结点的路径，就是结果集里的一个结果，使用深度优先遍历，记录下所有可能的结果。</strong></li><li>使用一个路径变量<code>path</code>搜索，<code>path</code>全局使用一个（注意结算是，要生成一个拷贝），因此在递归指向方法结束以后需要回溯，即将递归之前添加进来的元素拿出去；</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">partition</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接路径</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用递归</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> path<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @param charArray    * @param bgein 起始字符的索引    * @param len 字符串s的长度，可以设置为全局变量    * @param path 记录从根节点到叶子结点的路径    * @param res 记录所有的结果     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> path<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件，path中包含字符串所有字符</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>begin <span class="token operator">==</span> len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>begin<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为截取字符串是消耗性能的，因此，采用传子串下标的方式判断一个子串是否是回文子串</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkPalindrome</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String(char[] value, int offset, int count)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> path<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 这一步时间复杂度是O(n)，优化解法是，先采用动态规划，把回文子串的结果记录在一个表格里    * @param charArray    * @param left  子串的左边界，可以取到    * @param right 子串的右边界，可以取到     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkPalindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!=</span>charArray<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n*2<sup>n</sup>)，每个位置可拆分也可不拆分，尝试是否可以拆分的时间复杂度是O(2<sup>n</sup>)，判断每个子串是否是回文子串时间复杂度是O(n)。</li><li>空间复杂度：O(n*2<sup>n</sup>)，递归栈空间复杂度O(n)，保存答案需要空间n*2<sup>n</sup>，保守估计，实际不会这么多。</li></ul><h2 id="0139-单词拆分"><a href="#0139-单词拆分" class="headerlink" title="0139. 单词拆分"></a>0139. 单词拆分</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/word-break/">https://leetcode-cn.com/problems/word-break/</a></p><p><strong>方法一</strong>：动态规划</p><p>字符串<code>s</code>能否分解为单词表的单词，即前<code>s.length</code>个字符的字符串能否分解为单词表单词。</p><p>将大问题分解为规模小一点的子问题，规模不同就是长度缩短，问题分解为：</p><ul><li><p>前<code>i</code>个字符的子串，能否分解成单词</p></li><li><p>剩余子串，是否为单个单词</p></li><li><p><code>dp[i]</code>：长度为<code>i</code>的<code>s[0:i-1]</code>子串是否能拆分成单词。题目要我们求:<code>dp[s.length]</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0139-1.7i98sim9p000.png" alt="0139-1"></p><p>「状态转移方程」</p><p>我们用指针<code>j</code>去划分<code>s[0:i]</code>子串，如下图。<code>s[0:i]</code>子串的<code>dp[i+1]</code>是否为真（即是否可以拆分成单词），取决于两点：</p><ul><li>它的前缀子串<code>s[0:j-1]</code>的<code>dp[j]</code>，是否为真。</li><li>剩余子串<code>s[j:i]</code>是否是个单词。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0139-2.102yb8iigk3k.png" alt="0139-2"></p><p>「<code>base case</code>」</p><ul><li><code>dp[0]=true</code>。长度为<code>0</code>的<code>s[0:-1]</code>能拆分成单词表单词。看似荒谬，但这是为了让边界情况也能满足状态转移方程。</li><li>当<code>j=0</code>时(上图黄色部分为空串，<code>j</code>划分的前缀串为空串)，<code>s[0:i]</code>子串的<code>dp[i+1]</code>取决于<code>dp[0]</code>和剩余子串<code>s[0:i]</code>是否是单个单词。</li><li>只有让<code>dp[0]</code>为真，<code>dp[i+1]</code>才会只取决于<code>s[0:i]</code>是否为单个单词，满足了状态转移方程。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态规划</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> wordDict<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以HashSet从新实现wordDict，我们不知道传入的wordDict具体如何实现的，字典应该是无重复元素</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> wordDictSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span>wordDict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态规划布尔数组</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dp初始条件</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历求dp[1]到dp[s.length]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//动态规划状态转移条件</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> wordDictList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n<sup>2</sup>)，我们一共有 O(n) 个状态需要计算，每次计算需要枚举O(n) 个分割点，哈希表判断一个字符串是否出现在给定的字符串列表需要O(1) 的时间，因此总时间复杂度为 O(n<sup>2</sup>)。</li><li>空间复杂度：O(n)，动态规划dp数组和哈希集合均需要O(n)的空间复杂度。</li></ul><h2 id="0142-环形链表Ⅱ"><a href="#0142-环形链表Ⅱ" class="headerlink" title="0142 环形链表Ⅱ"></a>0142 环形链表Ⅱ</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a></p><p><strong>方法一</strong>：哈希表</p><p>一个直观的思路是，我们遍历链表中的每个节点，并记录在<code>Set</code>集合中，一旦遇到之前遍历过的节点，就判断有环，返回此时的节点。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//哈希表</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//未出现，加入集合</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现重复，有环，直接返回节点</span>                <span class="token keyword">return</span> head<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(n)。</li></ul><p><strong>方法二</strong>：快慢指针</p><p>如图，假设链表环前有<code>a</code>个节点，环内有<code>b</code>个节点。本题核心思路：<strong>走<code>a+nb</code>步一定处于环入口位置</strong>。</p><ul><li>利用快慢指针<code>fast</code>和<code>slow</code>，<code>fast</code>一次走两步，<code>slow</code>一次走一步；</li><li>当两个指针第一次相遇时，假设<code>slow</code>走了<code>s</code>步，下面计算<code>fast</code>走过的步数<code>f</code></li><li><ul><li><code>fast</code>比<code>slow</code>多走了<code>n</code>个环：<code>f=s+nb</code>；</li><li><code>fast</code>比<code>slow</code>多走一倍的步数：<code>f=2s</code>，联立上式可得<code>s=nb</code>；</li><li>综上，<code>f=2nb</code>，<code>s=nb</code>；也就是两个指针第一次相遇时，都走过了环的倍数，那么在走<code>a</code>步可以到达环的入口（<strong>可以假设<code>n=1</code>时辅助理解</strong>）。</li></ul></li><li>让<code>fast</code>从头再走，<code>slow</code>留在原地，<code>fast</code>和<code>slow</code>均一次走一步，当两个指针相遇时，<code>fast</code>走了<code>a</code>步，<code>slow</code>走了<code>a+nb</code>步。</li><li>此时<code>slow</code>就在环的入口处，返回<code>slow</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0142-1.4ryn7saj1rm0.png" alt="0142-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快慢指针</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode slow<span class="token operator">=</span>head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置快慢指针的初始指向</span>        ListNode fast<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快慢指针同时移动，直到链表末尾或指针相遇（链表有环）</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>null <span class="token operator">||</span> fast<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//有环，f=2nb，s=nb，则a+nb指向环入点</span>        fast<span class="token operator">=</span>head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快指针指向头部</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快慢指针同时移动直到快慢指针相遇（slow指向环入点）</span>            fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0144-二叉树的前序遍历"><a href="#0144-二叉树的前序遍历" class="headerlink" title="0144. 二叉树的前序遍历"></a>0144. 二叉树的前序遍历</h2><p><strong>0144前序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a></p><p><strong>0094中序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a></p><p><strong>0145后序遍历题目地址</strong>：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/</a></p><p><strong>0102层序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p><p>解题总结在<code>0094</code>中序遍历！！！</p><h2 id="0145-二叉树的后序遍历"><a href="#0145-二叉树的后序遍历" class="headerlink" title="0145. 二叉树的后序遍历"></a>0145. 二叉树的后序遍历</h2><p><strong>0144前序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a></p><p><strong>0094中序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a></p><p><strong>0145后序遍历题目地址</strong>：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/</a></p><p><strong>0102层序遍历题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p><p>解题总结在<code>0094</code>中序遍历！！！</p><h2 id="0146-LRU缓存机制"><a href="#0146-LRU缓存机制" class="headerlink" title="0146 LRU缓存机制"></a>0146 LRU缓存机制</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/lru-cache/">https://leetcode-cn.com/problems/lru-cache/</a></p><p><strong>方法一</strong>：哈希表+双向链表</p><p><code>LRU</code>是一种十分常见的页面置换算法。大白话解释：当不得不淘汰某些数据时(通常是容量已满)，选择最久未使用的数据进行淘汰。</p><p>题目让我们实现一个容量固定的<code>LRUCache</code>。<strong>如果插入数据时，发现容器已满，则先按照LRU规则淘汰一个数据，再将新数据插入，其中「插入」和「查询」都算一次使用</strong>。</p><p><strong>键值对存储方面</strong>，我们可以使用「<strong>哈希表</strong>」来确保插入和查询的时间复杂度为O(1)。</p><p>另外我们还需要额外维护一个「使用顺序」序列。我们期望当「新数据被插入」或「发生键值对查询」时，能够将当前键值对放到序列头部，这样当出发<code>LRU</code>淘汰时，只需要从序列尾部进行数据删除即可。</p><p><strong>期望在O(1)的时间复杂度内调整某个节点在序列中的位置，很自然想到「双向链表」</strong>。</p><p><strong>具体地</strong>，我们使用哈希表存储「键值对」，键值对的键作为哈希表的<code>Key</code>，而哈希表的<code>Value</code>则使用自己封装的<code>Node</code>类，<code>Node</code>同时作为双向链表的节点。数据结构如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0146-1.6yelbxf2p400.png" alt="0146-1"></p><p>插入——检查当前键值对是否已经存在于哈希表：</p><ul><li>如果存在，则更新键值对，并将当前键值对所对应的<code>Node</code>节点调整到链表头部(<code>refresh</code>操作)</li><li>如果不存在，则检查哈希表是否已经达到容量</li><li><ul><li>没达到容量，插入哈希表，并将当前键值对所对应的<code>Node</code>节点调整到链表头部(<code>refresh</code>操作)</li><li>已达到容量，先从链表尾部找到待删除元素进行删除(<code>delete</code>操作)，然后再插入哈希表，并将当前键值对所对应的<code>Node</code>节点调整到链表头部(<code>refresh</code>操作)</li></ul></li></ul><p>查询——如果没在哈希表中找到该<code>Key</code>，直接返回<code>-1</code>；如果存在该<code>Key</code>，则将对应的值返回，并将当前剪枝对所对应的<code>Node</code>节点调整到链表头部。</p><p>「细节」为了减少双向链表左右节点的判空操作，我们预先建立两个哨兵节点<code>head</code>和<code>tail</code>。</p><p>双向链表删除节点的示意图</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0146-2.37fotd0ehl20.png" alt="0146-2"></p><p>双向链表插入节点的示意图</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0146-3.2bf9lja1vedc.png" alt="0146-3"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双向链表节点定义</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span>v<span class="token punctuation">;</span>        Node left<span class="token punctuation">,</span>right<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> _k<span class="token punctuation">,</span> <span class="token keyword">int</span> _v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> _k<span class="token punctuation">;</span>            v <span class="token operator">=</span> _v<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓存大小</span>    Node head<span class="token punctuation">,</span>tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双向链表头尾节点</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Node<span class="token operator">></span> map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哈希表，存储键和Node节点</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LRUCache缓存类初始化</span>        size <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>right <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>left <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//map集合中包含key，取出Node，刷新node使用，返回node的值</span>            Node node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">refresh</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//map集合中不包含key，返回-1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node node <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//集合中包含key，取出node，更新node的值</span>            node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>v <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>size<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓存已经满了</span>                Node del <span class="token operator">=</span> tail<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>del<span class="token punctuation">.</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">delete</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">refresh</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//refresh分为两步：</span>    <span class="token comment" spellcheck="true">//1.先将当前节点从双向链表中删除（如果该节点本身存在于双向链表的话）</span>    <span class="token comment" spellcheck="true">//2.然后将当前节点添加到双向链表的头部</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">delete</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//delete操作：将当前节点从双向链表中删除</span>    <span class="token comment" spellcheck="true">//由于我们预先建立了head和tail两位哨兵，因此如果node.left不为空，</span>    <span class="token comment" spellcheck="true">//则代表了node本身存在于双向链表（不是新节点）</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node leftNode <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            leftNode<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)，各种操作时间复杂度为O(1)。</li><li>空间复杂度：O(n)。</li></ul><h2 id="0147-对链表进行插入排序"><a href="#0147-对链表进行插入排序" class="headerlink" title="0147. 对链表进行插入排序"></a>0147. 对链表进行插入排序</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/insertion-sort-list/">https://leetcode-cn.com/problems/insertion-sort-list/</a></p><p><strong>方法一</strong>：傀儡头节点</p><p>这道题属于链表题目中的修改指针，首先我们看返回值，如果返回值不是原本链表头的话，我们可以使用<strong>傀儡头节点</strong>。</p><p>我们<strong>维护两个链表</strong>，不断的从原始链表取出元素放入傀儡头节点链表的指定位置。所以我们的算法应该有<strong>两层循环</strong>，外层控制当前需要插入的元素，内层选择插入位置。每次都从傀儡头节点出发，找到插入位置即可（实际记录插入位置的前一个位置，方便插入）。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0147-1.1hx1bt1zresg.png" alt="0147-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//傀儡头节点</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">insertionSortList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//傀儡头节点</span>        ListNode dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历原始链表辅助指针</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//记录原始链表遍历节点的下一个节点，防止链表断裂</span>            ListNode next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环找到当前节点再傀儡头节点链表中的插入位置</span>            ListNode pos <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span>next<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> pos<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pos <span class="token operator">=</span> pos<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//修改指向，把当前节点插入到傀儡头节点链表中</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pos<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pos<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新当前节点</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果</span>        <span class="token keyword">return</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n<sup>2</sup>)，n是链表长度。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0148-排序链表"><a href="#0148-排序链表" class="headerlink" title="0148 排序链表"></a>0148 排序链表</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/sort-list/">https://leetcode-cn.com/problems/sort-list/</a></p><p><strong>方法一</strong>：归并排序</p><p>这道题直观的想法是新建一个链表，把旧链表的元素逐个插入到新链表指定位置，但这样会超时间复杂度。题目要求时间复杂度为<code>O(nlogn)</code>，很自然会想到二分法，进而想到用归并排序。</p><p>「归并排序」基于分治算法，<strong>两种实现</strong></p><ul><li>自顶向下的归并排序，调用栈空间<code>O(logn)</code>；</li><li>自底向上的归并排序，通过迭代实现；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0148-1.4c2ynwjo84o0.png" alt="0148-1"></p><p>后者过于复杂，这里采用满足题目时间复杂度的自顶向下方法。利用归并的思想，递归地将当前链表分成两段，然后<code>merge</code>。</p><ul><li><strong>分段的方法是使用快慢指针</strong>，<code>fast</code>每次走两步，<code>slow</code>一次走一步。因为<code>fast</code>遍历节点数是<code>slow</code>的两倍，所有<code>fast</code>遍历到末尾时，<code>slow</code>处于中间位置，这样就将当前链表分成了两段；</li><li><code>merge</code>时，创建一个虚拟头节点<code>dummyHead</code>，穿针引线不断指向两链表中的较小节点，直到其中一个链表为空，继续处理剩余元素，最后返回<code>dummyHead.next</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0148-2.50q4g54rvks0.png" alt="0148-2"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//归并排序</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">sortList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特例</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快慢指针找到链表中点</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断条件画图理解</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode right <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归右半链表排序</span>        slow<span class="token punctuation">.</span>next<span class="token operator">=</span>null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//切断左右链表</span>        ListNode left <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归左半链表排序</span>        <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//合并左右有序链表</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ListNode <span class="token function">merge</span><span class="token punctuation">(</span>ListNode left<span class="token punctuation">,</span> ListNode right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建立头节点，穿针引线合并有序链表</span>        ListNode cur <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> right<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> left<span class="token punctuation">;</span>                cur <span class="token operator">=</span> left<span class="token punctuation">;</span>                left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> right<span class="token punctuation">;</span>                cur <span class="token operator">=</span> right<span class="token punctuation">;</span>                right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> left<span class="token operator">==</span>null <span class="token operator">?</span> right <span class="token operator">:</span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理剩余未合并链表</span>        <span class="token keyword">return</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)，其中<code>n</code>是链表长度。</li><li>空间复杂度：O(logn)，主要取决于递归调用的栈空间。</li></ul><h2 id="0150-逆波兰表达式求值"><a href="#0150-逆波兰表达式求值" class="headerlink" title="0150. 逆波兰表达式求值"></a>0150. 逆波兰表达式求值</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/</a></p><p><strong>方法一</strong>：栈</p><p>逆波兰表达式由波兰的逻辑学家卢卡维兹提出。<strong>逆波兰表达式的特点是</strong>：没有括号，运算符总是放在和它相关的操作数之后，因此<strong>也称后缀表达式</strong>。</p><p>逆波兰表达式严格遵循「从左到右」的运算。使用一个栈存储操作数，从左到右遍历逆波兰表达式，进行如下操作：</p><ul><li>如果遇到操作数，直接入栈</li><li>如果遇到运算符，则将两个操作数出栈，先出栈的是右操作数，后出栈的是左操作数，使用运算符对两个操作数进行运算，最后将运算得到的新操作数入栈。</li></ul><p>整个逆波兰表达式<strong>遍历完毕之后，栈内只有一个元素</strong>，该元素即为逆波兰表达式的值。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> tokens<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//辅助操作数栈</span>        Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从左往右遍历逆波兰表达式，运算入栈</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//自定义函数判断当前字符串是否为数字字符串</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是，直接入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//否，弹栈运算，结果入栈</span>                <span class="token keyword">int</span> rightNumber <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> leftNumber <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftNumber <span class="token operator">+</span> rightNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftNumber <span class="token operator">-</span> rightNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftNumber <span class="token operator">*</span> rightNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftNumber <span class="token operator">/</span> rightNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回最后栈中结果</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中n是数组tokens的长度，需要遍历数组一次，计算逆波兰表达式的值。</li><li>空间复杂度：O(n)，使用栈存储计算过程中的数，栈内元素不会超过n。</li></ul><h2 id="0152-乘积最大子数组"><a href="#0152-乘积最大子数组" class="headerlink" title="0152. 乘积最大子数组"></a>0152. 乘积最大子数组</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/maximum-product-subarray/">https://leetcode-cn.com/problems/maximum-product-subarray/</a></p><p><strong>方法一</strong>：动态规划</p><p>遍历数组时计算最大值，不断更新。</p><ul><li>令<code>imax</code>为<strong>当前最大值</strong>，则当前最大值为<code>imax=Math.max(imax*nums[i], nums[i])</code></li><li><strong>由于存在负数</strong>，那么会导致最大的变最小的，最小的变最大的。因此还需要维护<strong>当前最小值</strong><code>imin</code>，<code>imin=Math.min(imin*nums[i], nums[i])</code></li><li>当负数出现时，先将<code>imax</code>和<code>imin</code>交换，再计算当前最大值和当前最小值，最大值为<code>Math.max(max, imax)</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0152-1.6pidy9a8nzk0.png" alt="0152-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始条件，最大值，当前最大值和当前最小值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> imax <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> imin <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历数组，更新最大值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当遇到负数，当前最大值和当前最小值会交换</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> imax<span class="token punctuation">;</span>                imax <span class="token operator">=</span> imin<span class="token punctuation">;</span>                imin <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新当前最大值和当前最小值</span>            imax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>imax<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            imin <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>imin<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新最大值</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> imax<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0153-寻找旋转排序数组中的最小值"><a href="#0153-寻找旋转排序数组中的最小值" class="headerlink" title="0153 寻找旋转排序数组中的最小值"></a>0153 寻找旋转排序数组中的最小值</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/</a></p><p><strong>方法一</strong>：二分查找</p><p>用二分查找，需要始终将目标值（<strong>这里是最小值</strong>）套住，并不断收缩左边界或右边界。</p><p>一个不包含重复元素的升序数组在经过旋转之后，可以得到下面可视化的折线图。横轴表示索引，纵轴表示数组元素的值。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0153-1.6pxugxcpkp80.png" alt="0153-1"></p><p>我们考虑<strong>数组中的最后一个元素</strong> <code>x</code>：在最小值右侧的元素（不包括最后一个元素本身），它们的值一定都严格小于<code>x</code>；而在最小值左侧的元素，它们的值一定都严格大于 <code>x</code>。因此，我们可以根据这一条性质，通过二分查找的方法找出最小值。</p><p>在二分查找每一步中，左边界 <code>left </code>，右边界<code>right</code>，区间中点<code>mid</code>，最小值就在该区间内。我们将中点元素<code>nums[mid]</code>与右边界元素<code>nums[right]</code>比较，可能会有两种情况：</p><ul><li>第一种情况<code>nums[mid]&lt;nums[high]</code>，如下图所示，说明<code>nums[mid]</code>是最小值右侧的元素，右边界左移<code>right=mid</code>；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0153-2.4gn788dxc8i0.png" alt="0153-2"></p><ul><li>第二种情况<code>nums[mid]&gt;nums[high]</code>，如下图所示，说明<code>nums[mid]</code>是最小值左侧的元素，左边界右移<code>left=mid+1</code>;</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0153-3.7kl4voqcwu40.png" alt="0153-3"></p><p>由于数组不包含重复元素，并且只要当前区间长度不为<code>1</code>，<code>mid</code>就不会与<code>high</code>重合，而如果当前区间长度为<code>1</code>，说明我们可以结束二分查找了。因此不会存在<code>nums[mid]=nums[high]</code>的情况。</p><p><strong>变种</strong>：找最大值，先找最小值，索引减一为最大值位置。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左右边界和中点</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//二分查找</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//利用最后一个元素x，最小值右侧元素（不包含x）都比x小，最小值左侧元素都比x大</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//退出循环left=right</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(long)，二分查找，每次会忽略一般区间。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0198-打家劫舍"><a href="#0198-打家劫舍" class="headerlink" title="0198 打家劫舍"></a>0198 打家劫舍</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/house-robber/">https://leetcode-cn.com/problems/house-robber/</a></p><p><strong>方法一</strong>：动态规划</p><p>这道题是不错的动态规划入门题目。<strong>动态规划题目的四个基本步骤</strong>：</p><ul><li>定义子问题</li><li>写出子问题的递推关系</li><li>确定<code>DP</code>数组的计算顺序</li><li>空间优化（可选）</li></ul><p>针对改题目，一步一步讲解。</p><p>步骤一：<strong>定义子问题</strong></p><p><strong>什么是子问题</strong>？子问题是和原问题相似，但规模较小的问题。例如这道小偷问题，原问题是“从全部房子中能偷到的最大金额”，将问题的规模缩小，子问题就是“从<code>k</code>个房子中能偷到的最大金额”，用<code>f(k)</code>表示。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0198-1.4i8pc3f6lmk0.png" alt="0198-1"></p><p>可以看到，子问题是参数化的，我们定义的子问题中有参数 <code>k</code>。假设一共有 <code>n</code> 个房子的话，就一共有 <code>n</code> 个子问题。动态规划实际上就是通过求这一堆子问题的解，来求出原问题的解。这要求子问题需要具备两个性质：</p><ul><li>原问题能由子问题表示。</li><li>一个子问题的解要能通过其他子问题的解求出。</li></ul><p>小偷问题由于比较简单，定义子问题实际上是很直观的。一些比较难的动态规划题目可能需要一些定义子问题的技巧。</p><p>步骤二：<strong>写出子问题的递归关系</strong></p><p>这一步是求解动态规划问题的关键一步。然而，这一步也是最无法再代码中体现出来的一步。最好把这一步的思路注释在代码中。</p><p>我们来分析一下这道小偷问题的递推关系：</p><p>假设一共有<code>n</code>个房子，每个房子的金额分别为H<sub>0</sub>，H<sub>1</sub>，…，H<sub>n-1</sub>，子问题<code>f(k)</code>表示从前<code>k</code>个房子（即H<sub>0</sub>，H<sub>1</sub>，…，H<sub>k-1</sub>）中能偷到的最大金额。那么，偷低<code>k</code>间房子有两种偷法：</p><ul><li>不偷第<code>k</code>间房，问题变为前<code>k-1</code>个房子中偷到的最大的金额，也就是子问题<code>f(k-1)</code></li><li>偷第k间房，那么第<code>k-1</code>个房子的H<sub>k-2</sub>显然不能偷，其他房子不受影响。问题变为在<code>k-2</code>个房子中偷盗的最大金额，加上第<code>k</code>间房偷到的金额。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0198-2.2y9qid8zcg20.png" alt="0198-2"></p><p>两种情况，取最大值：<br>$$<br>f(k)=\max \left{f(k-1), H_{k-1}+f(k-2)\right}<br>$$<br>写递归关系的时候，要注意<code>k=0</code>和<code>k=1</code>的基本情况：</p><ul><li>当<code>k=0</code>时，没有房子，所以<code>f(0)=0</code>；</li><li>当<code>k=1</code>时，只有一个贩子，偷这个房子即可，所以<code>f(1)=H0</code></li></ul><p>这样才能构成完整的递归关系，后面写代码也不容易在边界条件上出错。</p><p>步骤三：<strong>确定DP数组的计算顺序</strong></p><p>在确定了子问题的递推关系之后，下一步就是依次计算出这些子问题了。在很多教程中都会写，动态规划有两种计算顺序，一种是自顶向下的、使用备忘录的递归方法，一种是自底向上的、使用 <code>dp</code> 数组的循环方法。不过<strong>在普通的动态规划题目中，<code>99% </code>的情况我们都不需要用到备忘录方法</strong>，所以我们最好坚持用自底向上的 <code>dp</code> 数组。</p><p>对于小偷问题，我们分析子问题的依赖关系，发现每个<code>f(k)</code>依赖<code>f(k-1)</code>和<code>f(k-2)</code>。也就是说，<code>dp[k]</code>依赖<code>dp[k-1]</code>和<code>dp[k-2]</code>，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0198-3.1xwgkujnq7gg.png" alt="0198-3"></p><p>那么，既然 <code>DP</code>数组中的<strong>依赖关系都是向右指的</strong>，<code>DP</code>数组的计算顺序就是从左向右。这样我们可以保证，计算一个子问题的时候，它所依赖的那些子问题已经计算出来了。</p><p>确定了 <code>DP</code> 数组的计算顺序之后，我们就可以写出题解代码了。</p><p>步骤四：<strong>空间优化</strong></p><p>空间优化是动态规划问题的进阶内容。</p><p>空间优化的基本原理是，很多时候，我们并不需要始终持有全部的<code>DP</code>数组，对于小偷问题，我们发现，最后一步计算<code>f(n) </code>的时候，实际上只用到了<code>f(n−1)</code> 和<code> f(n−2)</code> 的结果。<code>n−3 </code>之前的子问题，实际上早就已经用不到了。那么，<strong>我们可以只用两个变量保存两个子问题的结果，就可以依次计算出所有的子问题</strong>。下面的动图比较了空间优化前和优化后的对比关系：</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0198-4.2k9azo5fpwi0.gif" alt="0198-4"></p><p>这样一来，空间复杂度也从<code>O(n)</code>降到了<code>O(1)</code>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态规划+数组</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组为null或长度为0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组长度为1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态规划数组初始化</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//决定是否强第i个房屋</span>            <span class="token comment" spellcheck="true">//不抢，最高金额为dp[i-1]</span>            <span class="token comment" spellcheck="true">//抢，则前一个房屋不能抢，最高金额为dp[i-2]+nums[i]</span>            <span class="token comment" spellcheck="true">//第i个房间可以抢到的最大值为两种情况的最值</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回动态规划数组的最后一个元素</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态规划+空间优化</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组为null或长度为0</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组长度为1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两个动态规划辅助变量</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> first <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//保存first的值</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第i个房屋抢不抢的情况的最值, 更新两个辅助变量</span>            first <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>second<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>            second <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回最值</span>        <span class="token keyword">return</span> first<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，遍历房间一次。</li><li>空间复杂度：优化前O(n)，优化后O(1)。</li></ul><h2 id="0199-二叉树的右视图"><a href="#0199-二叉树的右视图" class="headerlink" title="0199. 二叉树的右视图"></a>0199. 二叉树的右视图</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/">https://leetcode-cn.com/problems/binary-tree-right-side-view/</a></p><p><strong>方法一</strong>：广度优先搜索</p><p>利用<code>BFS</code>进行层次遍历，记录下每层的最后一个元素。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//BFS:广度优先搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集合</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//辅助层次遍历队列</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加入头结点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//层次遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> curSize <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>curSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//记录该层最后一个节点值</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>curSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果集合</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，访问每个节点一次。</li><li>空间复杂度：O(n)，队列使用空间。</li></ul><p><strong>方法二</strong>：深度优先遍历</p><p>我们按照<strong>「根-&gt;右-&gt;左」</strong>的顺序访问，就可以保证每层都是最先访问最右边的节点。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//DFS:深度优先搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果集合</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用递归</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回结果集合</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先访问当前节点，再递归地访问 右子树 和 左子树。</span>        <span class="token comment" spellcheck="true">//如果当前节点所在深度还没有出现在res里，说明在该深度下当前节点是第一个被访问的节点，</span>        <span class="token comment" spellcheck="true">//因此将当前节点加入res中。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token operator">==</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，每个节点都访问了1次。</li><li>空间复杂度：O(n)，递归栈空间，树的高度。</li></ul><h2 id="0200-岛屿数量"><a href="#0200-岛屿数量" class="headerlink" title="0200. 岛屿数量"></a>0200. 岛屿数量</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/number-of-islands/">https://leetcode-cn.com/problems/number-of-islands/</a></p><p><strong>方法一</strong>：深度优先搜索</p><p>如图，我们其实要求的是红色区域的个数，换句话说就是求连续区域的个数。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0200-1.43q94vy0dtm0.png" alt="0200-1"></p><p>符合直觉的做法是用DFS来解：</p><ul><li>我们需要建立一个<code>isVisited</code>数组用来记录某个位置是否被访问过；</li><li>对于为<code>1</code>且未被访问过的位置，将<code>isVisited</code>置为<code>true</code>，然后我们递归进入其上下左右位置上为<code>1</code>的位置，将<code>isVisited</code>置为<code>true</code>；</li><li>找完相邻区域后，我么将结果<code>res</code>自增<code>1</code>，然后继续寻找下一个为<code>1</code>且未被访问过的位置，直到遍历完二维网格。</li></ul><p>但是这道题目只是让我们求连通区域的个数，因此<strong>我们其实不需要额外的空间存储<code>isVisited</code>信息</strong>。注意到上面的过程，我们对数字<code>0</code>不会进行操作，也就是对我们“没用”，<strong>因此对于已经访问过的元素，我们可以将其置为<code>0</code>即可</strong>。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//深度优先搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//特殊情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token operator">==</span>null <span class="token operator">||</span> grid<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历二维网格，求连通区域个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//求当前1的所有连通位置</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//结果+1</span>                    res<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边界条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">>=</span>grid<span class="token punctuation">.</span>length <span class="token operator">||</span> j<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> j<span class="token operator">>=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//与当前连接的1置为0</span>        grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(mn)，其中<code>m</code>和<code>n</code>分别为行数和列数。</li><li>空间复杂度：O(mn)，在最坏情况下，整个网格均为陆地，深度优先搜索的深度达到<code>mn</code>。</li></ul><h2 id="0201-数字范围按位与"><a href="#0201-数字范围按位与" class="headerlink" title="0201. 数字范围按位与"></a>0201. 数字范围按位与</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/">https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/</a></p><p><strong>方法一</strong>：位运算</p><p>最直观做法是迭代范围内的每个数字，依次进行按位与运算，得到最终结果。但是这种方案在范围较大的测试用例中会因超过时间限制而无法通过。因此需要另寻他路。</p><p>回到本题，首先我们可以对范围内的每个数字用二进制的字符串表示，例如 <code>9=00001001</code><sub><code>(2)</code></sub>，然后我们将每个二进制字符串的位置对齐。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0201-1.6trhyssa7680.png" alt="0201-1"></p><p>在上图的例子中，我们可以发现，对所有数字执行按位与运算的结果是所有对应二进制字符串的公共前缀再用零补上后面的剩余位。</p><p>进一步来说，所有这些二进制字符串的公共前缀也即指定范围的起始和结束数字 <code>m</code> 和 <code>n</code>的公共前缀（即在上面的示例中分别为 <code>9</code> 和 <code>12</code>）。</p><p>因此，最终我们的问题重新表述为：<strong>给定两个整数，我们要找到它们对应的二进制字符串的公共前缀</strong>。</p><p>我们的想法将两个数字不断向右移动，直到数字相等，即数字的二进制字符串的公共前缀。然后通过公共前缀向左移动，将零添加到公共前缀的右边以获得最终结果。算法由两个步骤组成：</p><ul><li>右移，将两个数字压缩为它们的公共前缀，在迭代过程中，我们计算执行的右移操作次数；</li><li>将公共前缀左移相同的操作次数得到结果。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0201-2.46ecrm1uudy0.png" alt="0201-2"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//位运算</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rangeBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录求公共前缀的右移次数</span>        <span class="token keyword">int</span> shift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不断右移，得到两个数的公共前缀</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">!=</span>right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            left <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>            right <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>            shift<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//公共前缀左移shift次补零，得到最终结果</span>        <span class="token keyword">return</span> left <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)，取决于<code>m</code>和<code>n</code>的二进制位数，有限。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0207-课程表"><a href="#0207-课程表" class="headerlink" title="0207 课程表"></a>0207 课程表</h2><p><strong>题目地址</strong>：<a href="https://leetcode-cn.com/problems/course-schedule/">https://leetcode-cn.com/problems/course-schedule/</a></p><p>「本题可约化为」：课程安排图是否是<strong>有向无环图（DAG）</strong>。即课程规定了前置条件，但不能构成任何环路，否则课程前置条件不成立。思路是通过<strong>拓扑排序</strong>判断此课程安排图是否是<strong>有向无环图（DAG）</strong>。</p><p>通过课程的前置条件列表<code>prerequisites</code>可以得到课程安排图的<strong>邻接表</strong><code>adjacency</code>，一降低时间复杂度，以下两种方法都会用到邻接表。</p><p><strong>方法一</strong>：广度优先搜索（容易理解些）</p><p>算法流程</p><ul><li>统计课程安排图中每个节点的入度，生成<strong>入度表</strong><code>indegrees</code>；</li><li>借助一个队列<code>queue</code>，将所有入度为<code>0</code>的节点入队；</li><li>当<code>queue</code>非空时，依次将队首节点出队，在课程安排图中“删除”此节点<code>pre</code>；</li><li><ul><li>并不是真正从邻接表中删除此节点<code>pre</code>，而是将此节点对应的所有邻接节点<code>cur</code>的入度减<code>1</code>，即<code>indegrees[cur] -= 1</code></li><li>当入度减<code>1</code>后邻接节点<code>cur</code>的入度为<code>0</code>，说明<code>cur</code>所有的前驱节点已经被“删除”，此时将<code>cur</code>入队</li></ul></li><li>在每次<code>pre</code>出队时，执行<code>numCourses--</code>；</li><li><ul><li>若整个课程安排图是有向无环图（即可以安排），则所有节点一定都入队并出队过，即完成拓扑排序。换个角度说，若课程安排图中存在环，一定有节点的入度始终不为<code>0</code></li><li>因此，拓扑排序出队次数等于课程个数，返回<code>numCourses==0</code>判断课程是否可以成功安排</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0207-1.6vpb5w9dpo00.png" alt="0207-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indegrees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//入度表</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> adjacency <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//邻接矩阵</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//入度为零的队列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化邻接矩阵</span>            adjacency<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//根据课程安排获得入度表和邻接矩阵,cp[1]-->cp[0]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cp <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            indegrees<span class="token punctuation">[</span>cp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//入度++</span>            adjacency<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//邻接表更新</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//入度为0的节点入队列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>indegrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//BFS广度优先，拓扑排序TopSort，时间复杂度和空间复杂度为O(n+m)，节点+边</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pre <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出队一个入度为0的节点</span>            numCourses<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//课程数量减1</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">:</span> adjacency<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出队节点指向的节点入度均减1</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>indegrees<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果某节点入度减到0，入队</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> numCourses<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n+m)，遍历一个图需要访问所有节点和所有临边，<code>n</code>和<code>m</code>分别为节点数量和临边数量。</li><li>空间复杂度：O(n+m)，为建立邻接表所需额外空间，<code>adjacency</code>长度为<code>n</code>，并存储<code>m</code>条临边的数据。</li></ul><p><strong>方法二</strong>：深度优先搜索（不易理解）</p><p>原理是通过<code>DFS</code>判断图中是否有环，算法流程详见<a href="https://leetcode-cn.com/problems/course-schedule/solution/course-schedule-tuo-bu-pai-xu-bfsdfsliang-chong-fa/">https://leetcode-cn.com/problems/course-schedule/solution/course-schedule-tuo-bu-pai-xu-bfsdfsliang-chong-fa/</a></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//深度优先搜索</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标志列表，0未被访问，-1被其他起点的DFS访问，1被当前起点DFS访问</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//邻接表建立</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> adjacency <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            adjacency<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cp <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            adjacency<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//DFS，对所有节点为起点深度优先遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>adjacency<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> adjacency<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本轮DFS第二次访问节点i，有环</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点已被其他DFS访问，直接返回True</span>        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前访问节点i对应flag置1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Integer j <span class="token operator">:</span> adjacency<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//节点i所有邻接节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>adjacency<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发现环直接返回false</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前节点所有邻接节点已被遍历，没有环，当前节点置为-1，并且返回true</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n+m)，遍历一个图需要访问所有节点和所有临边，<code>n</code> 和 <code>m</code>分别为节点数量和临边数量；</li><li>空间复杂度：O(n+m)，为建立邻接表所需额外空间，<code>adjacency</code>长度为<code>n</code>，并存储<code>m</code>条临边的数据。</li></ul><h2 id="0208-实现-Trie-前缀树"><a href="#0208-实现-Trie-前缀树" class="headerlink" title="0208. 实现 Trie (前缀树)"></a>0208. 实现 Trie (前缀树)</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/">https://leetcode-cn.com/problems/implement-trie-prefix-tree/</a></p><p><strong>方法一</strong>：字典树</p><p><code>Trie</code>，又称前缀树或字典树，是<code>一颗有根树</code>，其每个节点<strong>包含以下字段</strong>：</p><ul><li>指向子节点的指针数组<code>children</code>。对于本题而言，数组长度为26，即小写英文字母的数量。此时<code>children[0]</code>对应小写字母<code>a</code>，<code>children[1]</code>对应小写字母<code>b</code>，…，<code>children[25]</code>对应小写字母<code>z</code>。</li><li>布尔字段isEnd，表示该节点是否为字符串的结尾。</li></ul><p>前缀树的<strong>优点</strong>：利用字符串的公共前缀来节约存储空间，缩小查词范围，从而达到高效检索的目的。</p><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0208-1.14vk6fln0nmk.png" alt="0208-1"></p><p>前缀树操作实现：</p><ul><li><strong>插入</strong>：每遍历字符串中的一个字母，<strong>若该字母没有出现过</strong>，则就在对应的空位置往下生成一个<code>Trie</code>；<strong>若该字母出现过</strong>，则直接遍历下一个字母，直到字符串遍历结束（<strong>注意：结束时要标记为<code>isEnd=true</code>，表示这个单词已经结束了</strong>）。</li><li><strong>查找</strong>：遍历要查找的字符串<code>word</code>，<strong>若还未遍历到<code>end</code><strong>，在某个字符处出现了<code>null</code>，则直接返回<code>false</code>，当前这个位置没有该字符，无法查找到这个单词。</strong>否则，一直遍历到查找字符串<code>word</code>的末尾</strong>，若当前这个位置<code>isEnd==true</code>，表示在前缀树中找到了该单词<code>word</code>，如当前这个位置<code>isEnd==false</code>，表示没有这个单词。</li><li><strong>前缀匹配</strong>：遍历需要前缀匹配的字符串<code>prefix</code>，**只要在某字母的位置出现了<code>null</code>，则直接返回<code>false</code>**（因为该位置没有该字符，无法找到这个前缀）；否则，直到<code>prefix</code>全部遍历完成后都没有返回<code>false</code>的话，则表示当前字典树中有该前缀字符串，返回<code>true</code>即可。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两个字段</span>    Trie<span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//26个字母</span>    <span class="token keyword">boolean</span> isEnd<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否是字符串结尾</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">public</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//插入单词字符串</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点</span>        Trie node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历单词字符串，生成孩子节点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//字母索引</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前索引没有出现该字母，加入孩子节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新当前节点</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串结尾，isEnd字段置为true</span>        node<span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查找单词字符串</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点</span>        Trie node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历单词字符串</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//字母索引</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前索引没有出现该字母，直接返回false</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新当前节点</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历到结尾，返回当前节点的isEnd，如果是单词结尾，返回true，否则返回false</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>isEnd<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//前缀匹配</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前节点</span>        Trie node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历前缀</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//字母索引</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前索引没有出现该字母，直接返回false</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新当前节点</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历到前缀结尾，直接返回true</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(|S|)，<code>|S|</code>时每次插入或查询字符串的长度。</li><li>空间复杂度：O(|T|·∑)，<code>|T|</code>为所有插入字符串的长度之和，<code>∑</code>为字符集大小，本题<code>26</code>。</li></ul><h2 id="0209-长度最小的子数组"><a href="#0209-长度最小的子数组" class="headerlink" title="0209. 长度最小的子数组"></a>0209. 长度最小的子数组</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">https://leetcode-cn.com/problems/minimum-size-subarray-sum/</a></p><p><strong>方法一</strong>：滑动窗口</p><p>定义两个指针<code>left</code>和<code>right</code>分别表示子数组（滑动窗口窗口）的开始位置和结束位置，维护遍历<code>sum</code>存储子数组中的元素和（即从<code>nums[left]</code>到<code>nums[right]</code>的元素和）。</p><p>初始状态下，<code>left</code>和<code>right</code>都指向下标<code>0</code>，<code>sum</code>的值为<code>0</code>。</p><ul><li>移动右指针，扩大窗口，直到子数组达到目标值<code>target</code>；</li><li>移动左指针，缩小窗口，直到子数组不满足目标值；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0209-1.1z1m9k35u08w.gif" alt="0209-1"></p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//滑动窗口</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//长度最小的子数组，初始化为整数最大值</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化滑动窗口指针和窗口内元素和sum</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//滑动右指针，直到sum>=target</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//滑动左指针，直到sum&lt;target</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">>=</span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//更新窗口元素和大于目标值的窗口最小值</span>                min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回满足条件的最小子数组长度，注意min没有更新时返回0</span>        <span class="token keyword">return</span> min<span class="token operator">==</span>Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> min<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>是数组长度，指针<code>left</code>和<code>right</code>最多各移动<code>n</code>次。</li><li>空间复杂度：O(1)。</li></ul><h2 id="0211-添加与搜索单词-数据结构设计"><a href="#0211-添加与搜索单词-数据结构设计" class="headerlink" title="0211. 添加与搜索单词 - 数据结构设计"></a>0211. 添加与搜索单词 - 数据结构设计</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/">https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/</a></p><p><strong>方法一</strong>：前缀树</p><p>当调用<code>addWord()</code>方法时：</p><ul><li>遍历字符串单词<code>word</code>，<strong>若当前遍历的字符在前缀树的<code>children[26]</code>中对应位置为空</strong>，此时需要在该位置定义一个<code>Trie()</code>表示这个位置已经有了字符；</li><li>在将<code>word</code>全部遍历完时退出循环，**将该字符串最后一个位置上的字符的<code>isEnd</code>设置为<code>true</code>**表示该字符串在这里结束了。</li></ul><p>当调用<code>search()</code>方法时：</p><ul><li><strong>若当前遍历的字符不是<code>&#39;.&#39;</code>并且该位置上也没有<code>Trie</code>节点</strong>，则说明该单词不在树中，直接返回<code>false</code>；</li><li><strong>若当前遍历的字符是<code>&#39;.&#39;</code>，需要继续遍历<code>node.children[26]</code>中所有不为空的节点进行深度搜索</strong>，如果存在下一个字母，则从下一个字母开始再继续做检查，该过程深入几层后，可能存在不满足的情况，此时需要回溯，所以最好采用递归。</li></ul><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//前缀树类</span><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字段变量</span>    Trie<span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//孩子节点</span>    <span class="token keyword">boolean</span> isEnd<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否是单词结尾</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">public</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最多孩子节点等于小写字母数</span>        isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//词典类</span><span class="token keyword">class</span> <span class="token class-name">WordDictionary</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//前缀树根节点</span>    Trie root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">public</span> <span class="token function">WordDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将 word 添加到数据结构中，之后可以对它进行匹配</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addWord</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//前缀树根节点</span>        Trie node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历将word加入前缀树</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前位置没有该字符，添加前缀树节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新前缀树节点</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//word结尾，将末尾前缀树节点标记true</span>        node<span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//搜索word</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用递归</span>        <span class="token keyword">return</span> <span class="token function">searchWord</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">searchWord</span><span class="token punctuation">(</span>String word<span class="token punctuation">,</span> Trie root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前根节点</span>        Trie node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历当前匹配字符串word</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前字符不为'.'且当前字符位置节点为空，无法匹配字符，返回false</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果当前字符是 '.'，则对该节点所有不为空的节点进行深度搜索</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//遍历当前节点的所有子节点 node.children[26]</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 如果存在下一个字母，则从下一个字母开始再继续做检查</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//深度搜索</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">searchWord</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//下一个字母都不匹配，返回false</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新前缀树节点，下一个检查字母</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回最后一个匹配字符的isEnd</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>isEnd<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>不分析。</li></ul><h2 id="0215-数组中的第-K-个最大元素"><a href="#0215-数组中的第-K-个最大元素" class="headerlink" title="0215. 数组中的第 K 个最大元素"></a>0215. 数组中的第 K 个最大元素</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">https://leetcode-cn.com/problems/kth-largest-element-in-an-array/</a></p><p><strong>方法一</strong>：快速排序</p><p>注意事项：很重要，放前面说</p><ul><li><strong>快速排序虽然快，但如果实现得不好，在遇到特殊测试用例的时候，时间复杂度会变得很高</strong>。</li></ul><p>我们在学习“快速排序”的时候，接触的第一个操作就是<code>partition</code>（切分），操作后结果如下：</p><ul><li>对某个索引<code>j</code>，<code>nums[j]</code>已经排定，即经过<code>partition</code>（切分）操作以后会放置在它“最终放置的地方”；</li><li><code>nums[left]</code>到<code>nums[j-1]</code>中所有元素都不大于<code>nums[j]</code>；</li><li><code>nums[j+1]</code>到<code>nums[right]</code>中的所有元素都不小于<code>nums[j]</code>；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/LeetCode-medium/0215-1.34itpcdbsye0.png" alt="0215-1"></p><p><code>partition</code>（切分）操作总能排定一个元素，还能够知道它最终所在的位置，这样每经过一次<code>partition</code>（切分）操作就能缩小搜索范围，这样的思想叫做“<strong>减而治之</strong>”（“分而治之”的特例）。</p><p>切分过程可以不借助额外数组空间，仅通过交换数组元素实现。</p><p>注意本题必须随机初始化<code>pivot</code>，否则测试用例中的极端测试用例会导致时间复杂度是O(n<sub>2</sub>)。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快速排序，随机pivot</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字段变量</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第k大元素所在位置</span>        <span class="token keyword">int</span> target <span class="token operator">=</span> len <span class="token operator">-</span> k<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//切分操作位置</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//切分操作位置比目标位置小，目标在切分位置右边，右移left</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//切分操作位置比目标位置大，目标在切分位置左边，左移right</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//切分操作位置等于目标位置，返回该位置元素</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在区间 [left, right] 这个区间执行 partition（切分）操作</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在区间随机选择一个元素作为标定点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//left可能等于right</span>            <span class="token keyword">int</span> randomIndex <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> randomIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先保存pivot元素位置不变，将区间内小于pivot的元素逐渐加到pivot位置之后</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//循环之后，left位置时pivot，j位置是最后一个小于pivot的位置，交换两者</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回pivot元素的位置</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//交换两索引元素</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，<code>n</code>是数组长度。</li><li>空间复杂度：O(1)，原地排序，没有借助额外空间。</li></ul><p><strong>方法二</strong>：优先队列（堆）</p><p>优先队列的思路时很朴素的。因为第<code>k</code>大元素，<strong>其实就是整个数组排序以后，后半部分最小的那个元素</strong>，因此我们可以<strong>维护一个最小堆（小顶堆）</strong>：</p><ul><li>遍历将数组元素加入小顶堆，当堆大小大于<code>k</code>时，删除堆顶。遍历结束，堆顶就是第<code>k</code>大元素。</li></ul><p>优先队列的写法很多（列举一下最小堆和最大堆），大同小异，没有本质区别。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            head<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><h2 id="0221-最大正方形"><a href="#0221-最大正方形" class="headerlink" title="0221. 最大正方形"></a>0221. 最大正方形</h2><h2 id="0227-基本计算器-II"><a href="#0227-基本计算器-II" class="headerlink" title="0227. 基本计算器 II"></a>0227. 基本计算器 II</h2><h2 id="0229-求众数-II"><a href="#0229-求众数-II" class="headerlink" title="0229. 求众数 II"></a>0229. 求众数 II</h2><p><strong>题目地址</strong>:</p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="0230-二叉搜索树中第-K-小的元素"><a href="#0230-二叉搜索树中第-K-小的元素" class="headerlink" title="0230. 二叉搜索树中第 K 小的元素"></a>0230. 二叉搜索树中第 K 小的元素</h2><h2 id="0236-二叉树的最近公共祖先"><a href="#0236-二叉树的最近公共祖先" class="headerlink" title="0236. 二叉树的最近公共祖先"></a>0236. 二叉树的最近公共祖先</h2><h2 id="0238-除自身以外数组的乘积"><a href="#0238-除自身以外数组的乘积" class="headerlink" title="0238. 除自身以外数组的乘积"></a>0238. 除自身以外数组的乘积</h2><h2 id="0240-搜索二维矩阵-II"><a href="#0240-搜索二维矩阵-II" class="headerlink" title="0240. 搜索二维矩阵 II"></a>0240. 搜索二维矩阵 II</h2><h2 id="0279-完全平方数"><a href="#0279-完全平方数" class="headerlink" title="0279. 完全平方数"></a>0279. 完全平方数</h2><h2 id="0309-最佳买卖股票时机含冷冻期"><a href="#0309-最佳买卖股票时机含冷冻期" class="headerlink" title="0309. 最佳买卖股票时机含冷冻期"></a>0309. 最佳买卖股票时机含冷冻期</h2><h2 id="0322-零钱兑换"><a href="#0322-零钱兑换" class="headerlink" title="0322. 零钱兑换"></a>0322. 零钱兑换</h2><h2 id="0328-奇偶链表"><a href="#0328-奇偶链表" class="headerlink" title="0328. 奇偶链表"></a>0328. 奇偶链表</h2><p><strong>题目地址</strong>:</p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="0334-递增的三元子序列"><a href="#0334-递增的三元子序列" class="headerlink" title="0334. 递增的三元子序列"></a>0334. 递增的三元子序列</h2><h2 id="0337-打家劫舍-III"><a href="#0337-打家劫舍-III" class="headerlink" title="0337. 打家劫舍 III"></a>0337. 打家劫舍 III</h2><h2 id="0343-整数拆分"><a href="#0343-整数拆分" class="headerlink" title="0343. 整数拆分"></a>0343. 整数拆分</h2><h2 id="0365-水壶问题"><a href="#0365-水壶问题" class="headerlink" title="0365. 水壶问题"></a>0365. 水壶问题</h2><h2 id="0371-两整数之和"><a href="#0371-两整数之和" class="headerlink" title="0371 两整数之和"></a>0371 两整数之和</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/sum-of-two-integers/">https://leetcode-cn.com/problems/sum-of-two-integers/</a></p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="0378-有序矩阵中第-K-小的元素"><a href="#0378-有序矩阵中第-K-小的元素" class="headerlink" title="0378. 有序矩阵中第 K 小的元素"></a>0378. 有序矩阵中第 K 小的元素</h2><h2 id="0380-常数时间插入、删除和获取随机元素"><a href="#0380-常数时间插入、删除和获取随机元素" class="headerlink" title="0380. 常数时间插入、删除和获取随机元素"></a>0380. 常数时间插入、删除和获取随机元素</h2><h2 id="0394-字符串解码"><a href="#0394-字符串解码" class="headerlink" title="0394. 字符串解码"></a>0394. 字符串解码</h2><h2 id="0416-分割等和子集"><a href="#0416-分割等和子集" class="headerlink" title="0416. 分割等和子集"></a>0416. 分割等和子集</h2><h2 id="0437-路径总和-III"><a href="#0437-路径总和-III" class="headerlink" title="0437 路径总和 III"></a>0437 路径总和 III</h2><p><strong>题目地址</strong>:</p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="0445-两数相加-II"><a href="#0445-两数相加-II" class="headerlink" title="0445. 两数相加 II"></a>0445. 两数相加 II</h2><h2 id="0454-四数相加-II"><a href="#0454-四数相加-II" class="headerlink" title="0454. 四数相加 II"></a>0454. 四数相加 II</h2><h2 id="0464-我能赢么"><a href="#0464-我能赢么" class="headerlink" title="0464. 我能赢么"></a>0464. 我能赢么</h2><h2 id="0494-目标和"><a href="#0494-目标和" class="headerlink" title="0494. 目标和"></a>0494. 目标和</h2><h2 id="0516-最长回文子序列"><a href="#0516-最长回文子序列" class="headerlink" title="0516. 最长回文子序列"></a>0516. 最长回文子序列</h2><h2 id="0513-找树左下角的值"><a href="#0513-找树左下角的值" class="headerlink" title="0513. 找树左下角的值"></a>0513. 找树左下角的值</h2><h2 id="0518-零钱兑换-II"><a href="#0518-零钱兑换-II" class="headerlink" title="0518. 零钱兑换 II"></a>0518. 零钱兑换 II</h2><h2 id="0547-朋友圈"><a href="#0547-朋友圈" class="headerlink" title="0547. 朋友圈"></a>0547. 朋友圈</h2><p><strong>题目地址</strong>:</p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="0560-和为-K-的子数组"><a href="#0560-和为-K-的子数组" class="headerlink" title="0560. 和为 K 的子数组"></a>0560. 和为 K 的子数组</h2><h2 id="0609-在系统中查找重复文件"><a href="#0609-在系统中查找重复文件" class="headerlink" title="0609. 在系统中查找重复文件"></a>0609. 在系统中查找重复文件</h2><h2 id="0611-有效三角形的个数"><a href="#0611-有效三角形的个数" class="headerlink" title="0611. 有效三角形的个数"></a>0611. 有效三角形的个数</h2><h2 id="0686-重复叠加字符串匹配"><a href="#0686-重复叠加字符串匹配" class="headerlink" title="0686. 重复叠加字符串匹配"></a>0686. 重复叠加字符串匹配</h2><h2 id="0718-最长重复子数组"><a href="#0718-最长重复子数组" class="headerlink" title="0718. 最长重复子数组"></a>0718. 最长重复子数组</h2><h2 id="0754-到达终点数字"><a href="#0754-到达终点数字" class="headerlink" title="0754. 到达终点数字"></a>0754. 到达终点数字</h2><h2 id="0785-判断二分图"><a href="#0785-判断二分图" class="headerlink" title="0785. 判断二分图"></a>0785. 判断二分图</h2><h2 id="0816-模糊坐标"><a href="#0816-模糊坐标" class="headerlink" title="0816. 模糊坐标"></a>0816. 模糊坐标</h2><h2 id="0820-单词的压缩编码"><a href="#0820-单词的压缩编码" class="headerlink" title="0820. 单词的压缩编码"></a>0820. 单词的压缩编码</h2><h2 id="0875-爱吃香蕉的珂珂"><a href="#0875-爱吃香蕉的珂珂" class="headerlink" title="0875. 爱吃香蕉的珂珂"></a>0875. 爱吃香蕉的珂珂</h2><h2 id="0877-石子游戏"><a href="#0877-石子游戏" class="headerlink" title="0877. 石子游戏"></a>0877. 石子游戏</h2><p><strong>题目地址</strong>:</p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="0886-可能的二分法"><a href="#0886-可能的二分法" class="headerlink" title="0886. 可能的二分法"></a>0886. 可能的二分法</h2><h2 id="0900-RLE-迭代器"><a href="#0900-RLE-迭代器" class="headerlink" title="0900. RLE 迭代器"></a>0900. RLE 迭代器</h2><h2 id="0911-在线选举"><a href="#0911-在线选举" class="headerlink" title="0911. 在线选举"></a>0911. 在线选举</h2><h2 id="0912-排序数组"><a href="#0912-排序数组" class="headerlink" title="0912. 排序数组"></a>0912. 排序数组</h2><h2 id="0930-和相同的二元子数组"><a href="#0930-和相同的二元子数组" class="headerlink" title="0930. 和相同的二元子数组"></a>0930. 和相同的二元子数组</h2><p><strong>题目地址</strong>:<a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/">https://leetcode-cn.com/problems/binary-subarrays-with-sum/</a></p><p><strong>方法一</strong>：哈希表前缀和</p><p>假设原数组的前缀和数组为<code>sum</code>，且子数组<code>(i,j]</code>的区间和为<code>goal</code>，那么<code>sum[j]-sum[i]=goal</code>，因此我们可以枚举<code>j</code>，每次查询满足该等式的<code>i</code>的数量。</p><p><strong>具体地，我们用哈希表记录每一种前缀和出现的次数，假设我们当前枚举到元素<code>nums[j]</code>，我们只需要查询哈希表中元素<code>sum[j]-goal</code>的数量即可</strong>，这些元素的数量即对应了以当前<code>j</code>值为右边界的满足条件的子数组的数量。最后这些元素的总数量即为所有和为<code>goal</code>的子数组的数量。</p><p>在实际代码中，我们实时更新哈希表，以防止出现<code>i&gt;=j</code>的情况。</p><p><strong>代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//哈希表前缀和</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSubarraysWithSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> goal<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//前缀和</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//满足条件的子数组数量</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历所有前缀</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//先放入前缀和</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新前缀和</span>            sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计算当前前缀为右边界满足条件的子数组数目</span>            res <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> goal<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(n)。</li></ul><h2 id="0935-骑士拨号器"><a href="#0935-骑士拨号器" class="headerlink" title="0935. 骑士拨号器"></a>0935. 骑士拨号器</h2><h2 id="0978-最长湍流子数组"><a href="#0978-最长湍流子数组" class="headerlink" title="0978. 最长湍流子数组"></a>0978. 最长湍流子数组</h2><h2 id="0987-二叉树的垂序遍历"><a href="#0987-二叉树的垂序遍历" class="headerlink" title="0987. 二叉树的垂序遍历"></a>0987. 二叉树的垂序遍历</h2><h2 id="1011-在-D-天内送达包裹的能力"><a href="#1011-在-D-天内送达包裹的能力" class="headerlink" title="1011. 在 D 天内送达包裹的能力"></a>1011. 在 D 天内送达包裹的能力</h2><h2 id="1014-最佳观光组合"><a href="#1014-最佳观光组合" class="headerlink" title="1014. 最佳观光组合"></a>1014. 最佳观光组合</h2><p><strong>题目地址</strong>:</p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="1015-可被-K-整除的最小整数"><a href="#1015-可被-K-整除的最小整数" class="headerlink" title="1015. 可被 K 整除的最小整数"></a>1015. 可被 K 整除的最小整数</h2><h2 id="1019-链表中的下一个更大节点"><a href="#1019-链表中的下一个更大节点" class="headerlink" title="1019. 链表中的下一个更大节点"></a>1019. 链表中的下一个更大节点</h2><h2 id="1020-飞地的数量"><a href="#1020-飞地的数量" class="headerlink" title="1020. 飞地的数量"></a>1020. 飞地的数量</h2><h2 id="1023-驼峰式匹配"><a href="#1023-驼峰式匹配" class="headerlink" title="1023. 驼峰式匹配"></a>1023. 驼峰式匹配</h2><h2 id="1031-两个非重叠子数组的最大和"><a href="#1031-两个非重叠子数组的最大和" class="headerlink" title="1031. 两个非重叠子数组的最大和"></a>1031. 两个非重叠子数组的最大和</h2><h2 id="1104-二叉树寻路"><a href="#1104-二叉树寻路" class="headerlink" title="1104. 二叉树寻路"></a>1104. 二叉树寻路</h2><h2 id="1131-绝对值表达式的最大值"><a href="#1131-绝对值表达式的最大值" class="headerlink" title="1131.绝对值表达式的最大值"></a>1131.绝对值表达式的最大值</h2><h2 id="1186-删除一次得到子数组最大和"><a href="#1186-删除一次得到子数组最大和" class="headerlink" title="1186. 删除一次得到子数组最大和"></a>1186. 删除一次得到子数组最大和</h2><h2 id="1218-最长定差子序列"><a href="#1218-最长定差子序列" class="headerlink" title="1218. 最长定差子序列"></a>1218. 最长定差子序列</h2><p><strong>题目地址</strong>:</p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="1227-飞机座位分配概率"><a href="#1227-飞机座位分配概率" class="headerlink" title="1227. 飞机座位分配概率"></a>1227. 飞机座位分配概率</h2><h2 id="1261-在受污染的二叉树中查找元素"><a href="#1261-在受污染的二叉树中查找元素" class="headerlink" title="1261. 在受污染的二叉树中查找元素"></a>1261. 在受污染的二叉树中查找元素</h2><h2 id="1262-可被三整除的最大和"><a href="#1262-可被三整除的最大和" class="headerlink" title="1262. 可被三整除的最大和"></a>1262. 可被三整除的最大和</h2><h2 id="1297-子串的最大出现次数"><a href="#1297-子串的最大出现次数" class="headerlink" title="1297. 子串的最大出现次数"></a>1297. 子串的最大出现次数</h2><h2 id="1310-子数组异或查询"><a href="#1310-子数组异或查询" class="headerlink" title="1310. 子数组异或查询"></a>1310. 子数组异或查询</h2><h2 id="1334-阈值距离内邻居最少的城市"><a href="#1334-阈值距离内邻居最少的城市" class="headerlink" title="1334. 阈值距离内邻居最少的城市"></a>1334. 阈值距离内邻居最少的城市</h2><h2 id="1371-每个元音包含偶数次的最长子字符串"><a href="#1371-每个元音包含偶数次的最长子字符串" class="headerlink" title="1371.每个元音包含偶数次的最长子字符串"></a>1371.每个元音包含偶数次的最长子字符串</h2><h2 id="1381-设计一个支持增量操作的栈"><a href="#1381-设计一个支持增量操作的栈" class="headerlink" title="1381. 设计一个支持增量操作的栈"></a>1381. 设计一个支持增量操作的栈</h2><p><strong>题目地址</strong>:</p><p><strong>方法一</strong>：</p><p><strong>代码</strong></p><p><strong>复杂度分析</strong></p><h2 id="1558-得到目标数组的最少函数调用次数"><a href="#1558-得到目标数组的最少函数调用次数" class="headerlink" title="1558. 得到目标数组的最少函数调用次数"></a>1558. 得到目标数组的最少函数调用次数</h2><h2 id="1574-删除最短的子数组使剩余数组有序"><a href="#1574-删除最短的子数组使剩余数组有序" class="headerlink" title="1574. 删除最短的子数组使剩余数组有序"></a>1574. 删除最短的子数组使剩余数组有序</h2><h2 id="1631-最小体力消耗路径"><a href="#1631-最小体力消耗路径" class="headerlink" title="1631. 最小体力消耗路径"></a>1631. 最小体力消耗路径</h2><h2 id="1658-将-x-减到-0-的最小操作数"><a href="#1658-将-x-减到-0-的最小操作数" class="headerlink" title="1658. 将 x 减到 0 的最小操作数"></a>1658. 将 x 减到 0 的最小操作数</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> LeetCode-medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hugo博客搭建</title>
      <link href="/posts/43449.html"/>
      <url>/posts/43449.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-注册Github"><a href="#1-1-注册Github" class="headerlink" title="1.1 注册Github"></a>1.1 注册Github</h3><ul><li>在<code>Github</code>官网进行注册，注意要验证邮箱后方能使用，如果接收不到邮件，请设置邮箱白名单。</li></ul><h3 id="1-2-Git安装与配置"><a href="#1-2-Git安装与配置" class="headerlink" title="1.2 Git安装与配置"></a>1.2 Git安装与配置</h3><ul><li>各种操作系统（<code>OS</code>）安装包下载：<code>https://git-scm.com/</code></li><li><code>win</code> 安装除了安装目录其余选项默认即可，桌面右键出现Git <code>GUI Here</code>和<code>Git Bash Here</code>表示安装成功，如下图所示。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/createblog/1.6k0ytgz22cw0.png" alt="1"></p><ul><li><code>Git</code>基本信息设置，在桌面右键，选择<code>Git Bash Here</code>，依次运行如下命令设置用户名和邮箱</li></ul><pre class=" language-YAML"><code class="language-YAML">git config --global user.name 'your name'  //设置为github用户名git config --global user.email 'your email'  //设置github邮箱git config --list  //查看设置结果</code></pre><ul><li>运行如下命令，按几次<code>Enter</code>结束运行，会自动的在用户目录<code>C:\Users\WXZ\</code>生成一个<code>“.ssh”</code>的目录，里面会保存有两个文件：私钥（<code>id_rsa</code>）、公钥（<code>id_rsa.pub</code>）</li></ul><pre class=" language-yaml"><code class="language-yaml">ssh<span class="token punctuation">-</span>keygen <span class="token punctuation">-</span>t rsa <span class="token punctuation">-</span>C "your email"</code></pre><ul><li>打开<code>github</code>主页，点击右上角头像，选择<code>settings</code>，将公钥内容复制到<code>SSH</code>，名称随意设置，如下图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/createblog/2.5mph8dk19a00.png" alt="2"></p><h3 id="1-3-Hugo安装与配置"><a href="#1-3-Hugo安装与配置" class="headerlink" title="1.3 Hugo安装与配置"></a>1.3 Hugo安装与配置</h3><ul><li><code>win</code>平台到框架下载地址：<code>https://github.com/gohugoio/hugo/releases</code>，找到<code>hugo_0.78.0_Windows-64bit.zip</code>或<code>hugo_extended_0.83.1_Windows-64bit.zip</code>（功能更全，<strong>推荐</strong>）p)下载，解压到指定路径并添加到用户变量<code>Path</code>中（如果下面操作有问题就重启一下）</li><li><code>win+R</code>打开<code>cmd</code>输入<code>hugo version</code>，出现下图表示安装成功。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/createblog/3.197izlj9gt28.png" alt="3"></p><p> 恭喜你完成了所有准备工作！！！</p><h2 id="2-Hugo本地个人博客生成"><a href="#2-Hugo本地个人博客生成" class="headerlink" title="2. Hugo本地个人博客生成"></a>2. Hugo本地个人博客生成</h2><h3 id="2-1-生成个人博客并设置主题"><a href="#2-1-生成个人博客并设置主题" class="headerlink" title="2.1 生成个人博客并设置主题"></a>2.1 生成个人博客并设置主题</h3><ul><li>在指定目录（可以是<code>Hugo</code>目录）右键<code>Git Bash Here</code>输入如下命令，会新建博客根目录</li></ul><pre class=" language-YAML"><code class="language-YAML">hugo new site myblog(自定义博客根目录名称)</code></pre><ul><li>切换到根目录下(<code>myblog</code>)，<a href="https://themes.gohugo.io/">选择Hugo主题下载</a>，以<code>npq</code>为例，执行如下命令。推荐使用<code>even</code>主题<code>https://github.com/olOwOlo/hugo-theme-even</code></li></ul><pre class=" language-yaml"><code class="language-yaml">git clone https<span class="token punctuation">:</span>//github.com/ahmedsaadxyzz/npq<span class="token punctuation">-</span>hugo.git</code></pre><ul><li>将文件移动到<code>./myblog/themes</code>目录下，修改名字为<code>npq</code>，将<code>npq\exampleSite</code>目录下的<code>config.toml</code>复制到<code>myblog</code>根目录，打开第5行修改为<code>theme=&quot;npq&quot;</code>，修改<code>themesdir = &quot;../myblog/themes&quot;</code></li><li><code>/themes/npq/static</code>文件夹下放置<code>avatar.png</code>作为个人博客的头像</li></ul><hr><h3 id="2-2-本地启动个人博客"><a href="#2-2-本地启动个人博客" class="headerlink" title="2.2 本地启动个人博客"></a>2.2 本地启动个人博客</h3><ul><li>在<code>myblog</code>根目录下，输入下面命令在本地启动个人博客，效果图如下</li><li>注意：在<code>myblog</code>目录下的<code>config.toml</code>设置好，<code>theme、buildDrafts</code>后，直接输入<code>hugo server</code>即可在本地启动个人博客。</li></ul><pre class=" language-yaml"><code class="language-yaml">hugo server <span class="token punctuation">-</span>t npq <span class="token punctuation">-</span><span class="token punctuation">-</span>buildDrafts</code></pre><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/createblog/4.1h24afipfc5c.png" alt="4"></p><ul><li>复制<code>http://localhost:1313/</code>，到浏览器中，查看站点是否运行成功</li></ul><hr><h3 id="2-3-实际写一篇文章在本地启动"><a href="#2-3-实际写一篇文章在本地启动" class="headerlink" title="2.3 实际写一篇文章在本地启动"></a>2.3 实际写一篇文章在本地启动</h3><ul><li>切换到<code>myblog</code>根目录，输入如下命令，会在<code>myblog/content/post</code>路径下生成<code>markdown</code>文件，最好不要修改生成时已有内容，用<code>vs code</code>、<code>Typora</code>（强烈推荐，即时渲染<code>markdown</code>）或其他编辑器写<code>markdown</code>博客。</li></ul><pre class=" language-yaml"><code class="language-yaml">hugo new post/blog.md //自定义md文件名</code></pre><ul><li>切换到<code>myblog</code>根目录，输入如下命令，复制<code>http://localhost:1313/</code>，查看本地博客内容,如下图所示。每次修改<code>blog.md</code>都有运行下面的命令更新内容。</li></ul><pre class=" language-yaml"><code class="language-yaml">hugo server <span class="token punctuation">-</span>t npq <span class="token punctuation">-</span><span class="token punctuation">-</span>buildDrafts</code></pre><p><img src="https://cdn.jsdelivr.net/gh/wangxinzhi0/PicX-image@master/createblog/5.6s3j8ntkg040.png" alt="5"></p><p>恭喜你完成了本地个人博客生成！</p><hr><h2 id="3-将个人博客部署到远端"><a href="#3-将个人博客部署到远端" class="headerlink" title="3 将个人博客部署到远端"></a>3 将个人博客部署到远端</h2><ul><li>上面的一系列操作，得到的博客网站的站点只能在自己的电脑上本地访问，要想别人能访问你的博客网站，必须将个人博客部署到远端服务器，这里以<code>Github</code>为例，而且仍然给出<code>gitee</code>的命令。</li><li>在<code>GitHub</code>上创建新仓库，命名必须是你<code>github</code>的昵称且必须小写再加上<code>.github.io</code>，例如<code>wangxinzhi0.github.io</code>。<code>Gitee</code>的话，仓库路径为<code>gitee</code>名称，如<code>wangxinzhi0</code>，注意仓库开源！</li><li>在<code>myblog</code>根目录下输入如下命令，配置远端地址</li><li><strong>注意</strong>：在<code>myblog</code>目录下的<code>config.toml</code>设置好，<code>theme、baseUrl、buildDrafts</code>后，直接输入<code>hugo</code>即可完成部署到远端的文件生成。</li></ul><pre class=" language-YAML"><code class="language-YAML">hugo --theme=even --baseUrl="https://wangxinzhi0.github.io/" --buildDrafts//配置github时hugo --theme=even --baseUrl="https://wangxinzhi0.gitee.io/" --buildDrafts//配置gitee时</code></pre><ul><li>然后会在<code>myblog</code>根目录下生成<code>public</code>文件夹，切换到<code>public</code>文件夹下，一次输入如下命令将博客推送到远端仓库</li></ul><pre class=" language-YAML"><code class="language-YAML">git init //初始化(只需要初始化一次)git add . //提交全部文件git commit -m "我的Hugo博客首次提交" //提交注释git remote add github git@github.com:wangxinzhi0/wangxinzhi0.github.io.git  // 设置远端仓库1（只需要设置一次）git remote add gitee git@gitee.com:wangxinzhi0/blog.git//设置远端仓库2git push -u github master //推送到远端库1git push -u gitee master //推送到远端库2</code></pre><ul><li>最后，在浏览器中输入<code>wangxinzhi0.github.io</code>，即可访问自己的博客网站。</li><li>或者<code>wangxinzhi0.gitee.io</code>，注意需要在仓库的服务中开启Pages服务。</li></ul><p>已将博客部署到远端，享受吧！！！</p><h2 id="4-常见推送问题"><a href="#4-常见推送问题" class="headerlink" title="4.常见推送问题"></a>4.常见推送问题</h2><ul><li><code>! [rejected]    master -&gt; master (fetch first)</code>：远端库的文件和本地库没有，先pull到本地，后<code>push</code></li></ul><pre class=" language-yaml"><code class="language-yaml">git pull <span class="token punctuation">-</span><span class="token punctuation">-</span>rebase origin mastergit rebase <span class="token punctuation">-</span><span class="token punctuation">-</span>abort //出现(master<span class="token punctuation">|</span>REBASE 1/1)，回到mastergit push origin master</code></pre><ul><li><code>! [rejected]    master -&gt; master(non-fast-forward)</code></li></ul><pre class=" language-yaml"><code class="language-yaml">git pull origin master <span class="token punctuation">-</span><span class="token punctuation">-</span>allow<span class="token punctuation">-</span>unrelated<span class="token punctuation">-</span>histories //把远端仓库和本地同步，消除差异重新add和commit文件git push <span class="token punctuation">-</span>u origin master</code></pre><ul><li> <code>(master|MERGING)</code></li></ul><pre class=" language-yaml"><code class="language-yaml">git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>hard head//回退版本信息</code></pre><p>&emsp;&emsp;如果实在无法解决冲突就直接删除<code>public</code>和远端仓库，重新生成public和创建<code>github</code>仓库，并推送到<code>github</code>！</p><h2 id="5-添加搜索功能"><a href="#5-添加搜索功能" class="headerlink" title="5.添加搜索功能"></a>5.添加搜索功能</h2><p>&emsp;&emsp;依靠主题<code>hugo-search-fuse-js</code>：<a href="https://github.com/kaushalmodi/hugo-search-fuse-js">https://github.com/kaushalmodi/hugo-search-fuse-js</a></p><p>&emsp;&emsp;1. 克隆该主题到<code>./myblog/themes</code>文件夹，修改<code>./myblog/config.toml</code>文件的<code>theme=[&quot;hugo-search-fuse-js&quot;, &quot;even&quot;]</code></p><p>&emsp;&emsp;2. 在<code>./myblog/content</code>文件夹下创建<code>search.md</code>文件，一个例子内容如下</p><pre class=" language-yaml"><code class="language-yaml">+++title = "Search🔍"layout = "search"outputs = <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sitemap<span class="token punctuation">]</span>  priority = 0.1+++</code></pre><p>&emsp;&emsp;3. 修改主主题<code>even</code>的<code>baseof.html</code>文件，在<code>./myblog/themes/even/layouts/_default/baseof.html</code>处，一种可能的例子修改内容如下</p><pre class=" language-YAML"><code class="language-YAML">&#123;&#123; if ne .Site.Params.version "4.x" -&#125;&#125; &#123;&#123; errorf "\n\nThere are two possible situations that led to this error:\n  1. You haven't copied the config.toml yet. See https://github.com/olOwOlo/hugo-theme-even#installation \n  2. You have an incompatible update. See https://github.com/olOwOlo/hugo-theme-even/blob/master/CHANGELOG.md#400-2018-11-06 \n\n有两种可能的情况会导致这个错误发生:\n  1. 你还没有复制 config.toml 参考 https://github.com/olOwOlo/hugo-theme-even/blob/master/README-zh.md#installation \n  2. 你进行了一次不兼容的更新 参考 https://github.com/olOwOlo/hugo-theme-even/blob/master/CHANGELOG.md#400-2018-11-06 \n" -&#125;&#125;&#123;&#123; end -&#125;&#125;<!DOCTYPE html><html lang="&#123;&#123; .Site.Language &#125;&#125;"><head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> <title>   &#123;&#123;- block "title" . -&#125;&#125;     &#123;&#123; if .IsPage &#125;&#125;&#123;&#123; .Title &#125;&#125; - &#123;&#123; .Site.Title &#125;&#125;&#123;&#123; else &#125;&#125;&#123;&#123; .Site.Title &#125;&#125;&#123;&#123; end &#125;&#125;   &#123;&#123;- end -&#125;&#125; </title> &#123;&#123; partial "head.html" . &#125;&#125;</head><body> &#123;&#123; partial "slideout.html" . &#125;&#125; <div class="container" id="mobile-panel">   &#123;&#123; if not .Params.hideHeaderAndFooter -&#125;&#125;   <header id="header" class="header">       &#123;&#123; partial "header.html" . &#125;&#125;   </header>   &#123;&#123;- end &#125;&#125;   &#123;&#123; block "main" .  &#125;&#125;   <main id="main" class="main">     <div class="content-wrapper">       <div id="content" class="content">         &#123;&#123; block "content" . &#125;&#125;&#123;&#123; end &#125;&#125;       </div>       &#123;&#123; partial "comments.html" . &#125;&#125;     </div>   </main>   &#123;&#123; end &#125;&#125;   &#123;&#123; if not .Params.hideHeaderAndFooter -&#125;&#125;   &#123;&#123; block "footer" .  &#125;&#125;   <footer id="footer" class="footer">     &#123;&#123; partial "footer.html" . &#125;&#125;   </footer>   &#123;&#123; end &#125;&#125;   &#123;&#123;- end &#125;&#125;   <div class="back-to-top" id="back-to-top">     <i class="iconfont icon-up"></i>   </div> </div> &#123;&#123; partial "scripts.html" . &#125;&#125;</body></html></code></pre><p>&emsp;&emsp;在站点的配置文件<code>config.toml</code>中添加<code>Search</code>菜单</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">[</span>menu.main<span class="token punctuation">]</span><span class="token punctuation">]</span>  name = "搜索🔍"  weight = 50  identifier = "search"  url = "/search/"</code></pre><p>&emsp;&emsp;<strong>注意</strong>：可能出现表单不安全，搜索不安全等问题！</p><ul><li><strong>暂定解决方法</strong>：点击地址框小锁，选“网站设置”，“不安全内容”设置“允许”。检索本站，不会有安全问题！(待解决)</li></ul><h2 id="6-添加暗黑模式"><a href="#6-添加暗黑模式" class="headerlink" title="6. 添加暗黑模式"></a>6. 添加暗黑模式</h2><p>&emsp;&emsp;参考内容：<a href="http://www.9ong.com/042021/hugo%E4%BC%98%E9%9B%85%E6%94%AF%E6%8C%81%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F.html#table-of-contents">http://www.9ong.com/042021/hugo%E4%BC%98%E9%9B%85%E6%94%AF%E6%8C%81%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F.html#table-of-contents</a></p><p><a href="https://radu-matei.com/blog/dark-mode/">https://radu-matei.com/blog/dark-mode/</a></p><ul><li>首先，在自己使用主题目录下新增<code>static/css/dark.css</code>，文件内容如下。</li></ul><pre class=" language-YAML"><code class="language-YAML">html &#123;    background-color: #171717 !important;&#125;html &#123;    filter: invert(100%) hue-rotate(180deg) brightness(105%) contrast(85%);    -webkit-filter: invert(100%) hue-rotate(180deg) brightness(105%) contrast(85%);&#125;body &#123;    background-color: #FFF !important;&#125;img,video,body * [style*="background-image"] &#123;    filter: hue-rotate(180deg) contrast(100%) invert(100%);    -webkit-filter: hue-rotate(180deg) contrast(100%) invert(100%);&#125;</code></pre><ul><li>然后在主题目录中的<code>layouts/partials/scripts.html</code>文件最后追加夜间模式样式。我们后面使用<code>JavaScript</code>代码修改<code>disable</code>。</li></ul><pre class=" language-YAML"><code class="language-YAML"><!--夜间模式样式，来源谷歌浏览器插件--><link disabled id="dark-mode-theme" rel="stylesheet" href="/css/dark.css"></link></code></pre><ul><li><strong>创建切换模式按钮</strong>，直接追加在<code>scripts.html</code>后。</li></ul><pre class=" language-YAML"><code class="language-YAML"><!--创建按钮--><li style="position: fixed;bottom: 50%;right: 75%;">    <input type="button" class="fal fa-sun-o" value="To Dark Mode" id="dark-mode-toggle"></li></code></pre><ul><li>最后，在<code>scripts.html</code>文件最后增加切换代码。</li></ul><pre class=" language-YAML"><code class="language-YAML"><script>    var toggle = document.getElementById("dark-mode-toggle");    var darkTheme = document.getElementById("dark-mode-theme");    var systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches      ? "dark"      : "light";    // the default theme is the system theme, unless the user has    // explicitly overriden it.    var savedTheme = localStorage.getItem("dark-mode-storage") || systemTheme;    setTheme(savedTheme);    // set the appropriate theme when the user toggles the button    toggle.addEventListener("click", () => &#123;      if (toggle.className === "far fa-moon") &#123;        setTheme("dark");        localStorage.setItem("dark-mode-storage", "dark");      &#125; else if (toggle.className === "far fa-sun") &#123;        setTheme("light");        localStorage.setItem("dark-mode-storage", "light");      &#125;    &#125;);    // Add an event listener when the browser theme changes.    // The user defined theme does take precedence, so if the    // changed the browser theme, do not persist the change    // across refreshes.    window      .matchMedia("(prefers-color-scheme: dark)")      .addEventListener("change", (event) => &#123;        if (event.matches) &#123;          setTheme("dark");        &#125; else &#123;          setTheme("light");        &#125;      &#125;);    function setTheme(mode) &#123;      if (mode === "dark") &#123;        darkTheme.disabled = false;        toggle.className = "far fa-sun";        toggle.title = "Enable Light Mode";        toggle.value = "To Light Mode";      &#125; else if (mode === "light") &#123;        darkTheme.disabled = true;        toggle.className = "far fa-moon";        toggle.title = "Enable Dark Mode";        toggle.value = "To Dark Mode";      &#125;    &#125;</script></code></pre><ul><li>主题目录中的<code>layouts/partials/scripts.html</code>文件追加的全部内容如下</li></ul><pre class=" language-YAML"><code class="language-YAML"><!--夜间模式样式，来源谷歌浏览器插件--><link disabled id="dark-mode-theme" rel="stylesheet" href="/css/dark.css"></link><!--创建按钮--><li style="position: fixed;bottom: 50%;right: 75%;">    <input type="button" class="fal fa-sun-o" value="To Dark Mode" id="dark-mode-toggle"></li><!--夜间模式和日间模式切换脚本--><script>    var toggle = document.getElementById("dark-mode-toggle");    var darkTheme = document.getElementById("dark-mode-theme");    var systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches      ? "dark"      : "light";    // the default theme is the system theme, unless the user has    // explicitly overriden it.    var savedTheme = localStorage.getItem("dark-mode-storage") || systemTheme;    setTheme(savedTheme);    // set the appropriate theme when the user toggles the button    toggle.addEventListener("click", () => &#123;      if (toggle.className === "far fa-moon") &#123;        setTheme("dark");        localStorage.setItem("dark-mode-storage", "dark");      &#125; else if (toggle.className === "far fa-sun") &#123;        setTheme("light");        localStorage.setItem("dark-mode-storage", "light");      &#125;    &#125;);    // Add an event listener when the browser theme changes.    // The user defined theme does take precedence, so if the    // changed the browser theme, do not persist the change    // across refreshes.    window      .matchMedia("(prefers-color-scheme: dark)")      .addEventListener("change", (event) => &#123;        if (event.matches) &#123;          setTheme("dark");        &#125; else &#123;          setTheme("light");        &#125;      &#125;);    function setTheme(mode) &#123;      if (mode === "dark") &#123;        darkTheme.disabled = false;        toggle.className = "far fa-sun";        toggle.title = "Enable Light Mode";        toggle.value = "To Light Mode";      &#125; else if (mode === "light") &#123;        darkTheme.disabled = true;        toggle.className = "far fa-moon";        toggle.title = "Enable Dark Mode";        toggle.value = "To Dark Mode";      &#125;    &#125;</script></code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hugo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
